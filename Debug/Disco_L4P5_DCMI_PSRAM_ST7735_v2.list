
Disco_L4P5_DCMI_PSRAM_ST7735_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a0  080098a0  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  080098a0  080098a0  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098a0  080098a0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080098a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000099f0  20000100  080099a8  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009af0  080099a8  00029af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016246  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317e  00000000  00000000  00036376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  000394f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df52  00000000  00000000  0003bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157d3  00000000  00000000  00069b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f0f7  00000000  00000000  0007f355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e44c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  0018e49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000100 	.word	0x20000100
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800926c 	.word	0x0800926c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000104 	.word	0x20000104
 80001fc:	0800926c 	.word	0x0800926c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f003 fcd7 	bl	8003c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f8dd 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 fa85 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 80002b2:	f000 fa1d 	bl	80006f0 <MX_DMA_Init>
  MX_I2C1_Init();
 80002b6:	f000 f95d 	bl	8000574 <MX_I2C1_Init>
  MX_I2C4_Init();
 80002ba:	f000 f99b 	bl	80005f4 <MX_I2C4_Init>
  MX_SPI2_Init();
 80002be:	f000 f9d9 	bl	8000674 <MX_SPI2_Init>
  MX_DCMI_Init();
 80002c2:	f000 f923 	bl	800050c <MX_DCMI_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80002c6:	f000 fa79 	bl	80007bc <MX_GPIO_Init>
  MX_SPI2_Init();
 80002ca:	f000 f9d3 	bl	8000674 <MX_SPI2_Init>
  ST7735_Init();
 80002ce:	f000 fff7 	bl	80012c0 <ST7735_Init>

	ST7735_FillScreen(ST7735_BLACK);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f001 f8bc 	bl	8001450 <ST7735_FillScreen>
//  BSP_LCD_FillRect(0, 0, 100, 100);


  /*##-2- Initialize the LCD #################################################*/
   /*##-1- LEDs initialization  #################################################*/
   BSP_LED_Init(LED2);
 80002d8:	2001      	movs	r0, #1
 80002da:	f002 fe7d 	bl	8002fd8 <BSP_LED_Init>
   BSP_LED_Init(LED1);
 80002de:	2000      	movs	r0, #0
 80002e0:	f002 fe7a 	bl	8002fd8 <BSP_LED_Init>

   /* Initialize the IO functionalities */
   hal_status = BSP_IO_Init();
 80002e4:	f003 fc3a 	bl	8003b5c <BSP_IO_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b58      	ldr	r3, [pc, #352]	; (8000450 <main+0x1b0>)
 80002ee:	701a      	strb	r2, [r3, #0]
   OnError_Handler(hal_status != HAL_OK);
 80002f0:	4b57      	ldr	r3, [pc, #348]	; (8000450 <main+0x1b0>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	bf14      	ite	ne
 80002f8:	2301      	movne	r3, #1
 80002fa:	2300      	moveq	r3, #0
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fbae 	bl	8000a60 <OnError_Handler>

   hal_status = BSP_IO_ConfigPin(IO_PIN_3, IO_MODE_OUTPUT);
 8000304:	2101      	movs	r1, #1
 8000306:	2008      	movs	r0, #8
 8000308:	f003 fc6c 	bl	8003be4 <BSP_IO_ConfigPin>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b4f      	ldr	r3, [pc, #316]	; (8000450 <main+0x1b0>)
 8000312:	701a      	strb	r2, [r3, #0]
   OnError_Handler(hal_status != HAL_OK);
 8000314:	4b4e      	ldr	r3, [pc, #312]	; (8000450 <main+0x1b0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	bf14      	ite	ne
 800031c:	2301      	movne	r3, #1
 800031e:	2300      	moveq	r3, #0
 8000320:	b2db      	uxtb	r3, r3
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fb9c 	bl	8000a60 <OnError_Handler>

   BSP_IO_WritePin(IO_PIN_3, BSP_IO_PIN_SET);
 8000328:	2101      	movs	r1, #1
 800032a:	2008      	movs	r0, #8
 800032c:	f003 fc6e 	bl	8003c0c <BSP_IO_WritePin>
   HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	; 0x64
 8000332:	f003 fd05 	bl	8003d40 <HAL_Delay>

   hal_status = BSP_IO_ConfigPin(IO_PIN_7, IO_MODE_INPUT);
 8000336:	2100      	movs	r1, #0
 8000338:	2080      	movs	r0, #128	; 0x80
 800033a:	f003 fc53 	bl	8003be4 <BSP_IO_ConfigPin>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b43      	ldr	r3, [pc, #268]	; (8000450 <main+0x1b0>)
 8000344:	701a      	strb	r2, [r3, #0]
   OnError_Handler(hal_status != HAL_OK);
 8000346:	4b42      	ldr	r3, [pc, #264]	; (8000450 <main+0x1b0>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	bf14      	ite	ne
 800034e:	2301      	movne	r3, #1
 8000350:	2300      	moveq	r3, #0
 8000352:	b2db      	uxtb	r3, r3
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fb83 	bl	8000a60 <OnError_Handler>

   uint32_t val= BSP_IO_ReadPin(IO_PIN_7);
 800035a:	2080      	movs	r0, #128	; 0x80
 800035c:	f003 fc6a 	bl	8003c34 <BSP_IO_ReadPin>
 8000360:	60b8      	str	r0, [r7, #8]
   printf("plugged %lu\n", val);
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	483b      	ldr	r0, [pc, #236]	; (8000454 <main+0x1b4>)
 8000366:	f008 f8d3 	bl	8008510 <iprintf>

#define CAM
#ifdef CAM
	/*##-3- Camera Initialization ############################*/
	/* Initialize the Camera in QQVGA mode */
	hal_status = BSP_CAMERA_Init(CAMERA_R160x120);
 800036a:	2000      	movs	r0, #0
 800036c:	f003 fa60 	bl	8003830 <BSP_CAMERA_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	4b36      	ldr	r3, [pc, #216]	; (8000450 <main+0x1b0>)
 8000376:	701a      	strb	r2, [r3, #0]
	OnError_Handler(hal_status != HAL_OK);
 8000378:	4b35      	ldr	r3, [pc, #212]	; (8000450 <main+0x1b0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf14      	ite	ne
 8000380:	2301      	movne	r3, #1
 8000382:	2300      	moveq	r3, #0
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fb6a 	bl	8000a60 <OnError_Handler>

	/* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
	HAL_Delay(1000);
 800038c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000390:	f003 fcd6 	bl	8003d40 <HAL_Delay>

	/*##-4- Camera Continuous capture start in QVGA resolution ############################*/
	/* Disable unwanted HSYNC (IT_LINE)/VSYNC interrupts */
	__HAL_DCMI_DISABLE_IT(&hDcmiHandler, DCMI_IT_LINE | DCMI_IT_VSYNC);
 8000394:	4b30      	ldr	r3, [pc, #192]	; (8000458 <main+0x1b8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	68da      	ldr	r2, [r3, #12]
 800039a:	4b2f      	ldr	r3, [pc, #188]	; (8000458 <main+0x1b8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0218 	bic.w	r2, r2, #24
 80003a2:	60da      	str	r2, [r3, #12]

	hal_status = HAL_DCMI_Start_DMA(&hDcmiHandler, DCMI_MODE_SNAPSHOT,  (uint32_t)(pBuffer) , CAMERA_WIDTH * CAMERA_HEIGHT/2 );
 80003a4:	4a2d      	ldr	r2, [pc, #180]	; (800045c <main+0x1bc>)
 80003a6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80003aa:	2102      	movs	r1, #2
 80003ac:	482a      	ldr	r0, [pc, #168]	; (8000458 <main+0x1b8>)
 80003ae:	f003 feb5 	bl	800411c <HAL_DCMI_Start_DMA>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <main+0x1b0>)
 80003b8:	701a      	strb	r2, [r3, #0]
	/* ------------------------------------------------------------------------------------------- uint32_t size ---- */
	OnError_Handler(hal_status != HAL_OK);
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <main+0x1b0>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	bf14      	ite	ne
 80003c2:	2301      	movne	r3, #1
 80003c4:	2300      	moveq	r3, #0
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fb49 	bl	8000a60 <OnError_Handler>

	/*##-4- Line capture ############################*/
	printf("capture %lu\n", start_the_camera_capture);
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <main+0x1c0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4619      	mov	r1, r3
 80003d4:	4823      	ldr	r0, [pc, #140]	; (8000464 <main+0x1c4>)
 80003d6:	f008 f89b 	bl	8008510 <iprintf>
	while(start_the_camera_capture == 0) {;}
 80003da:	bf00      	nop
 80003dc:	4b20      	ldr	r3, [pc, #128]	; (8000460 <main+0x1c0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0fb      	beq.n	80003dc <main+0x13c>
	printf("capture %lu\n", start_the_camera_capture);
 80003e4:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <main+0x1c0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	481e      	ldr	r0, [pc, #120]	; (8000464 <main+0x1c4>)
 80003ec:	f008 f890 	bl	8008510 <iprintf>

	uint16_t data[1];
	for (uint16_t i=0; i<ST7735_WIDTH; i++){
 80003f0:	2300      	movs	r3, #0
 80003f2:	81fb      	strh	r3, [r7, #14]
 80003f4:	e023      	b.n	800043e <main+0x19e>
		for (uint16_t j=0; j<ST7735_HEIGHT; j++){
 80003f6:	2300      	movs	r3, #0
 80003f8:	81bb      	strh	r3, [r7, #12]
 80003fa:	e01a      	b.n	8000432 <main+0x192>
			/*        FEDCBA9876543210 */
			data[0]=0b1111100000000000;
 80003fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000400:	80bb      	strh	r3, [r7, #4]
			uint16_t color565 = pBuffer[j*ST7735_WIDTH+i];
 8000402:	89ba      	ldrh	r2, [r7, #12]
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	015b      	lsls	r3, r3, #5
 800040c:	461a      	mov	r2, r3
 800040e:	89fb      	ldrh	r3, [r7, #14]
 8000410:	4413      	add	r3, r2
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <main+0x1bc>)
 8000414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000418:	80fb      	strh	r3, [r7, #6]
			//color565 = ((color565 & 0xFF00) >> 8) | ((color565 & 0xFF) << 8);
			ST7735_DrawPixel(ST7735_WIDTH-1-i, j, color565);
 800041a:	89fb      	ldrh	r3, [r7, #14]
 800041c:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8000420:	b29b      	uxth	r3, r3
 8000422:	88fa      	ldrh	r2, [r7, #6]
 8000424:	89b9      	ldrh	r1, [r7, #12]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 ff6c 	bl	8001304 <ST7735_DrawPixel>
		for (uint16_t j=0; j<ST7735_HEIGHT; j++){
 800042c:	89bb      	ldrh	r3, [r7, #12]
 800042e:	3301      	adds	r3, #1
 8000430:	81bb      	strh	r3, [r7, #12]
 8000432:	89bb      	ldrh	r3, [r7, #12]
 8000434:	2b7f      	cmp	r3, #127	; 0x7f
 8000436:	d9e1      	bls.n	80003fc <main+0x15c>
	for (uint16_t i=0; i<ST7735_WIDTH; i++){
 8000438:	89fb      	ldrh	r3, [r7, #14]
 800043a:	3301      	adds	r3, #1
 800043c:	81fb      	strh	r3, [r7, #14]
 800043e:	89fb      	ldrh	r3, [r7, #14]
 8000440:	2b9f      	cmp	r3, #159	; 0x9f
 8000442:	d9d8      	bls.n	80003f6 <main+0x156>
		}
	}
	HAL_Delay(15000);
 8000444:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000448:	f003 fc7a 	bl	8003d40 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x1ac>
 800044e:	bf00      	nop
 8000450:	20009950 	.word	0x20009950
 8000454:	08009284 	.word	0x08009284
 8000458:	20009a08 	.word	0x20009a08
 800045c:	20000350 	.word	0x20000350
 8000460:	2000034c 	.word	0x2000034c
 8000464:	08009294 	.word	0x08009294

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b098      	sub	sp, #96	; 0x60
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	2248      	movs	r2, #72	; 0x48
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f007 ff62 	bl	8008340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800048a:	2000      	movs	r0, #0
 800048c:	f005 fe7a 	bl	8006184 <HAL_PWREx_ControlVoltageScaling>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000496:	f000 faf2 	bl	8000a7e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800049a:	2310      	movs	r3, #16
 800049c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800049e:	2301      	movs	r3, #1
 80004a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004a6:	2360      	movs	r3, #96	; 0x60
 80004a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004ae:	2301      	movs	r3, #1
 80004b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80004b6:	2337      	movs	r3, #55	; 0x37
 80004b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004ba:	2307      	movs	r3, #7
 80004bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0318 	add.w	r3, r7, #24
 80004ca:	4618      	mov	r0, r3
 80004cc:	f005 ff0e 	bl	80062ec <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004d6:	f000 fad2 	bl	8000a7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2303      	movs	r3, #3
 80004e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2105      	movs	r1, #5
 80004f2:	4618      	mov	r0, r3
 80004f4:	f006 fb76 	bl	8006be4 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004fe:	f000 fabe 	bl	8000a7e <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3760      	adds	r7, #96	; 0x60
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_DCMI_Init+0x60>)
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_DCMI_Init+0x64>)
 8000514:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_DCMI_Init+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_DCMI_Init+0x60>)
 800051e:	2220      	movs	r2, #32
 8000520:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_DCMI_Init+0x60>)
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_DCMI_Init+0x60>)
 800052a:	2240      	movs	r2, #64	; 0x40
 800052c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_DCMI_Init+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_DCMI_Init+0x60>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_DCMI_Init+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_DCMI_Init+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_DCMI_Init+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_DCMI_Init+0x60>)
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_DCMI_Init+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_DCMI_Init+0x60>)
 800055a:	f003 fd59 	bl	8004010 <HAL_DCMI_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000564:	f000 fa8b 	bl	8000a7e <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000011c 	.word	0x2000011c
 8000570:	50050000 	.word	0x50050000

08000574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_I2C1_Init+0x74>)
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <MX_I2C1_Init+0x78>)
 800057c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <MX_I2C1_Init+0x7c>)
 8000582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_I2C1_Init+0x74>)
 800058c:	2201      	movs	r2, #1
 800058e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005b0:	f004 fe88 	bl	80052c4 <HAL_I2C_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ba:	f000 fa60 	bl	8000a7e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005be:	2100      	movs	r1, #0
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005c2:	f005 fd27 	bl	8006014 <HAL_I2CEx_ConfigAnalogFilter>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005cc:	f000 fa57 	bl	8000a7e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005d4:	f005 fd69 	bl	80060aa <HAL_I2CEx_ConfigDigitalFilter>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005de:	f000 fa4e 	bl	8000a7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200001e0 	.word	0x200001e0
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40505681 	.word	0x40505681

080005f4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_I2C4_Init+0x74>)
 80005fa:	4a1c      	ldr	r2, [pc, #112]	; (800066c <MX_I2C4_Init+0x78>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x40505681;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_I2C4_Init+0x74>)
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <MX_I2C4_Init+0x7c>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_I2C4_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_I2C4_Init+0x74>)
 800060c:	2201      	movs	r2, #1
 800060e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_I2C4_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_I2C4_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C4_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C4_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C4_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800062e:	480e      	ldr	r0, [pc, #56]	; (8000668 <MX_I2C4_Init+0x74>)
 8000630:	f004 fe48 	bl	80052c4 <HAL_I2C_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800063a:	f000 fa20 	bl	8000a7e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <MX_I2C4_Init+0x74>)
 8000642:	f005 fce7 	bl	8006014 <HAL_I2CEx_ConfigAnalogFilter>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800064c:	f000 fa17 	bl	8000a7e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_I2C4_Init+0x74>)
 8000654:	f005 fd29 	bl	80060aa <HAL_I2CEx_ConfigDigitalFilter>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800065e:	f000 fa0e 	bl	8000a7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000234 	.word	0x20000234
 800066c:	40008400 	.word	0x40008400
 8000670:	40505681 	.word	0x40505681

08000674 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_SPI2_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_SPI2_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800068c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000690:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000694:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_SPI2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006c4:	2207      	movs	r2, #7
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006d0:	2208      	movs	r2, #8
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006d6:	f007 fa93 	bl	8007c00 <HAL_SPI_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f9cd 	bl	8000a7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000288 	.word	0x20000288
 80006ec:	40003800 	.word	0x40003800

080006f0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <MX_DMA_Init+0xc0>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fa:	4a2d      	ldr	r2, [pc, #180]	; (80007b0 <MX_DMA_Init+0xc0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6493      	str	r3, [r2, #72]	; 0x48
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_DMA_Init+0xc0>)
 8000704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_DMA_Init+0xc0>)
 8000710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000712:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <MX_DMA_Init+0xc0>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6493      	str	r3, [r2, #72]	; 0x48
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_DMA_Init+0xc0>)
 800071c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_DMA_Init+0xc0>)
 8000728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_DMA_Init+0xc0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6493      	str	r3, [r2, #72]	; 0x48
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_DMA_Init+0xc0>)
 8000734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_DMA_Init+0xc4>)
 8000740:	4a1d      	ldr	r2, [pc, #116]	; (80007b8 <MX_DMA_Init+0xc8>)
 8000742:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_DMA_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_DMA_Init+0xc4>)
 800074c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000750:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_DMA_Init+0xc4>)
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_DMA_Init+0xc4>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_DMA_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_DMA_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_DMA_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_DMA_Init+0xc4>)
 8000772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <MX_DMA_Init+0xc4>)
 800077a:	f004 f835 	bl	80047e8 <HAL_DMA_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_DMA_Init+0x98>
  {
    Error_Handler( );
 8000784:	f000 f97b 	bl	8000a7e <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	200b      	movs	r0, #11
 800078e:	f003 fbfa 	bl	8003f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000792:	200b      	movs	r0, #11
 8000794:	f003 fc13 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2044      	movs	r0, #68	; 0x44
 800079e:	f003 fbf2 	bl	8003f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80007a2:	2044      	movs	r0, #68	; 0x44
 80007a4:	f003 fc0b 	bl	8003fbe <HAL_NVIC_EnableIRQ>

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	200002ec 	.word	0x200002ec
 80007b8:	40020008 	.word	0x40020008

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007d2:	4b94      	ldr	r3, [pc, #592]	; (8000a24 <MX_GPIO_Init+0x268>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a93      	ldr	r2, [pc, #588]	; (8000a24 <MX_GPIO_Init+0x268>)
 80007d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b91      	ldr	r3, [pc, #580]	; (8000a24 <MX_GPIO_Init+0x268>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b8e      	ldr	r3, [pc, #568]	; (8000a24 <MX_GPIO_Init+0x268>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a8d      	ldr	r2, [pc, #564]	; (8000a24 <MX_GPIO_Init+0x268>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b8b      	ldr	r3, [pc, #556]	; (8000a24 <MX_GPIO_Init+0x268>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	4b88      	ldr	r3, [pc, #544]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a87      	ldr	r2, [pc, #540]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b85      	ldr	r3, [pc, #532]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b82      	ldr	r3, [pc, #520]	; (8000a24 <MX_GPIO_Init+0x268>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a81      	ldr	r2, [pc, #516]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b7f      	ldr	r3, [pc, #508]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b7c      	ldr	r3, [pc, #496]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a7b      	ldr	r2, [pc, #492]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b79      	ldr	r3, [pc, #484]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <MX_GPIO_Init+0x268>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a75      	ldr	r2, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000862:	f005 fd33 	bl	80062cc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a6e      	ldr	r2, [pc, #440]	; (8000a24 <MX_GPIO_Init+0x268>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b6c      	ldr	r3, [pc, #432]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a68      	ldr	r2, [pc, #416]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x268>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4b63      	ldr	r3, [pc, #396]	; (8000a24 <MX_GPIO_Init+0x268>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a62      	ldr	r2, [pc, #392]	; (8000a24 <MX_GPIO_Init+0x268>)
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <MX_GPIO_Init+0x268>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ST7735_CS_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	485d      	ldr	r0, [pc, #372]	; (8000a28 <MX_GPIO_Init+0x26c>)
 80008b4:	f004 fcee 	bl	8005294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2102      	movs	r1, #2
 80008bc:	485b      	ldr	r0, [pc, #364]	; (8000a2c <MX_GPIO_Init+0x270>)
 80008be:	f004 fce9 	bl	8005294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI10 PI9 PI1 PI11
                           PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_11
 80008c2:	f640 7302 	movw	r3, #3842	; 0xf02
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4854      	ldr	r0, [pc, #336]	; (8000a28 <MX_GPIO_Init+0x26c>)
 80008d8:	f004 fa58 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH15 PH13 PH7
                           PH3 PH6 PH0 PH1
                           PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_7
 80008dc:	f24a 03df 	movw	r3, #41183	; 0xa0df
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	484f      	ldr	r0, [pc, #316]	; (8000a30 <MX_GPIO_Init+0x274>)
 80008f2:	f004 fa4b 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB5 PB8
                           PB9 PB11 PB0 PB1
                           PB14 PB2 PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 80008f6:	f645 733f 	movw	r3, #24383	; 0x5f3f
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_14|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fc:	2303      	movs	r3, #3
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	484a      	ldr	r0, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x278>)
 800090c:	f004 fa3e 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA5 PA4
                           PA7 PA3 PA6 PA2
                           PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000910:	f649 73fe 	movw	r3, #40958	; 0x9ffe
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_2
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f004 fa30 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_CS_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin;
 800092c:	2305      	movs	r3, #5
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4839      	ldr	r0, [pc, #228]	; (8000a28 <MX_GPIO_Init+0x26c>)
 8000944:	f004 fa22 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE4 PE3 PE2
                           PE6 PE5 PE10 PE9
                           PE15 PE8 PE14 PE7
                           PE13 PE12 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8000948:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094e:	2303      	movs	r3, #3
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4836      	ldr	r0, [pc, #216]	; (8000a38 <MX_GPIO_Init+0x27c>)
 800095e:	f004 fa15 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG11 PG12
                           PG14 PG13 PG6 PG1
                           PG8 PG7 PG0 PG5
                           PG4 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000962:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000968:	2303      	movs	r3, #3
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4831      	ldr	r0, [pc, #196]	; (8000a3c <MX_GPIO_Init+0x280>)
 8000978:	f004 fa08 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD4 PD5 PD2
                           PD6 PD3 PD7 PD15
                           PD10 PD14 PD12 PD11
                           PD13 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_2
 800097c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4826      	ldr	r0, [pc, #152]	; (8000a2c <MX_GPIO_Init+0x270>)
 8000992:	f004 f9fb 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin;
 8000996:	2302      	movs	r3, #2
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ST7735_DC_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <MX_GPIO_Init+0x270>)
 80009ae:	f004 f9ed 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC13 PC11 PC14
                           PC12 PC6 PC15 PC9
                           PC8 PC7 PC4 PC0
                           PC1 PC2 PC5 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_14
 80009b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <MX_GPIO_Init+0x284>)
 80009c8:	f004 f9e0 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF4 PF10 PF11 PF13
                           PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80009cc:	f643 431f 	movw	r3, #15391	; 0x3c1f
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <MX_GPIO_Init+0x288>)
 80009e2:	f004 f9d3 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <MX_GPIO_Init+0x288>)
 80009fc:	f004 f9c6 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a00:	2301      	movs	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f004 f9b8 	bl	8004d8c <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3738      	adds	r7, #56	; 0x38
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48002000 	.word	0x48002000
 8000a2c:	48000c00 	.word	0x48000c00
 8000a30:	48001c00 	.word	0x48001c00
 8000a34:	48000400 	.word	0x48000400
 8000a38:	48001000 	.word	0x48001000
 8000a3c:	48001800 	.word	0x48001800
 8000a40:	48000800 	.word	0x48000800
 8000a44:	48001400 	.word	0x48001400

08000a48 <BSP_CAMERA_FrameEventCallback>:

/**
 * @brief  Camera Frame Event callback.
 */
void BSP_CAMERA_FrameEventCallback(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	start_the_camera_capture = 1;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <BSP_CAMERA_FrameEventCallback+0x14>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	2000034c 	.word	0x2000034c

08000a60 <OnError_Handler>:
 * @brief  On Error Handler on condition TRUE.
 * @param  condition : Can be TRUE or FALSE
 * @retval None
 */
static void OnError_Handler(uint32_t condition)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	if(condition)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <OnError_Handler+0x16>
	{
		BSP_LED_On(LED1);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f002 fb1c 	bl	80030ac <BSP_LED_On>
		while(1) { ; } /* Blocking on error */
 8000a74:	e7fe      	b.n	8000a74 <OnError_Handler+0x14>
	}
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a82:	b672      	cpsid	i
}
 8000a84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a4e      	ldr	r2, [pc, #312]	; (8000c28 <HAL_DCMI_MspInit+0x158>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f040 8095 	bne.w	8000c1e <HAL_DCMI_MspInit+0x14e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0c:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a46      	ldr	r2, [pc, #280]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a40      	ldr	r2, [pc, #256]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b30:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b3c:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	4a3a      	ldr	r2, [pc, #232]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <HAL_DCMI_MspInit+0x15c>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    PI5     ------> DCMI_VSYNC
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D2_Pin;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000b64:	230a      	movs	r3, #10
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D2_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4830      	ldr	r0, [pc, #192]	; (8000c30 <HAL_DCMI_MspInit+0x160>)
 8000b70:	f004 f90c 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCLK_Pin
 8000b74:	f245 7320 	movw	r3, #22304	; 0x5720
 8000b78:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000b86:	230a      	movs	r3, #10
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4828      	ldr	r0, [pc, #160]	; (8000c34 <HAL_DCMI_MspInit+0x164>)
 8000b92:	f004 f8fb 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D6_Pin|DCMI_D10_Pin|DCMI_D5_Pin
 8000b96:	23f8      	movs	r3, #248	; 0xf8
 8000b98:	61fb      	str	r3, [r7, #28]
                          |DCMI_VSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4821      	ldr	r0, [pc, #132]	; (8000c38 <HAL_DCMI_MspInit+0x168>)
 8000bb2:	f004 f8eb 	bl	8004d8c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <HAL_DCMI_MspInit+0x170>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bbe:	225b      	movs	r2, #91	; 0x5b
 8000bc0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bda:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000bf4:	f003 fdf8 	bl	80047e8 <HAL_DMA_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 8000bfe:	f7ff ff3e 	bl	8000a7e <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000c06:	651a      	str	r2, [r3, #80]	; 0x50
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_DCMI_MspInit+0x16c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2055      	movs	r0, #85	; 0x55
 8000c14:	f003 f9b7 	bl	8003f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8000c18:	2055      	movs	r0, #85	; 0x55
 8000c1a:	f003 f9d0 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	50050000 	.word	0x50050000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48001000 	.word	0x48001000
 8000c34:	48001c00 	.word	0x48001c00
 8000c38:	48002000 	.word	0x48002000
 8000c3c:	20000180 	.word	0x20000180
 8000c40:	4002046c 	.word	0x4002046c

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0b2      	sub	sp, #200	; 0xc8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	2298      	movs	r2, #152	; 0x98
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 fb6b 	bl	8008340 <memset>
  if(hi2c->Instance==I2C1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <HAL_I2C_MspInit+0x15c>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13b      	bne.n	8000cec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4618      	mov	r0, r3
 8000c82:	f006 fa69 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff fef7 	bl	8000a7e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	4a43      	ldr	r2, [pc, #268]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ca8:	23c0      	movs	r3, #192	; 0xc0
 8000caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4836      	ldr	r0, [pc, #216]	; (8000da8 <HAL_I2C_MspInit+0x164>)
 8000cce:	f004 f85d 	bl	8004d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a33      	ldr	r2, [pc, #204]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_RELEASE_RESET();
    hi2c->State = HAL_I2C_STATE_RESET;
  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000cea:	e054      	b.n	8000d96 <HAL_I2C_MspInit+0x152>
  else if(hi2c->Instance==I2C4)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <HAL_I2C_MspInit+0x168>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d14f      	bne.n	8000d96 <HAL_I2C_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000cf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fa27 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000d10:	f7ff feb5 	bl	8000a7e <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000d2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <HAL_I2C_MspInit+0x16c>)
 8000d54:	f004 f81a 	bl	8004d8c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5c:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_I2C4_FORCE_RESET();
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_Delay(2);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f002 ffdf 	bl	8003d40 <HAL_Delay>
    __HAL_RCC_I2C4_RELEASE_RESET();
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_I2C_MspInit+0x160>)
 8000d88:	f023 0302 	bic.w	r3, r3, #2
 8000d8c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_RESET;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000d96:	bf00      	nop
 8000d98:	37c8      	adds	r7, #200	; 0xc8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000400 	.word	0x48000400
 8000dac:	40008400 	.word	0x40008400
 8000db0:	48001400 	.word	0x48001400

08000db4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <HAL_I2C_MspDeInit+0x64>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10e      	bne.n	8000de4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_I2C_MspDeInit+0x68>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_I2C_MspDeInit+0x68>)
 8000dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000dd0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000dd2:	2140      	movs	r1, #64	; 0x40
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <HAL_I2C_MspDeInit+0x6c>)
 8000dd6:	f004 f96b 	bl	80050b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <HAL_I2C_MspDeInit+0x6c>)
 8000dde:	f004 f967 	bl	80050b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8000de2:	e014      	b.n	8000e0e <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C4)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_I2C_MspDeInit+0x70>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10f      	bne.n	8000e0e <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_I2C_MspDeInit+0x68>)
 8000df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_I2C_MspDeInit+0x68>)
 8000df4:	f023 0302 	bic.w	r3, r3, #2
 8000df8:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(I2C4_SDA_GPIO_Port, I2C4_SDA_Pin);
 8000dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <HAL_I2C_MspDeInit+0x74>)
 8000e00:	f004 f956 	bl	80050b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C4_SCL_GPIO_Port, I2C4_SCL_Pin);
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <HAL_I2C_MspDeInit+0x74>)
 8000e0a:	f004 f951 	bl	80050b0 <HAL_GPIO_DeInit>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	40008400 	.word	0x40008400
 8000e28:	48001400 	.word	0x48001400

08000e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_SPI_MspInit+0x7c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d128      	bne.n	8000ea0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_SPI_MspInit+0x80>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_SPI_MspInit+0x80>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_SPI_MspInit+0x80>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_SPI_MspInit+0x80>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_SPI_MspInit+0x80>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_SPI_MspInit+0x80>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin|SPI2_CLK_Pin;
 8000e7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e90:	2305      	movs	r3, #5
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_SPI_MspInit+0x84>)
 8000e9c:	f003 ff76 	bl	8004d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40003800 	.word	0x40003800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f002 fefe 	bl	8003d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <DMA1_Channel1_IRQHandler+0x10>)
 8000f0e:	f003 fded 	bl	8004aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002ec 	.word	0x200002ec

08000f1c <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA2_Channel6_IRQHandler+0x10>)
 8000f22:	f003 fde3 	bl	8004aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000180 	.word	0x20000180

08000f30 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <DCMI_PSSI_IRQHandler+0x10>)
 8000f36:	f003 f9c3 	bl	80042c0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000011c 	.word	0x2000011c

08000f44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e00a      	b.n	8000f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f56:	f3af 8000 	nop.w
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf0      	blt.n	8000f56 <_read+0x12>
  }

  return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e009      	b.n	8000fa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf1      	blt.n	8000f90 <_write+0x12>
  }
  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_close>:

int _close(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_isatty>:

int _isatty(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f007 f94c 	bl	80082ec <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20050000 	.word	0x20050000
 8001080:	00000400 	.word	0x00000400
 8001084:	20009954 	.word	0x20009954
 8001088:	20009af0 	.word	0x20009af0

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff ffea 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f007 f90b 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff f8dd 	bl	80002a0 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80010f4:	080098a8 	.word	0x080098a8
  ldr r2, =_sbss
 80010f8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80010fc:	20009af0 	.word	0x20009af0

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>
	...

08001104 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <ST7735_Select+0x14>)
 800110e:	f004 f8c1 	bl	8005294 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	48002000 	.word	0x48002000

0800111c <ST7735_Unselect>:

static void ST7735_Unselect() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2101      	movs	r1, #1
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <ST7735_Unselect+0x14>)
 8001126:	f004 f8b5 	bl	8005294 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	48002000 	.word	0x48002000

08001134 <ST7735_Reset>:

static void ST7735_Reset() {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2104      	movs	r1, #4
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <ST7735_Reset+0x24>)
 800113e:	f004 f8a9 	bl	8005294 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001142:	2005      	movs	r0, #5
 8001144:	f002 fdfc 	bl	8003d40 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2104      	movs	r1, #4
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <ST7735_Reset+0x24>)
 800114e:	f004 f8a1 	bl	8005294 <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	48002000 	.word	0x48002000

0800115c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <ST7735_WriteCommand+0x2c>)
 800116c:	f004 f892 	bl	8005294 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001170:	1df9      	adds	r1, r7, #7
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	2201      	movs	r2, #1
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <ST7735_WriteCommand+0x30>)
 800117a:	f006 fde4 	bl	8007d46 <HAL_SPI_Transmit>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000c00 	.word	0x48000c00
 800118c:	20000288 	.word	0x20000288

08001190 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <ST7735_WriteData+0x2c>)
 80011a0:	f004 f878 	bl	8005294 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <ST7735_WriteData+0x30>)
 80011b0:	f006 fdc9 	bl	8007d46 <HAL_SPI_Transmit>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	20000288 	.word	0x20000288

080011c4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80011d6:	e034      	b.n	8001242 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffb9 	bl	800115c <ST7735_WriteCommand>

        numArgs = *addr++;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80011f4:	7abb      	ldrb	r3, [r7, #10]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80011fe:	7abb      	ldrb	r3, [r7, #10]
 8001200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001204:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001206:	7abb      	ldrb	r3, [r7, #10]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800120c:	7abb      	ldrb	r3, [r7, #10]
 800120e:	4619      	mov	r1, r3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffbd 	bl	8001190 <ST7735_WriteData>
            addr += numArgs;
 8001216:	7abb      	ldrb	r3, [r7, #10]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800121e:	89bb      	ldrh	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00e      	beq.n	8001242 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800122e:	89bb      	ldrh	r3, [r7, #12]
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d102      	bne.n	800123a <ST7735_ExecuteCommandList+0x76>
 8001234:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001238:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800123a:	89bb      	ldrh	r3, [r7, #12]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fd7f 	bl	8003d40 <HAL_Delay>
    while(numCommands--) {
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	73fa      	strb	r2, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1c5      	bne.n	80011d8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001256:	b590      	push	{r4, r7, lr}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	4604      	mov	r4, r0
 800125e:	4608      	mov	r0, r1
 8001260:	4611      	mov	r1, r2
 8001262:	461a      	mov	r2, r3
 8001264:	4623      	mov	r3, r4
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4603      	mov	r3, r0
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	460b      	mov	r3, r1
 800126e:	717b      	strb	r3, [r7, #5]
 8001270:	4613      	mov	r3, r2
 8001272:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001274:	202a      	movs	r0, #42	; 0x2a
 8001276:	f7ff ff71 	bl	800115c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800127a:	2300      	movs	r3, #0
 800127c:	733b      	strb	r3, [r7, #12]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	2300      	movs	r3, #0
 8001284:	73bb      	strb	r3, [r7, #14]
 8001286:	797b      	ldrb	r3, [r7, #5]
 8001288:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2104      	movs	r1, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff7d 	bl	8001190 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001296:	202b      	movs	r0, #43	; 0x2b
 8001298:	f7ff ff60 	bl	800115c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2104      	movs	r1, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff70 	bl	8001190 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80012b0:	202c      	movs	r0, #44	; 0x2c
 80012b2:	f7ff ff53 	bl	800115c <ST7735_WriteCommand>
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
	...

080012c0 <ST7735_Init>:

void ST7735_Init() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80012c4:	f7ff ff1e 	bl	8001104 <ST7735_Select>
    HAL_Delay(2);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f002 fd39 	bl	8003d40 <HAL_Delay>
    ST7735_Reset();
 80012ce:	f7ff ff31 	bl	8001134 <ST7735_Reset>
    HAL_Delay(2);
 80012d2:	2002      	movs	r0, #2
 80012d4:	f002 fd34 	bl	8003d40 <HAL_Delay>
    ST7735_ExecuteCommandList(init_cmds1);
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <ST7735_Init+0x38>)
 80012da:	f7ff ff73 	bl	80011c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <ST7735_Init+0x3c>)
 80012e0:	f7ff ff70 	bl	80011c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <ST7735_Init+0x40>)
 80012e6:	f7ff ff6d 	bl	80011c4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80012ea:	f7ff ff17 	bl	800111c <ST7735_Unselect>
    HAL_Delay(2);
 80012ee:	2002      	movs	r0, #2
 80012f0:	f002 fd26 	bl	8003d40 <HAL_Delay>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	080092e4 	.word	0x080092e4
 80012fc:	08009320 	.word	0x08009320
 8001300:	08009330 	.word	0x08009330

08001304 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b9f      	cmp	r3, #159	; 0x9f
 800131a:	d823      	bhi.n	8001364 <ST7735_DrawPixel+0x60>
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	2b7f      	cmp	r3, #127	; 0x7f
 8001320:	d820      	bhi.n	8001364 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8001322:	f7ff feef 	bl	8001104 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2d8      	uxtb	r0, r3
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	b2d9      	uxtb	r1, r3
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3301      	adds	r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f7ff ff8a 	bl	8001256 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b29b      	uxth	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	733b      	strb	r3, [r7, #12]
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2102      	movs	r1, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff19 	bl	8001190 <ST7735_WriteData>

    ST7735_Unselect();
 800135e:	f7ff fedd 	bl	800111c <ST7735_Unselect>
 8001362:	e000      	b.n	8001366 <ST7735_DrawPixel+0x62>
        return;
 8001364:	bf00      	nop
}
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4623      	mov	r3, r4
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	4603      	mov	r3, r0
 8001380:	80bb      	strh	r3, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	2b9f      	cmp	r3, #159	; 0x9f
 800138e:	d857      	bhi.n	8001440 <ST7735_FillRectangle+0xd4>
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	2b7f      	cmp	r3, #127	; 0x7f
 8001394:	d854      	bhi.n	8001440 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	4413      	add	r3, r2
 800139c:	2ba0      	cmp	r3, #160	; 0xa0
 800139e:	dd03      	ble.n	80013a8 <ST7735_FillRectangle+0x3c>
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80013a6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80013a8:	88ba      	ldrh	r2, [r7, #4]
 80013aa:	883b      	ldrh	r3, [r7, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	2b80      	cmp	r3, #128	; 0x80
 80013b0:	dd03      	ble.n	80013ba <ST7735_FillRectangle+0x4e>
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80013b8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80013ba:	f7ff fea3 	bl	8001104 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	b2d8      	uxtb	r0, r3
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	b2d9      	uxtb	r1, r3
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b2dc      	uxtb	r4, r3
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	883b      	ldrh	r3, [r7, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4622      	mov	r2, r4
 80013e8:	f7ff ff35 	bl	8001256 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80013ec:	8c3b      	ldrh	r3, [r7, #32]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	8c3b      	ldrh	r3, [r7, #32]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2102      	movs	r1, #2
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <ST7735_FillRectangle+0xdc>)
 8001402:	f003 ff47 	bl	8005294 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001406:	883b      	ldrh	r3, [r7, #0]
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	e013      	b.n	8001434 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	e00a      	b.n	8001428 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001412:	f107 010c 	add.w	r1, r7, #12
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	2202      	movs	r2, #2
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <ST7735_FillRectangle+0xe0>)
 800141e:	f006 fc92 	bl	8007d46 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	3b01      	subs	r3, #1
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f1      	bne.n	8001412 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	3b01      	subs	r3, #1
 8001432:	80bb      	strh	r3, [r7, #4]
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1e8      	bne.n	800140c <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800143a:	f7ff fe6f 	bl	800111c <ST7735_Unselect>
 800143e:	e000      	b.n	8001442 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001440:	bf00      	nop
}
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	48000c00 	.word	0x48000c00
 800144c:	20000288 	.word	0x20000288

08001450 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	22a0      	movs	r2, #160	; 0xa0
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff ff81 	bl	800136c <ST7735_FillRectangle>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 ffd1 	bl	8002428 <mfxstm32l152_GetInstance>
 8001486:	4603      	mov	r3, r0
 8001488:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2bff      	cmp	r3, #255	; 0xff
 800148e:	d10e      	bne.n	80014ae <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 ffc9 	bl	8002428 <mfxstm32l152_GetInstance>
 8001496:	4603      	mov	r3, r0
 8001498:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d806      	bhi.n	80014ae <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	88fa      	ldrh	r2, [r7, #6]
 80014a4:	b2d1      	uxtb	r1, r2
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <mfxstm32l152_Init+0x58>)
 80014a8:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 80014aa:	f002 f875 	bl	8003598 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2102      	movs	r1, #2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f8db 	bl	800166e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	2101      	movs	r1, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f8fc 	bl	80016ba <mfxstm32l152_SetIrqOutPinType>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20009958 	.word	0x20009958

080014d0 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 ffc3 	bl	8002468 <mfxstm32l152_ReleaseInstance>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d001      	beq.n	80014f0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80014ec:	f002 f864 	bl	80035b8 <MFX_IO_DeInit>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	4618      	mov	r0, r3
 800150a:	f002 f8f5 	bl	80036f8 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f002 f934 	bl	800377c <MFX_IO_Delay>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	4618      	mov	r0, r3
 800152e:	f002 f8e3 	bl	80036f8 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8001532:	f002 f8a9 	bl	8003688 <MFX_IO_EnableWakeupPin>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 ff6c 	bl	8002428 <mfxstm32l152_GetInstance>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2bff      	cmp	r3, #255	; 0xff
 8001558:	d101      	bne.n	800155e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800155a:	f002 f895 	bl	8003688 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800155e:	f002 f8b7 	bl	80036d0 <MFX_IO_Wakeup>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f002 f901 	bl	800377c <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800157a:	f002 f80d 	bl	8003598 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f002 f8cc 	bl	8003720 <MFX_IO_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	b29b      	uxth	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	4613      	mov	r3, r2
 80015a6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	2142      	movs	r1, #66	; 0x42
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 f8b5 	bl	8003720 <MFX_IO_Read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	797b      	ldrb	r3, [r7, #5]
 80015be:	4313      	orrs	r3, r2
 80015c0:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2142      	movs	r1, #66	; 0x42
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 f895 	bl	80036f8 <MFX_IO_Write>
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	460a      	mov	r2, r1
 80015e0:	80fb      	strh	r3, [r7, #6]
 80015e2:	4613      	mov	r3, r2
 80015e4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	2142      	movs	r1, #66	; 0x42
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 f896 	bl	8003720 <MFX_IO_Read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80015f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001604:	4013      	ands	r3, r2
 8001606:	b25b      	sxtb	r3, r3
 8001608:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	2142      	movs	r1, #66	; 0x42
 8001610:	4618      	mov	r0, r3
 8001612:	f002 f871 	bl	80036f8 <MFX_IO_Write>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	460a      	mov	r2, r1
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	4613      	mov	r3, r2
 800162c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2108      	movs	r1, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f874 	bl	8003720 <MFX_IO_Read>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	797b      	ldrb	r3, [r7, #5]
 800163e:	4013      	ands	r3, r2
 8001640:	b2db      	uxtb	r3, r3
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	460a      	mov	r2, r1
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4613      	mov	r3, r2
 8001658:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 800165a:	797a      	ldrb	r2, [r7, #5]
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	2144      	movs	r1, #68	; 0x44
 8001660:	4618      	mov	r0, r3
 8001662:	f002 f849 	bl	80036f8 <MFX_IO_Write>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	460a      	mov	r2, r1
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	4613      	mov	r3, r2
 800167c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	2141      	movs	r1, #65	; 0x41
 8001686:	4618      	mov	r0, r3
 8001688:	f002 f84a 	bl	8003720 <MFX_IO_Read>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f023 0302 	bic.w	r3, r3, #2
 8001696:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	797b      	ldrb	r3, [r7, #5]
 800169c:	4313      	orrs	r3, r2
 800169e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2141      	movs	r1, #65	; 0x41
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f826 	bl	80036f8 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f002 f865 	bl	800377c <MFX_IO_Delay>

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	460a      	mov	r2, r1
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	4613      	mov	r3, r2
 80016c8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2141      	movs	r1, #65	; 0x41
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 f824 	bl	8003720 <MFX_IO_Read>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	797b      	ldrb	r3, [r7, #5]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2141      	movs	r1, #65	; 0x41
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 f800 	bl	80036f8 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f002 f83f 	bl	800377c <MFX_IO_Delay>

}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	6039      	str	r1, [r7, #0]
 8001710:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	2140      	movs	r1, #64	; 0x40
 8001716:	4618      	mov	r0, r3
 8001718:	f002 f802 	bl	8003720 <MFX_IO_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172e:	d304      	bcc.n	800173a <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e003      	b.n	8001742 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	f023 0308 	bic.w	r3, r3, #8
 8001740:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	2140      	movs	r1, #64	; 0x40
 8001748:	4618      	mov	r0, r3
 800174a:	f001 ffd5 	bl	80036f8 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f002 f814 	bl	800377c <MFX_IO_Delay>
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	4613      	mov	r3, r2
 800176a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8001770:	797b      	ldrb	r3, [r7, #5]
 8001772:	2b17      	cmp	r3, #23
 8001774:	f200 82d4 	bhi.w	8001d20 <mfxstm32l152_IO_Config+0x5c4>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <mfxstm32l152_IO_Config+0x24>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001811 	.word	0x08001811
 8001784:	080018a1 	.word	0x080018a1
 8001788:	08001961 	.word	0x08001961
 800178c:	08001a51 	.word	0x08001a51
 8001790:	08001b41 	.word	0x08001b41
 8001794:	08001c31 	.word	0x08001c31
 8001798:	080017e1 	.word	0x080017e1
 800179c:	080017e1 	.word	0x080017e1
 80017a0:	08001841 	.word	0x08001841
 80017a4:	08001871 	.word	0x08001871
 80017a8:	08001d21 	.word	0x08001d21
 80017ac:	08001931 	.word	0x08001931
 80017b0:	08001901 	.word	0x08001901
 80017b4:	08001d21 	.word	0x08001d21
 80017b8:	080018d1 	.word	0x080018d1
 80017bc:	080018a1 	.word	0x080018a1
 80017c0:	080019b1 	.word	0x080019b1
 80017c4:	08001a01 	.word	0x08001a01
 80017c8:	08001aa1 	.word	0x08001aa1
 80017cc:	08001af1 	.word	0x08001af1
 80017d0:	08001b91 	.word	0x08001b91
 80017d4:	08001be1 	.word	0x08001be1
 80017d8:	08001c81 	.word	0x08001c81
 80017dc:	08001cd1 	.word	0x08001cd1
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	6839      	ldr	r1, [r7, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fb67 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2200      	movs	r2, #0
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fa9d 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80017f6:	88f8      	ldrh	r0, [r7, #6]
 80017f8:	2300      	movs	r3, #0
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	2164      	movs	r1, #100	; 0x64
 80017fe:	f000 fe57 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001802:	88f8      	ldrh	r0, [r7, #6]
 8001804:	2300      	movs	r3, #0
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	2168      	movs	r1, #104	; 0x68
 800180a:	f000 fe51 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 800180e:	e28a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fb4f 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	2200      	movs	r2, #0
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fa85 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001826:	88f8      	ldrh	r0, [r7, #6]
 8001828:	2300      	movs	r3, #0
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	2164      	movs	r1, #100	; 0x64
 800182e:	f000 fe3f 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001832:	88f8      	ldrh	r0, [r7, #6]
 8001834:	2301      	movs	r3, #1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	2168      	movs	r1, #104	; 0x68
 800183a:	f000 fe39 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 800183e:	e272      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fb37 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2200      	movs	r2, #0
 800184e:	6839      	ldr	r1, [r7, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fa6d 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001856:	88f8      	ldrh	r0, [r7, #6]
 8001858:	2301      	movs	r3, #1
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	2164      	movs	r1, #100	; 0x64
 800185e:	f000 fe27 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001862:	88f8      	ldrh	r0, [r7, #6]
 8001864:	2301      	movs	r3, #1
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	2168      	movs	r1, #104	; 0x68
 800186a:	f000 fe21 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 800186e:	e25a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fb1f 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	2200      	movs	r2, #0
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fa55 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001886:	88f8      	ldrh	r0, [r7, #6]
 8001888:	2301      	movs	r3, #1
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	2164      	movs	r1, #100	; 0x64
 800188e:	f000 fe0f 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001892:	88f8      	ldrh	r0, [r7, #6]
 8001894:	2300      	movs	r3, #0
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	2168      	movs	r1, #104	; 0x68
 800189a:	f000 fe09 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 800189e:	e242      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fb07 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2201      	movs	r2, #1
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fa3d 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80018b6:	88f8      	ldrh	r0, [r7, #6]
 80018b8:	2300      	movs	r3, #0
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	2164      	movs	r1, #100	; 0x64
 80018be:	f000 fdf7 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80018c2:	88f8      	ldrh	r0, [r7, #6]
 80018c4:	2300      	movs	r3, #0
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	2168      	movs	r1, #104	; 0x68
 80018ca:	f000 fdf1 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 80018ce:	e22a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 faef 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2201      	movs	r2, #1
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fa25 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80018e6:	88f8      	ldrh	r0, [r7, #6]
 80018e8:	2300      	movs	r3, #0
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	2164      	movs	r1, #100	; 0x64
 80018ee:	f000 fddf 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80018f2:	88f8      	ldrh	r0, [r7, #6]
 80018f4:	2301      	movs	r3, #1
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	2168      	movs	r1, #104	; 0x68
 80018fa:	f000 fdd9 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 80018fe:	e212      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fad7 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2201      	movs	r2, #1
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fa0d 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001916:	88f8      	ldrh	r0, [r7, #6]
 8001918:	2301      	movs	r3, #1
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	2164      	movs	r1, #100	; 0x64
 800191e:	f000 fdc7 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001922:	88f8      	ldrh	r0, [r7, #6]
 8001924:	2300      	movs	r3, #0
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	2168      	movs	r1, #104	; 0x68
 800192a:	f000 fdc1 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 800192e:	e1fa      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	6839      	ldr	r1, [r7, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fabf 	bl	8001eb8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	2201      	movs	r2, #1
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f9f5 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001946:	88f8      	ldrh	r0, [r7, #6]
 8001948:	2301      	movs	r3, #1
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	2164      	movs	r1, #100	; 0x64
 800194e:	f000 fdaf 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001952:	88f8      	ldrh	r0, [r7, #6]
 8001954:	2301      	movs	r3, #1
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	2168      	movs	r1, #104	; 0x68
 800195a:	f000 fda9 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    break;
 800195e:	e1e2      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fa7a 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2200      	movs	r2, #0
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f9de 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001974:	88f8      	ldrh	r0, [r7, #6]
 8001976:	2300      	movs	r3, #0
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	2164      	movs	r1, #100	; 0x64
 800197c:	f000 fd98 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001980:	88f8      	ldrh	r0, [r7, #6]
 8001982:	2301      	movs	r3, #1
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	2168      	movs	r1, #104	; 0x68
 8001988:	f000 fd92 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	2201      	movs	r2, #1
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f9de 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	2201      	movs	r2, #1
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f9ed 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fa75 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 80019ae:	e1ba      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fa52 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	2200      	movs	r2, #0
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f9b6 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80019c4:	88f8      	ldrh	r0, [r7, #6]
 80019c6:	2301      	movs	r3, #1
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	2164      	movs	r1, #100	; 0x64
 80019cc:	f000 fd70 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	2301      	movs	r3, #1
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	2168      	movs	r1, #104	; 0x68
 80019d8:	f000 fd6a 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2201      	movs	r2, #1
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f9b6 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	2201      	movs	r2, #1
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f9c5 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6839      	ldr	r1, [r7, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fa4d 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 80019fe:	e192      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fa2a 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f98e 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001a14:	88f8      	ldrh	r0, [r7, #6]
 8001a16:	2301      	movs	r3, #1
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	2164      	movs	r1, #100	; 0x64
 8001a1c:	f000 fd48 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001a20:	88f8      	ldrh	r0, [r7, #6]
 8001a22:	2300      	movs	r3, #0
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	2168      	movs	r1, #104	; 0x68
 8001a28:	f000 fd42 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f98e 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f99d 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fa25 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001a4e:	e16a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fa02 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f966 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001a64:	88f8      	ldrh	r0, [r7, #6]
 8001a66:	2300      	movs	r3, #0
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	2164      	movs	r1, #100	; 0x64
 8001a6c:	f000 fd20 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001a70:	88f8      	ldrh	r0, [r7, #6]
 8001a72:	2301      	movs	r3, #1
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	2168      	movs	r1, #104	; 0x68
 8001a78:	f000 fd1a 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f966 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f975 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f9fd 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001a9e:	e142      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f9da 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f93e 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001ab4:	88f8      	ldrh	r0, [r7, #6]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	2164      	movs	r1, #100	; 0x64
 8001abc:	f000 fcf8 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001ac0:	88f8      	ldrh	r0, [r7, #6]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	2168      	movs	r1, #104	; 0x68
 8001ac8:	f000 fcf2 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f93e 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	2200      	movs	r2, #0
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f94d 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f9d5 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001aee:	e11a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f9b2 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2200      	movs	r2, #0
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f916 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001b04:	88f8      	ldrh	r0, [r7, #6]
 8001b06:	2301      	movs	r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	2164      	movs	r1, #100	; 0x64
 8001b0c:	f000 fcd0 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001b10:	88f8      	ldrh	r0, [r7, #6]
 8001b12:	2300      	movs	r3, #0
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	2168      	movs	r1, #104	; 0x68
 8001b18:	f000 fcca 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f916 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f925 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f9ad 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001b3e:	e0f2      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f98a 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8ee 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001b54:	88f8      	ldrh	r0, [r7, #6]
 8001b56:	2300      	movs	r3, #0
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	2164      	movs	r1, #100	; 0x64
 8001b5c:	f000 fca8 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001b60:	88f8      	ldrh	r0, [r7, #6]
 8001b62:	2301      	movs	r3, #1
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	2168      	movs	r1, #104	; 0x68
 8001b68:	f000 fca2 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f8ee 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f8fd 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f985 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001b8e:	e0ca      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f962 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f8c6 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001ba4:	88f8      	ldrh	r0, [r7, #6]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	2164      	movs	r1, #100	; 0x64
 8001bac:	f000 fc80 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001bb0:	88f8      	ldrh	r0, [r7, #6]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	2168      	movs	r1, #104	; 0x68
 8001bb8:	f000 fc7a 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f8c6 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f8d5 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f95d 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001bde:	e0a2      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f93a 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2200      	movs	r2, #0
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f89e 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001bf4:	88f8      	ldrh	r0, [r7, #6]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	2164      	movs	r1, #100	; 0x64
 8001bfc:	f000 fc58 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001c00:	88f8      	ldrh	r0, [r7, #6]
 8001c02:	2300      	movs	r3, #0
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	2168      	movs	r1, #104	; 0x68
 8001c08:	f000 fc52 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f89e 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f8ad 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f935 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001c2e:	e07a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f912 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f876 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001c44:	88f8      	ldrh	r0, [r7, #6]
 8001c46:	2300      	movs	r3, #0
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	2164      	movs	r1, #100	; 0x64
 8001c4c:	f000 fc30 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001c50:	88f8      	ldrh	r0, [r7, #6]
 8001c52:	2301      	movs	r3, #1
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	2168      	movs	r1, #104	; 0x68
 8001c58:	f000 fc2a 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f876 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f885 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f90d 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001c7e:	e052      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f8ea 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f84e 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001c94:	88f8      	ldrh	r0, [r7, #6]
 8001c96:	2301      	movs	r3, #1
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	2164      	movs	r1, #100	; 0x64
 8001c9c:	f000 fc08 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001ca0:	88f8      	ldrh	r0, [r7, #6]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	2168      	movs	r1, #104	; 0x68
 8001ca8:	f000 fc02 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f84e 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f85d 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f8e5 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001cce:	e02a      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f8c2 	bl	8001e5c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f826 	bl	8001d30 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001ce4:	88f8      	ldrh	r0, [r7, #6]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	2164      	movs	r1, #100	; 0x64
 8001cec:	f000 fbe0 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001cf0:	88f8      	ldrh	r0, [r7, #6]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	2168      	movs	r1, #104	; 0x68
 8001cf8:	f000 fbda 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	6839      	ldr	r1, [r7, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f826 	bl	8001d54 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f835 	bl	8001d7e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f8bd 	bl	8001e98 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001d1e:	e002      	b.n	8001d26 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8001d20:	797b      	ldrb	r3, [r7, #5]
 8001d22:	73fb      	strb	r3, [r7, #15]
    break;
 8001d24:	bf00      	nop
  }

  return error_code;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001d40:	797b      	ldrb	r3, [r7, #5]
 8001d42:	88f8      	ldrh	r0, [r7, #6]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	2160      	movs	r1, #96	; 0x60
 8001d48:	f000 fbb2 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	80fb      	strh	r3, [r7, #6]
 8001d60:	4613      	mov	r3, r2
 8001d62:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001d64:	797b      	ldrb	r3, [r7, #5]
 8001d66:	88f8      	ldrh	r0, [r7, #6]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	214c      	movs	r1, #76	; 0x4c
 8001d6c:	f000 fba0 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f001 fd03 	bl	800377c <MFX_IO_Delay>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	6039      	str	r1, [r7, #0]
 8001d88:	80fb      	strh	r3, [r7, #6]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	88f8      	ldrh	r0, [r7, #6]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	2150      	movs	r1, #80	; 0x50
 8001d96:	f000 fb8b 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f001 fcee 	bl	800377c <MFX_IO_Delay>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	4613      	mov	r3, r2
 8001db6:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001db8:	797b      	ldrb	r3, [r7, #5]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8001dbe:	88f8      	ldrh	r0, [r7, #6]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	216c      	movs	r1, #108	; 0x6c
 8001dc6:	f000 fb73 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8001dca:	e005      	b.n	8001dd8 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8001dcc:	88f8      	ldrh	r0, [r7, #6]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	2170      	movs	r1, #112	; 0x70
 8001dd4:	f000 fb6c 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	2110      	movs	r1, #16
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fc8b 	bl	8003720 <MFX_IO_Read>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	2111      	movs	r1, #17
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 fc7f 	bl	8003720 <MFX_IO_Read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	2112      	movs	r1, #18
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fc73 	bl	8003720 <MFX_IO_Read>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	021a      	lsls	r2, r3, #8
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	441a      	add	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4013      	ands	r3, r2
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001e66:	f001 fbe3 	bl	8003630 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fb92 	bl	8001598 <mfxstm32l152_EnableITSource>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fba3 	bl	80015d6 <mfxstm32l152_DisableITSource>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001ea4:	88f8      	ldrh	r0, [r7, #6]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	2148      	movs	r1, #72	; 0x48
 8001eac:	f000 fb00 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001ec4:	88f8      	ldrh	r0, [r7, #6]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	2148      	movs	r1, #72	; 0x48
 8001ecc:	f000 faf0 	bl	80024b0 <mfxstm32l152_reg24_setPinValue>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	210c      	movs	r1, #12
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 fc0f 	bl	8003720 <MFX_IO_Read>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	210d      	movs	r1, #13
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 fc01 	bl	8003720 <MFX_IO_Read>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	210e      	movs	r1, #14
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 fbf5 	bl	8003720 <MFX_IO_Read>
 8001f36:	4603      	mov	r3, r0
 8001f38:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	89bb      	ldrh	r3, [r7, #12]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4413      	add	r3, r2
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	4413      	add	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	4013      	ands	r3, r2
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	6039      	str	r1, [r7, #0]
 8001f64:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	0c1b      	lsrs	r3, r3, #16
 8001f74:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2154      	movs	r1, #84	; 0x54
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fbb8 	bl	80036f8 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8001f8e:	7bba      	ldrb	r2, [r7, #14]
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	2155      	movs	r1, #85	; 0x55
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fbaf 	bl	80036f8 <MFX_IO_Write>
  }
  if (pin_16_23)
 8001f9a:	7b7b      	ldrb	r3, [r7, #13]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001fa0:	7b7a      	ldrb	r2, [r7, #13]
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2156      	movs	r1, #86	; 0x56
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 fba6 	bl	80036f8 <MFX_IO_Write>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fba8 	bl	8003720 <MFX_IO_Read>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fb86 	bl	80036f8 <MFX_IO_Write>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	b590      	push	{r4, r7, lr}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002006:	4623      	mov	r3, r4
 8002008:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	2140      	movs	r1, #64	; 0x40
 800201a:	4618      	mov	r0, r3
 800201c:	f001 fb80 	bl	8003720 <MFX_IO_Read>
 8002020:	4603      	mov	r3, r0
 8002022:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 800202e:	7bbb      	ldrb	r3, [r7, #14]
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	b29b      	uxth	r3, r3
 800203c:	7bba      	ldrb	r2, [r7, #14]
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	4618      	mov	r0, r3
 8002042:	f001 fb59 	bl	80036f8 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8002046:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 030e 	and.w	r3, r3, #14
 8002052:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8002054:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	b25a      	sxtb	r2, r3
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	4313      	orrs	r3, r2
 8002066:	b25b      	sxtb	r3, r3
 8002068:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800206a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002074:	b25a      	sxtb	r2, r3
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fb34 	bl	80036f8 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8002090:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002094:	b25b      	sxtb	r3, r3
 8002096:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800209a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800209c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020a6:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	2181      	movs	r1, #129	; 0x81
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fb1d 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 80020be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	2182      	movs	r1, #130	; 0x82
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fb11 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 80020d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	2183      	movs	r1, #131	; 0x83
 80020e4:	4618      	mov	r0, r3
 80020e6:	f001 fb07 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80020ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	2184      	movs	r1, #132	; 0x84
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 fafb 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8002102:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002104:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	b29b      	uxth	r3, r3
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	2185      	movs	r1, #133	; 0x85
 8002110:	4618      	mov	r0, r3
 8002112:	f001 faf1 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8002116:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	b29b      	uxth	r3, r3
 800211c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	b29b      	uxth	r3, r3
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	2186      	movs	r1, #134	; 0x86
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fae5 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 800212e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002130:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	b29b      	uxth	r3, r3
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	2187      	movs	r1, #135	; 0x87
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fadb 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8002142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	b29b      	uxth	r3, r3
 8002148:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	b29b      	uxth	r3, r3
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	2188      	movs	r1, #136	; 0x88
 8002154:	4618      	mov	r0, r3
 8002156:	f001 facf 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800215a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800215c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	b29b      	uxth	r3, r3
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	2189      	movs	r1, #137	; 0x89
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fac5 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800216e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	b29b      	uxth	r3, r3
 8002174:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	b29b      	uxth	r3, r3
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	218a      	movs	r1, #138	; 0x8a
 8002180:	4618      	mov	r0, r3
 8002182:	f001 fab9 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8002186:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002188:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	b29b      	uxth	r3, r3
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	218b      	movs	r1, #139	; 0x8b
 8002194:	4618      	mov	r0, r3
 8002196:	f001 faaf 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800219a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800219c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	2190      	movs	r1, #144	; 0x90
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 faa5 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 80021ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80021b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	2191      	movs	r1, #145	; 0x91
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fa9b 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 80021c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	2192      	movs	r1, #146	; 0x92
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fa91 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 80021d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80021d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	2193      	movs	r1, #147	; 0x93
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fa87 	bl	80036f8 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80021ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80021ec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	2194      	movs	r1, #148	; 0x94
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fa7d 	bl	80036f8 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80021fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29b      	uxth	r3, r3
 8002204:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	218c      	movs	r1, #140	; 0x8c
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fa71 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8002216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002218:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	218d      	movs	r1, #141	; 0x8d
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fa67 	bl	80036f8 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 800222a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	b29b      	uxth	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	218e      	movs	r1, #142	; 0x8e
 800223c:	4618      	mov	r0, r3
 800223e:	f001 fa5b 	bl	80036f8 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8002242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002244:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	b29b      	uxth	r3, r3
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	218f      	movs	r1, #143	; 0x8f
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fa51 	bl	80036f8 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8002256:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800225a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	b29b      	uxth	r3, r3
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	2196      	movs	r1, #150	; 0x96
 8002266:	4618      	mov	r0, r3
 8002268:	f001 fa46 	bl	80036f8 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800226c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002270:	b25b      	sxtb	r3, r3
 8002272:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002276:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8002278:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800227c:	b25b      	sxtb	r3, r3
 800227e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002282:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8002284:	4313      	orrs	r3, r2
 8002286:	b25b      	sxtb	r3, r3
 8002288:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	2197      	movs	r1, #151	; 0x97
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fa2f 	bl	80036f8 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800229a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800229e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	2198      	movs	r1, #152	; 0x98
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 fa24 	bl	80036f8 <MFX_IO_Write>
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80022ba:	b004      	add	sp, #16
 80022bc:	4770      	bx	lr

080022be <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	6039      	str	r1, [r7, #0]
 80022c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	b298      	uxth	r0, r3
 80022d0:	f107 020c 	add.w	r2, r7, #12
 80022d4:	2303      	movs	r3, #3
 80022d6:	2114      	movs	r1, #20
 80022d8:	f001 fa36 	bl	8003748 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 80022dc:	7b3b      	ldrb	r3, [r7, #12]
 80022de:	041a      	lsls	r2, r3, #16
 80022e0:	7b7b      	ldrb	r3, [r7, #13]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4313      	orrs	r3, r2
 80022e6:	7bba      	ldrb	r2, [r7, #14]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	601a      	str	r2, [r3, #0]

}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8002302:	f001 f995 	bl	8003630 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	2102      	movs	r1, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f944 	bl	8001598 <mfxstm32l152_EnableITSource>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f98f 	bl	800164a <mfxstm32l152_ClearGlobalIT>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f96b 	bl	800161e <mfxstm32l152_GlobalITStatus>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f938 	bl	80015d6 <mfxstm32l152_DisableITSource>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	b29b      	uxth	r3, r3
 800237e:	2103      	movs	r1, #3
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f9cd 	bl	8003720 <MFX_IO_Read>
 8002386:	4603      	mov	r3, r0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2104      	movs	r1, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f9bc 	bl	8003720 <MFX_IO_Read>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80023bc:	f001 f938 	bl	8003630 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2104      	movs	r1, #4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff f8e7 	bl	8001598 <mfxstm32l152_EnableITSource>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2104      	movs	r1, #4
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f932 	bl	800164a <mfxstm32l152_ClearGlobalIT>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2104      	movs	r1, #4
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f90e 	bl	800161e <mfxstm32l152_GlobalITStatus>
 8002402:	4603      	mov	r3, r0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2104      	movs	r1, #4
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f8db 	bl	80015d6 <mfxstm32l152_DisableITSource>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e00b      	b.n	8002450 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <mfxstm32l152_GetInstance+0x3c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	b29b      	uxth	r3, r3
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	429a      	cmp	r2, r3
 8002444:	d101      	bne.n	800244a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	e006      	b.n	8002458 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d9f0      	bls.n	8002438 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8002456:	23ff      	movs	r3, #255	; 0xff
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	20009958 	.word	0x20009958

08002468 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e00f      	b.n	8002498 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <mfxstm32l152_ReleaseInstance+0x44>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	b29b      	uxth	r3, r3
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	429a      	cmp	r2, r3
 8002484:	d105      	bne.n	8002492 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	4a08      	ldr	r2, [pc, #32]	; (80024ac <mfxstm32l152_ReleaseInstance+0x44>)
 800248a:	2100      	movs	r1, #0
 800248c:	54d1      	strb	r1, [r2, r3]
      return idx;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	e006      	b.n	80024a0 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3301      	adds	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d9ec      	bls.n	8002478 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800249e:	23ff      	movs	r3, #255	; 0xff
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20009958 	.word	0x20009958

080024b0 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	603a      	str	r2, [r7, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
 80024be:	460b      	mov	r3, r1
 80024c0:	717b      	strb	r3, [r7, #5]
 80024c2:	4613      	mov	r3, r2
 80024c4:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01e      	beq.n	800251e <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80024e0:	797a      	ldrb	r2, [r7, #5]
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f91a 	bl	8003720 <MFX_IO_Read>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80024f0:	793b      	ldrb	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e008      	b.n	8002512 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8002500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002504:	43db      	mvns	r3, r3
 8002506:	b25a      	sxtb	r2, r3
 8002508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250c:	4013      	ands	r3, r2
 800250e:	b25b      	sxtb	r3, r3
 8002510:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	7979      	ldrb	r1, [r7, #5]
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f8ed 	bl	80036f8 <MFX_IO_Write>
  }

  if (pin_8_15)
 800251e:	7b7b      	ldrb	r3, [r7, #13]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d022      	beq.n	800256a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	3301      	adds	r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f001 f8f6 	bl	8003720 <MFX_IO_Read>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8002538:	793b      	ldrb	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	7b7b      	ldrb	r3, [r7, #13]
 8002542:	4313      	orrs	r3, r2
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e008      	b.n	800255a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8002548:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800254c:	43db      	mvns	r3, r3
 800254e:	b25a      	sxtb	r2, r3
 8002550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002554:	4013      	ands	r3, r2
 8002556:	b25b      	sxtb	r3, r3
 8002558:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800255a:	797b      	ldrb	r3, [r7, #5]
 800255c:	3301      	adds	r3, #1
 800255e:	b2d9      	uxtb	r1, r3
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	4618      	mov	r0, r3
 8002566:	f001 f8c7 	bl	80036f8 <MFX_IO_Write>
  }

  if (pin_16_23)
 800256a:	7b3b      	ldrb	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8002570:	797b      	ldrb	r3, [r7, #5]
 8002572:	3302      	adds	r3, #2
 8002574:	b2da      	uxtb	r2, r3
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f001 f8d0 	bl	8003720 <MFX_IO_Read>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8002584:	793b      	ldrb	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	7b3b      	ldrb	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e008      	b.n	80025a6 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8002594:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002598:	43db      	mvns	r3, r3
 800259a:	b25a      	sxtb	r2, r3
 800259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a0:	4013      	ands	r3, r2
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 80025a6:	797b      	ldrb	r3, [r7, #5]
 80025a8:	3302      	adds	r3, #2
 80025aa:	b2d9      	uxtb	r1, r3
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f8a1 	bl	80036f8 <MFX_IO_Write>
  }
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <ov5640_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov5640_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]

  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e010      	b.n	80025f8 <ov5640_Init+0x38>
  {
    CAMERA_IO_Write(DeviceAddr, OV5640_Init[index][0], OV5640_Init[index][1]);
 80025d6:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <ov5640_Init+0x128>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80025de:	4a42      	ldr	r2, [pc, #264]	; (80026e8 <ov5640_Init+0x128>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	885b      	ldrh	r3, [r3, #2]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 f8db 	bl	80037a8 <CAMERA_IO_Write>
  for(index=0; index< (sizeof(OV5640_Init)/4) ; index++)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2bfd      	cmp	r3, #253	; 0xfd
 80025fc:	d9eb      	bls.n	80025d6 <ov5640_Init+0x16>
  }

  /* Initialize OV5640 */
  switch (resolution)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d86b      	bhi.n	80026dc <ov5640_Init+0x11c>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <ov5640_Init+0x4c>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	0800261d 	.word	0x0800261d
 8002610:	0800264d 	.word	0x0800264d
 8002614:	0800267d 	.word	0x0800267d
 8002618:	080026ad 	.word	0x080026ad
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV5640_QQVGA)/4); index++)
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e010      	b.n	8002644 <ov5640_Init+0x84>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_QQVGA[index][0], OV5640_QQVGA[index][1]);
 8002622:	4a32      	ldr	r2, [pc, #200]	; (80026ec <ov5640_Init+0x12c>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800262a:	4a30      	ldr	r2, [pc, #192]	; (80026ec <ov5640_Init+0x12c>)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f8b5 	bl	80037a8 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_QQVGA)/4); index++)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d9eb      	bls.n	8002622 <ov5640_Init+0x62>
      }
      break;
 800264a:	e048      	b.n	80026de <ov5640_Init+0x11e>
    }
  case CAMERA_R320x240:
    {
      for(index=0; index< (sizeof(OV5640_QVGA)/4); index++)
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e010      	b.n	8002674 <ov5640_Init+0xb4>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_QVGA[index][0], OV5640_QVGA[index][1]);
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <ov5640_Init+0x130>)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800265a:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <ov5640_Init+0x130>)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	885b      	ldrh	r3, [r3, #2]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4618      	mov	r0, r3
 800266a:	f001 f89d 	bl	80037a8 <CAMERA_IO_Write>
      for(index=0; index< (sizeof(OV5640_QVGA)/4); index++)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3301      	adds	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d9eb      	bls.n	8002652 <ov5640_Init+0x92>
      }

      break;
 800267a:	e030      	b.n	80026de <ov5640_Init+0x11e>
    }
  case CAMERA_R480x272:
    {
      for(index=0; index<(sizeof(OV5640_480x272)/4); index++)
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e010      	b.n	80026a4 <ov5640_Init+0xe4>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_480x272[index][0], OV5640_480x272[index][1]);
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <ov5640_Init+0x134>)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800268a:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <ov5640_Init+0x134>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	885b      	ldrh	r3, [r3, #2]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4618      	mov	r0, r3
 800269a:	f001 f885 	bl	80037a8 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_480x272)/4); index++)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d9eb      	bls.n	8002682 <ov5640_Init+0xc2>
      }
      break;
 80026aa:	e018      	b.n	80026de <ov5640_Init+0x11e>
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV5640_VGA)/4); index++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e010      	b.n	80026d4 <ov5640_Init+0x114>
      {
        CAMERA_IO_Write(DeviceAddr, OV5640_VGA[index][0], OV5640_VGA[index][1]);
 80026b2:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <ov5640_Init+0x138>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <ov5640_Init+0x138>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	885b      	ldrh	r3, [r3, #2]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 f86d 	bl	80037a8 <CAMERA_IO_Write>
      for(index=0; index<(sizeof(OV5640_VGA)/4); index++)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d9eb      	bls.n	80026b2 <ov5640_Init+0xf2>
      }
      break;
 80026da:	e000      	b.n	80026de <ov5640_Init+0x11e>
    }
  default:
    {
      break;
 80026dc:	bf00      	nop
    }
  }
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	0800935c 	.word	0x0800935c
 80026ec:	080097a8 	.word	0x080097a8
 80026f0:	0800978c 	.word	0x0800978c
 80026f4:	08009770 	.word	0x08009770
 80026f8:	08009754 	.word	0x08009754

080026fc <OV5640_SetEffect>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  Effect: Effect to be configured
  * @retval None
  */
void OV5640_SetEffect(uint16_t DeviceAddr, uint32_t Effect)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	80fb      	strh	r3, [r7, #6]
  switch(Effect)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	f000 8147 	beq.w	80029a0 <OV5640_SetEffect+0x2a4>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	f200 8166 	bhi.w	80029e8 <OV5640_SetEffect+0x2ec>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	f000 8121 	beq.w	8002966 <OV5640_SetEffect+0x26a>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b80      	cmp	r3, #128	; 0x80
 8002728:	f200 815e 	bhi.w	80029e8 <OV5640_SetEffect+0x2ec>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b20      	cmp	r3, #32
 8002730:	d848      	bhi.n	80027c4 <OV5640_SetEffect+0xc8>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b20      	cmp	r3, #32
 8002736:	f200 8157 	bhi.w	80029e8 <OV5640_SetEffect+0x2ec>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <OV5640_SetEffect+0x44>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	080027cf 	.word	0x080027cf
 8002744:	080027ed 	.word	0x080027ed
 8002748:	08002827 	.word	0x08002827
 800274c:	080029e9 	.word	0x080029e9
 8002750:	08002861 	.word	0x08002861
 8002754:	080029e9 	.word	0x080029e9
 8002758:	080029e9 	.word	0x080029e9
 800275c:	080029e9 	.word	0x080029e9
 8002760:	0800289b 	.word	0x0800289b
 8002764:	080029e9 	.word	0x080029e9
 8002768:	080029e9 	.word	0x080029e9
 800276c:	080029e9 	.word	0x080029e9
 8002770:	080029e9 	.word	0x080029e9
 8002774:	080029e9 	.word	0x080029e9
 8002778:	080029e9 	.word	0x080029e9
 800277c:	080029e9 	.word	0x080029e9
 8002780:	080028d5 	.word	0x080028d5
 8002784:	080029e9 	.word	0x080029e9
 8002788:	080029e9 	.word	0x080029e9
 800278c:	080029e9 	.word	0x080029e9
 8002790:	080029e9 	.word	0x080029e9
 8002794:	080029e9 	.word	0x080029e9
 8002798:	080029e9 	.word	0x080029e9
 800279c:	080029e9 	.word	0x080029e9
 80027a0:	080029e9 	.word	0x080029e9
 80027a4:	080029e9 	.word	0x080029e9
 80027a8:	080029e9 	.word	0x080029e9
 80027ac:	080029e9 	.word	0x080029e9
 80027b0:	080029e9 	.word	0x080029e9
 80027b4:	080029e9 	.word	0x080029e9
 80027b8:	080029e9 	.word	0x080029e9
 80027bc:	080029e9 	.word	0x080029e9
 80027c0:	0800290f 	.word	0x0800290f
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	f000 80b0 	beq.w	800292c <OV5640_SetEffect+0x230>
 80027cc:	e10c      	b.n	80029e8 <OV5640_SetEffect+0x2ec>
  {
  case OV5640_COLOR_EFFECT_NONE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0x7F);
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	227f      	movs	r2, #127	; 0x7f
 80027d2:	f245 0101 	movw	r1, #20481	; 0x5001
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 ffe6 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 ffdf 	bl	80037a8 <CAMERA_IO_Write>
    break;
 80027ea:	e10c      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_BLUE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	22ff      	movs	r2, #255	; 0xff
 80027f0:	f245 0101 	movw	r1, #20481	; 0x5001
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 ffd7 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2218      	movs	r2, #24
 80027fe:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002802:	4618      	mov	r0, r3
 8002804:	f000 ffd0 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0xA0);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	22a0      	movs	r2, #160	; 0xa0
 800280c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002810:	4618      	mov	r0, r3
 8002812:	f000 ffc9 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x40);
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	f245 5184 	movw	r1, #21892	; 0x5584
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ffc2 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002824:	e0ef      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_RED:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	f245 0101 	movw	r1, #20481	; 0x5001
 800282e:	4618      	mov	r0, r3
 8002830:	f000 ffba 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	2218      	movs	r2, #24
 8002838:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800283c:	4618      	mov	r0, r3
 800283e:	f000 ffb3 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x80);
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	f245 5183 	movw	r1, #21891	; 0x5583
 800284a:	4618      	mov	r0, r3
 800284c:	f000 ffac 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xC0);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	22c0      	movs	r2, #192	; 0xc0
 8002854:	f245 5184 	movw	r1, #21892	; 0x5584
 8002858:	4618      	mov	r0, r3
 800285a:	f000 ffa5 	bl	80037a8 <CAMERA_IO_Write>
    break;
 800285e:	e0d2      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_GREEN:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	f245 0101 	movw	r1, #20481	; 0x5001
 8002868:	4618      	mov	r0, r3
 800286a:	f000 ff9d 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2218      	movs	r2, #24
 8002872:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002876:	4618      	mov	r0, r3
 8002878:	f000 ff96 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x60);
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2260      	movs	r2, #96	; 0x60
 8002880:	f245 5183 	movw	r1, #21891	; 0x5583
 8002884:	4618      	mov	r0, r3
 8002886:	f000 ff8f 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x60);
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2260      	movs	r2, #96	; 0x60
 800288e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002892:	4618      	mov	r0, r3
 8002894:	f000 ff88 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002898:	e0b5      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_BW:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	22ff      	movs	r2, #255	; 0xff
 800289e:	f245 0101 	movw	r1, #20481	; 0x5001
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 ff80 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	2218      	movs	r2, #24
 80028ac:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 ff79 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x80);
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	f245 5183 	movw	r1, #21891	; 0x5583
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 ff72 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x80);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	f245 5184 	movw	r1, #21892	; 0x5584
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 ff6b 	bl	80037a8 <CAMERA_IO_Write>
    break;
 80028d2:	e098      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_SEPIA:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	f245 0101 	movw	r1, #20481	; 0x5001
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 ff63 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	2218      	movs	r2, #24
 80028e6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 ff5c 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	f245 5183 	movw	r1, #21891	; 0x5583
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 ff55 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xA0);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	22a0      	movs	r2, #160	; 0xa0
 8002902:	f245 5184 	movw	r1, #21892	; 0x5584
 8002906:	4618      	mov	r0, r3
 8002908:	f000 ff4e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 800290c:	e07b      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_NEGATIVE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	22ff      	movs	r2, #255	; 0xff
 8002912:	f245 0101 	movw	r1, #20481	; 0x5001
 8002916:	4618      	mov	r0, r3
 8002918:	f000 ff46 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x40);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002924:	4618      	mov	r0, r3
 8002926:	f000 ff3f 	bl	80037a8 <CAMERA_IO_Write>
    break;
 800292a:	e06c      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_BW_NEGATIVE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	f245 0101 	movw	r1, #20481	; 0x5001
 8002934:	4618      	mov	r0, r3
 8002936:	f000 ff37 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x58);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2258      	movs	r2, #88	; 0x58
 800293e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002942:	4618      	mov	r0, r3
 8002944:	f000 ff30 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002950:	4618      	mov	r0, r3
 8002952:	f000 ff29 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x40);
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	f245 5184 	movw	r1, #21892	; 0x5584
 800295e:	4618      	mov	r0, r3
 8002960:	f000 ff22 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002964:	e04f      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_OVEREXPOSURE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	f245 0101 	movw	r1, #20481	; 0x5001
 800296e:	4618      	mov	r0, r3
 8002970:	f000 ff1a 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x18);
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2218      	movs	r2, #24
 8002978:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800297c:	4618      	mov	r0, r3
 800297e:	f000 ff13 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0xF0);
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	22f0      	movs	r2, #240	; 0xf0
 8002986:	f245 5183 	movw	r1, #21891	; 0x5583
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ff0c 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0xF0);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	22f0      	movs	r2, #240	; 0xf0
 8002994:	f245 5184 	movw	r1, #21892	; 0x5584
 8002998:	4618      	mov	r0, r3
 800299a:	f000 ff05 	bl	80037a8 <CAMERA_IO_Write>
    break;
 800299e:	e032      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  case OV5640_COLOR_EFFECT_SOLARIZE:
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	22ff      	movs	r2, #255	; 0xff
 80029a4:	f245 0101 	movw	r1, #20481	; 0x5001
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fefd 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x06);
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2206      	movs	r2, #6
 80029b2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fef6 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5583, 0x40);
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	f245 5183 	movw	r1, #21891	; 0x5583
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 feef 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5584, 0x10);
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2210      	movs	r2, #16
 80029ce:	f245 5184 	movw	r1, #21892	; 0x5584
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fee8 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5003, 0x09);
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2209      	movs	r2, #9
 80029dc:	f245 0103 	movw	r1, #20483	; 0x5003
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fee1 	bl	80037a8 <CAMERA_IO_Write>
    break;
 80029e6:	e00e      	b.n	8002a06 <OV5640_SetEffect+0x30a>

  default :
    /* No effect */
    CAMERA_IO_Write(DeviceAddr, 0x5001, 0x7F);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	227f      	movs	r2, #127	; 0x7f
 80029ec:	f245 0101 	movw	r1, #20481	; 0x5001
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fed9 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5580, 0x00);
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fed2 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002a04:	bf00      	nop
  }
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop

08002a10 <OV5640_SetBrightness>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  Level: Value to be configured
  * @retval None
  */
void OV5640_SetBrightness(uint16_t DeviceAddr, uint8_t Level)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	460a      	mov	r2, r1
 8002a1a:	80fb      	strh	r3, [r7, #6]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	717b      	strb	r3, [r7, #5]
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	22ff      	movs	r2, #255	; 0xff
 8002a24:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 febd 	bl	80037a8 <CAMERA_IO_Write>

  switch(Level)
 8002a2e:	797b      	ldrb	r3, [r7, #5]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	f000 8094 	beq.w	8002b5e <OV5640_SetBrightness+0x14e>
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	f300 8099 	bgt.w	8002b6e <OV5640_SetBrightness+0x15e>
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	dc4b      	bgt.n	8002ad8 <OV5640_SetBrightness+0xc8>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f2c0 8094 	blt.w	8002b6e <OV5640_SetBrightness+0x15e>
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	f200 8091 	bhi.w	8002b6e <OV5640_SetBrightness+0x15e>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <OV5640_SetBrightness+0x44>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002adf 	.word	0x08002adf
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002aff 	.word	0x08002aff
 8002a60:	08002b6f 	.word	0x08002b6f
 8002a64:	08002b0f 	.word	0x08002b0f
 8002a68:	08002b6f 	.word	0x08002b6f
 8002a6c:	08002b6f 	.word	0x08002b6f
 8002a70:	08002b6f 	.word	0x08002b6f
 8002a74:	08002b1f 	.word	0x08002b1f
 8002a78:	08002b6f 	.word	0x08002b6f
 8002a7c:	08002b6f 	.word	0x08002b6f
 8002a80:	08002b6f 	.word	0x08002b6f
 8002a84:	08002b6f 	.word	0x08002b6f
 8002a88:	08002b6f 	.word	0x08002b6f
 8002a8c:	08002b6f 	.word	0x08002b6f
 8002a90:	08002b6f 	.word	0x08002b6f
 8002a94:	08002b2f 	.word	0x08002b2f
 8002a98:	08002b6f 	.word	0x08002b6f
 8002a9c:	08002b6f 	.word	0x08002b6f
 8002aa0:	08002b6f 	.word	0x08002b6f
 8002aa4:	08002b6f 	.word	0x08002b6f
 8002aa8:	08002b6f 	.word	0x08002b6f
 8002aac:	08002b6f 	.word	0x08002b6f
 8002ab0:	08002b6f 	.word	0x08002b6f
 8002ab4:	08002b6f 	.word	0x08002b6f
 8002ab8:	08002b6f 	.word	0x08002b6f
 8002abc:	08002b6f 	.word	0x08002b6f
 8002ac0:	08002b6f 	.word	0x08002b6f
 8002ac4:	08002b6f 	.word	0x08002b6f
 8002ac8:	08002b6f 	.word	0x08002b6f
 8002acc:	08002b6f 	.word	0x08002b6f
 8002ad0:	08002b6f 	.word	0x08002b6f
 8002ad4:	08002b3f 	.word	0x08002b3f
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d038      	beq.n	8002b4e <OV5640_SetBrightness+0x13e>
 8002adc:	e047      	b.n	8002b6e <OV5640_SetBrightness+0x15e>
  {
  case OV5640_BRIGHTNESS_LEVEL4P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x40);
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	f245 5187 	movw	r1, #21895	; 0x5587
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fe5e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002aec:	e049      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL3P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x30);
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2230      	movs	r2, #48	; 0x30
 8002af2:	f245 5187 	movw	r1, #21895	; 0x5587
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fe56 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002afc:	e041      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL2P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x20);
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fe4e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b0c:	e039      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL1P:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x10);
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2210      	movs	r2, #16
 8002b12:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fe46 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b1c:	e031      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL0:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x00);
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fe3e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b2c:	e029      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL1N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x10);
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2210      	movs	r2, #16
 8002b32:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fe36 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b3c:	e021      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL2N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x20);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fe2e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b4c:	e019      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL3N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x30);
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2230      	movs	r2, #48	; 0x30
 8002b52:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fe26 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b5c:	e011      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  case OV5640_BRIGHTNESS_LEVEL4N:
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x40);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fe1e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b6c:	e009      	b.n	8002b82 <OV5640_SetBrightness+0x172>

  default:
    /* Level 0 as default */
    Level = OV5640_BRIGHTNESS_LEVEL0;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	717b      	strb	r3, [r7, #5]
    CAMERA_IO_Write(DeviceAddr, 0x5587, 0x00);
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f245 5187 	movw	r1, #21895	; 0x5587
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe14 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002b80:	bf00      	nop
  }

  CAMERA_IO_Write(DeviceAddr, 0x5580, 0x04);
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2204      	movs	r2, #4
 8002b86:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fe0c 	bl	80037a8 <CAMERA_IO_Write>

  if(Level < OV5640_SATURATION_LEVEL1N)
 8002b90:	797b      	ldrb	r3, [r7, #5]
 8002b92:	2b0f      	cmp	r3, #15
 8002b94:	d807      	bhi.n	8002ba6 <OV5640_SetBrightness+0x196>
  {
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x01);
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f245 5188 	movw	r1, #21896	; 0x5588
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fe02 	bl	80037a8 <CAMERA_IO_Write>
  }
  else
  {
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
  }
}
 8002ba4:	e006      	b.n	8002bb4 <OV5640_SetBrightness+0x1a4>
    CAMERA_IO_Write(DeviceAddr, 0x5588, 0x09);
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2209      	movs	r2, #9
 8002baa:	f245 5188 	movw	r1, #21896	; 0x5588
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fdfa 	bl	80037a8 <CAMERA_IO_Write>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <OV5640_SetContrast>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  Level: Value to be configured
  * @retval None
  */
void OV5640_SetContrast(uint16_t DeviceAddr, uint8_t Level)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	80fb      	strh	r3, [r7, #6]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	717b      	strb	r3, [r7, #5]
  CAMERA_IO_Write(DeviceAddr, 0x5001, 0xFF);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	f245 0101 	movw	r1, #20481	; 0x5001
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fde7 	bl	80037a8 <CAMERA_IO_Write>
  CAMERA_IO_Write(DeviceAddr, 0x5580, 0x04);
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fde0 	bl	80037a8 <CAMERA_IO_Write>

  switch(Level)
 8002be8:	797b      	ldrb	r3, [r7, #5]
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	f000 80cb 	beq.w	8002d86 <OV5640_SetContrast+0x1ca>
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	f300 80d7 	bgt.w	8002da4 <OV5640_SetContrast+0x1e8>
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	dc4a      	bgt.n	8002c90 <OV5640_SetContrast+0xd4>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f2c0 80d2 	blt.w	8002da4 <OV5640_SetContrast+0x1e8>
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	f200 80cf 	bhi.w	8002da4 <OV5640_SetContrast+0x1e8>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <OV5640_SetContrast+0x50>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c97 	.word	0x08002c97
 8002c10:	08002cb5 	.word	0x08002cb5
 8002c14:	08002cd3 	.word	0x08002cd3
 8002c18:	08002da5 	.word	0x08002da5
 8002c1c:	08002cf1 	.word	0x08002cf1
 8002c20:	08002da5 	.word	0x08002da5
 8002c24:	08002da5 	.word	0x08002da5
 8002c28:	08002da5 	.word	0x08002da5
 8002c2c:	08002d0f 	.word	0x08002d0f
 8002c30:	08002da5 	.word	0x08002da5
 8002c34:	08002da5 	.word	0x08002da5
 8002c38:	08002da5 	.word	0x08002da5
 8002c3c:	08002da5 	.word	0x08002da5
 8002c40:	08002da5 	.word	0x08002da5
 8002c44:	08002da5 	.word	0x08002da5
 8002c48:	08002da5 	.word	0x08002da5
 8002c4c:	08002d2d 	.word	0x08002d2d
 8002c50:	08002da5 	.word	0x08002da5
 8002c54:	08002da5 	.word	0x08002da5
 8002c58:	08002da5 	.word	0x08002da5
 8002c5c:	08002da5 	.word	0x08002da5
 8002c60:	08002da5 	.word	0x08002da5
 8002c64:	08002da5 	.word	0x08002da5
 8002c68:	08002da5 	.word	0x08002da5
 8002c6c:	08002da5 	.word	0x08002da5
 8002c70:	08002da5 	.word	0x08002da5
 8002c74:	08002da5 	.word	0x08002da5
 8002c78:	08002da5 	.word	0x08002da5
 8002c7c:	08002da5 	.word	0x08002da5
 8002c80:	08002da5 	.word	0x08002da5
 8002c84:	08002da5 	.word	0x08002da5
 8002c88:	08002da5 	.word	0x08002da5
 8002c8c:	08002d4b 	.word	0x08002d4b
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d069      	beq.n	8002d68 <OV5640_SetContrast+0x1ac>
 8002c94:	e086      	b.n	8002da4 <OV5640_SetContrast+0x1e8>
  {
  case OV5640_CONTRAST_LEVEL4P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x30);
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	2230      	movs	r2, #48	; 0x30
 8002c9a:	f245 5186 	movw	r1, #21894	; 0x5586
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fd82 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x30);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2230      	movs	r2, #48	; 0x30
 8002ca8:	f245 5185 	movw	r1, #21893	; 0x5585
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fd7b 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002cb2:	e086      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL3P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x2C);
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	222c      	movs	r2, #44	; 0x2c
 8002cb8:	f245 5186 	movw	r1, #21894	; 0x5586
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fd73 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x2C);
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	222c      	movs	r2, #44	; 0x2c
 8002cc6:	f245 5185 	movw	r1, #21893	; 0x5585
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fd6c 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002cd0:	e077      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL2P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x28);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2228      	movs	r2, #40	; 0x28
 8002cd6:	f245 5186 	movw	r1, #21894	; 0x5586
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fd64 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x28);
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	2228      	movs	r2, #40	; 0x28
 8002ce4:	f245 5185 	movw	r1, #21893	; 0x5585
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fd5d 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002cee:	e068      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL1P:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x24);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f245 5186 	movw	r1, #21894	; 0x5586
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fd55 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x24);
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2224      	movs	r2, #36	; 0x24
 8002d02:	f245 5185 	movw	r1, #21893	; 0x5585
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fd4e 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002d0c:	e059      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL0:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x20);
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f245 5186 	movw	r1, #21894	; 0x5586
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd46 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x20);
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f245 5185 	movw	r1, #21893	; 0x5585
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fd3f 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002d2a:	e04a      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL1N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x1C);
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	221c      	movs	r2, #28
 8002d30:	f245 5186 	movw	r1, #21894	; 0x5586
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fd37 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x1C);
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	221c      	movs	r2, #28
 8002d3e:	f245 5185 	movw	r1, #21893	; 0x5585
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fd30 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002d48:	e03b      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL2N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x18);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2218      	movs	r2, #24
 8002d4e:	f245 5186 	movw	r1, #21894	; 0x5586
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fd28 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x18);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	2218      	movs	r2, #24
 8002d5c:	f245 5185 	movw	r1, #21893	; 0x5585
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fd21 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002d66:	e02c      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL3N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x14);
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	2214      	movs	r2, #20
 8002d6c:	f245 5186 	movw	r1, #21894	; 0x5586
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fd19 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x14);
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2214      	movs	r2, #20
 8002d7a:	f245 5185 	movw	r1, #21893	; 0x5585
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fd12 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002d84:	e01d      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  case OV5640_CONTRAST_LEVEL4N:
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x10);
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	f245 5186 	movw	r1, #21894	; 0x5586
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd0a 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x10);
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2210      	movs	r2, #16
 8002d98:	f245 5185 	movw	r1, #21893	; 0x5585
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fd03 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002da2:	e00e      	b.n	8002dc2 <OV5640_SetContrast+0x206>

  default:
    /* Level 0 as default */
    CAMERA_IO_Write(DeviceAddr, 0x5586, 0x20);
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f245 5186 	movw	r1, #21894	; 0x5586
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fcfb 	bl	80037a8 <CAMERA_IO_Write>
    CAMERA_IO_Write(DeviceAddr, 0x5585, 0x20);
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f245 5185 	movw	r1, #21893	; 0x5585
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fcf4 	bl	80037a8 <CAMERA_IO_Write>
    break;
 8002dc0:	bf00      	nop
  }

  CAMERA_IO_Write(DeviceAddr, 0x5588, 0x41);
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2241      	movs	r2, #65	; 0x41
 8002dc6:	f245 5188 	movw	r1, #21896	; 0x5588
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fcec 	bl	80037a8 <CAMERA_IO_Write>
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <ov5640_Config>:
  * @param  value: Value to be configured
  * @param  brightness_value: Brightness value to be configured
  * @retval None
  */
void ov5640_Config(uint16_t DeviceAddr, uint32_t feature, uint32_t value, uint32_t brightness_value)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	81fb      	strh	r3, [r7, #14]
  uint32_t value_tmp;
  uint32_t br_value;

  /* Convert the input value into ov5640 parameters */
  value_tmp = ov5640_ConvertValue(feature, value);
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	68b8      	ldr	r0, [r7, #8]
 8002dec:	f000 f85c 	bl	8002ea8 <ov5640_ConvertValue>
 8002df0:	6178      	str	r0, [r7, #20]
  br_value = ov5640_ConvertValue(CAMERA_CONTRAST_BRIGHTNESS, brightness_value);
 8002df2:	6839      	ldr	r1, [r7, #0]
 8002df4:	2000      	movs	r0, #0
 8002df6:	f000 f857 	bl	8002ea8 <ov5640_ConvertValue>
 8002dfa:	6138      	str	r0, [r7, #16]

  switch(feature)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d018      	beq.n	8002e34 <ov5640_Config+0x5c>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d81b      	bhi.n	8002e40 <ov5640_Config+0x68>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <ov5640_Config+0x3e>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d00f      	beq.n	8002e34 <ov5640_Config+0x5c>
      OV5640_SetEffect(DeviceAddr, value_tmp);
      break;
    }
  default:
    {
      break;
 8002e14:	e014      	b.n	8002e40 <ov5640_Config+0x68>
      OV5640_SetContrast(DeviceAddr, value_tmp);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fecc 	bl	8002bbc <OV5640_SetContrast>
      OV5640_SetBrightness(DeviceAddr, br_value);   
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fdef 	bl	8002a10 <OV5640_SetBrightness>
      break;
 8002e32:	e006      	b.n	8002e42 <ov5640_Config+0x6a>
      OV5640_SetEffect(DeviceAddr, value_tmp);
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fc5f 	bl	80026fc <OV5640_SetEffect>
      break;
 8002e3e:	e000      	b.n	8002e42 <ov5640_Config+0x6a>
      break;
 8002e40:	bf00      	nop
    }
  }
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ov5640_ReadID>:
  * @brief  Read the OV5640 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV5640 ID
  */
uint16_t ov5640_ReadID(uint16_t DeviceAddr)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	80fb      	strh	r3, [r7, #6]
  uint16_t read_val = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	81fb      	strh	r3, [r7, #14]

  /* Initialize I2C */
  CAMERA_IO_Init();
 8002e58:	f000 fc9c 	bl	8003794 <CAMERA_IO_Init>

  /* Prepare the camera to be configured */
  CAMERA_IO_Write(DeviceAddr, 0x3008, 0x80);
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	f243 0108 	movw	r1, #12296	; 0x3008
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fc9f 	bl	80037a8 <CAMERA_IO_Write>
  CAMERA_Delay(500);
 8002e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e6e:	f000 fcd3 	bl	8003818 <CAMERA_Delay>

  read_val = CAMERA_IO_Read(DeviceAddr, 0x300A);
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	f243 010a 	movw	r1, #12298	; 0x300a
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fcaf 	bl	80037dc <CAMERA_IO_Read>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	81fb      	strh	r3, [r7, #14]
  read_val = read_val << 8;
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	81fb      	strh	r3, [r7, #14]
  read_val |= CAMERA_IO_Read(DeviceAddr, 0x300B);
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	f243 010b 	movw	r1, #12299	; 0x300b
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fca4 	bl	80037dc <CAMERA_IO_Read>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	81fb      	strh	r3, [r7, #14]
  /* Get the camera ID */
  return read_val;
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <ov5640_ConvertValue>:
  * @param  feature: Camera feature to be configured
  * @param  value: Value to be configured
  * @retval The converted value
  */
static uint32_t ov5640_ConvertValue(uint32_t feature, uint32_t value)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]

  switch(feature)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d05f      	beq.n	8002f7c <ov5640_ConvertValue+0xd4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d87c      	bhi.n	8002fbc <ov5640_ConvertValue+0x114>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01c      	beq.n	8002f02 <ov5640_ConvertValue+0x5a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d176      	bne.n	8002fbc <ov5640_ConvertValue+0x114>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d00f      	beq.n	8002ef4 <ov5640_ConvertValue+0x4c>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d80f      	bhi.n	8002efa <ov5640_ConvertValue+0x52>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <ov5640_ConvertValue+0x40>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d003      	beq.n	8002eee <ov5640_ConvertValue+0x46>
 8002ee6:	e008      	b.n	8002efa <ov5640_ConvertValue+0x52>
    {
      switch(value)
      {
      case CAMERA_BLACK_WHITE_BW:
        {
          ret =  OV5640_COLOR_EFFECT_BW;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	60fb      	str	r3, [r7, #12]
          break;
 8002eec:	e008      	b.n	8002f00 <ov5640_ConvertValue+0x58>
        }
      case CAMERA_BLACK_WHITE_NEGATIVE:
        {
          ret =  OV5640_COLOR_EFFECT_NEGATIVE;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	60fb      	str	r3, [r7, #12]
          break;
 8002ef2:	e005      	b.n	8002f00 <ov5640_ConvertValue+0x58>
        }
      case CAMERA_BLACK_WHITE_BW_NEGATIVE:
        {
          ret =  OV5640_COLOR_EFFECT_BW_NEGATIVE;
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	60fb      	str	r3, [r7, #12]
          break;
 8002ef8:	e002      	b.n	8002f00 <ov5640_ConvertValue+0x58>
        }
      case CAMERA_BLACK_WHITE_NORMAL:
      default:
        {
          ret =  OV5640_COLOR_EFFECT_NONE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
          break;
 8002efe:	bf00      	nop
        }
      }
      break;
 8002f00:	e05f      	b.n	8002fc2 <ov5640_ConvertValue+0x11a>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d835      	bhi.n	8002f74 <ov5640_ConvertValue+0xcc>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <ov5640_ConvertValue+0x68>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f3f 	.word	0x08002f3f
 8002f18:	08002f45 	.word	0x08002f45
 8002f1c:	08002f4b 	.word	0x08002f4b
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08002f63 	.word	0x08002f63
 8002f30:	08002f69 	.word	0x08002f69
 8002f34:	08002f6f 	.word	0x08002f6f
    {
      switch(value)
      {
      case CAMERA_BRIGHTNESS_LEVEL0:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL4N;
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	60fb      	str	r3, [r7, #12]
          break;
 8002f3c:	e01d      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL1:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL2N;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	60fb      	str	r3, [r7, #12]
          break;
 8002f42:	e01a      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL2:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL0;
 8002f44:	2308      	movs	r3, #8
 8002f46:	60fb      	str	r3, [r7, #12]
          break;
 8002f48:	e017      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL3:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL2P;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
          break;
 8002f4e:	e014      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_BRIGHTNESS_LEVEL4:
        {
          ret =  OV5640_BRIGHTNESS_LEVEL4P;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
          break;
 8002f54:	e011      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL0:
        {
          ret =  OV5640_CONTRAST_LEVEL4N;
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	60fb      	str	r3, [r7, #12]
          break;
 8002f5a:	e00e      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL1:
        {
          ret =  OV5640_CONTRAST_LEVEL2N;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	60fb      	str	r3, [r7, #12]
          break;
 8002f60:	e00b      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL2:
        {
          ret =  OV5640_CONTRAST_LEVEL0;
 8002f62:	2308      	movs	r3, #8
 8002f64:	60fb      	str	r3, [r7, #12]
          break;
 8002f66:	e008      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL3:
        {
          ret =  OV5640_CONTRAST_LEVEL2P;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	60fb      	str	r3, [r7, #12]
          break;
 8002f6c:	e005      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      case CAMERA_CONTRAST_LEVEL4:
        {
          ret =  OV5640_CONTRAST_LEVEL4P;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
          break;
 8002f72:	e002      	b.n	8002f7a <ov5640_ConvertValue+0xd2>
        }
      default:
        {
          ret =  OV5640_CONTRAST_LEVEL0;
 8002f74:	2308      	movs	r3, #8
 8002f76:	60fb      	str	r3, [r7, #12]
          break;
 8002f78:	bf00      	nop
        }        
      }
      break;
 8002f7a:	e022      	b.n	8002fc2 <ov5640_ConvertValue+0x11a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d817      	bhi.n	8002fb4 <ov5640_ConvertValue+0x10c>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <ov5640_ConvertValue+0xe4>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fa3 	.word	0x08002fa3
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002faf 	.word	0x08002faf
 8002f98:	08002f9d 	.word	0x08002f9d
    {
      switch(value)
      {
      case CAMERA_COLOR_EFFECT_ANTIQUE:
        {
          ret =  OV5640_COLOR_EFFECT_SEPIA;
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	60fb      	str	r3, [r7, #12]
          break;
 8002fa0:	e00b      	b.n	8002fba <ov5640_ConvertValue+0x112>
        }
      case CAMERA_COLOR_EFFECT_BLUE:
        {
          ret =  OV5640_COLOR_EFFECT_BLUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
          break;
 8002fa6:	e008      	b.n	8002fba <ov5640_ConvertValue+0x112>
        }
      case CAMERA_COLOR_EFFECT_GREEN:
        {
          ret =  OV5640_COLOR_EFFECT_GREEN;
 8002fa8:	2304      	movs	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
          break;
 8002fac:	e005      	b.n	8002fba <ov5640_ConvertValue+0x112>
        }
      case CAMERA_COLOR_EFFECT_RED:
        {
          ret =  OV5640_COLOR_EFFECT_RED;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
          break;
 8002fb2:	e002      	b.n	8002fba <ov5640_ConvertValue+0x112>
        }        
      case CAMERA_COLOR_EFFECT_NONE:  
      default:
        {
          ret =  OV5640_COLOR_EFFECT_NONE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
          break;
 8002fb8:	bf00      	nop
        }
      }
      break;
 8002fba:	e002      	b.n	8002fc2 <ov5640_ConvertValue+0x11a>
    default:
      {
        ret = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
        break;
 8002fc0:	bf00      	nop
      }
    }
  }

  return ret;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <BSP_ErrorHandler>:
  * @brief  Error Handler
  * @note   Defined as a weak function to be overwritten by the application.
  * @retval None
  */
__weak void BSP_ErrorHandler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  while(1);
 8002fd4:	e7fe      	b.n	8002fd4 <BSP_ErrorHandler+0x4>
	...

08002fd8 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	; 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11a      	bne.n	800301e <BSP_LED_Init+0x46>
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <BSP_LED_Init+0xc8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <BSP_LED_Init+0xc8>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <BSP_LED_Init+0xc8>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 f964 	bl	80062cc <HAL_PWREx_EnableVddIO2>
 8003004:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <BSP_LED_Init+0xc8>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <BSP_LED_Init+0xc8>)
 800300a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800300e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <BSP_LED_Init+0xc8>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	e01c      	b.n	8003058 <BSP_LED_Init+0x80>
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d119      	bne.n	8003058 <BSP_LED_Init+0x80>
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <BSP_LED_Init+0xc8>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <BSP_LED_Init+0xc8>)
 800302a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302e:	6593      	str	r3, [r2, #88]	; 0x58
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <BSP_LED_Init+0xc8>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 f946 	bl	80062cc <HAL_PWREx_EnableVddIO2>
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <BSP_LED_Init+0xc8>)
 8003042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003044:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <BSP_LED_Init+0xc8>)
 8003046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <BSP_LED_Init+0xc8>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.Pin = LED_PIN[Led];
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <BSP_LED_Init+0xcc>)
 800305c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	2301      	movs	r3, #1
 8003064:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <BSP_LED_Init+0xd0>)
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	f107 021c 	add.w	r2, r7, #28
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fe85 	bl	8004d8c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <BSP_LED_Init+0xd0>)
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	b291      	uxth	r1, r2
 800308e:	2201      	movs	r2, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f002 f8ff 	bl	8005294 <HAL_GPIO_WritePin>
}
 8003096:	bf00      	nop
 8003098:	3730      	adds	r7, #48	; 0x30
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	080097c4 	.word	0x080097c4
 80030a8:	20000088 	.word	0x20000088

080030ac <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <BSP_LED_On+0x2c>)
 80030ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4a06      	ldr	r2, [pc, #24]	; (80030dc <BSP_LED_On+0x30>)
 80030c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030c6:	2200      	movs	r2, #0
 80030c8:	4619      	mov	r1, r3
 80030ca:	f002 f8e3 	bl	8005294 <HAL_GPIO_WritePin>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000088 	.word	0x20000088
 80030dc:	080097c4 	.word	0x080097c4

080030e0 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(uint32_t user)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 80030e8:	4816      	ldr	r0, [pc, #88]	; (8003144 <I2C1_Init+0x64>)
 80030ea:	f002 fcde 	bl	8005aaa <HAL_I2C_GetState>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11d      	bne.n	8003130 <I2C1_Init+0x50>
    /* Create semaphore to prevent multiple I2C access */
    osSemaphoreDef(BSP_I2C_SEM);
    BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
#endif

    I2c1Handle.Instance              = I2C1;
 80030f4:	4b13      	ldr	r3, [pc, #76]	; (8003144 <I2C1_Init+0x64>)
 80030f6:	4a14      	ldr	r2, [pc, #80]	; (8003148 <I2C1_Init+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <I2C1_Init+0x64>)
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <I2C1_Init+0x6c>)
 80030fe:	605a      	str	r2, [r3, #4]
    I2c1Handle.Init.OwnAddress1      = 0x70;
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <I2C1_Init+0x64>)
 8003102:	2270      	movs	r2, #112	; 0x70
 8003104:	609a      	str	r2, [r3, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <I2C1_Init+0x64>)
 8003108:	2201      	movs	r2, #1
 800310a:	60da      	str	r2, [r3, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <I2C1_Init+0x64>)
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
    I2c1Handle.Init.OwnAddress2      = 0xFF;
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <I2C1_Init+0x64>)
 8003114:	22ff      	movs	r2, #255	; 0xff
 8003116:	615a      	str	r2, [r3, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <I2C1_Init+0x64>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <I2C1_Init+0x64>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit(&I2c1Handle);
 8003124:	4807      	ldr	r0, [pc, #28]	; (8003144 <I2C1_Init+0x64>)
 8003126:	f000 f815 	bl	8003154 <I2C1_MspInit>
    HAL_I2C_Init(&I2c1Handle);
 800312a:	4806      	ldr	r0, [pc, #24]	; (8003144 <I2C1_Init+0x64>)
 800312c:	f002 f8ca 	bl	80052c4 <HAL_I2C_Init>
  }
  /* Update BSP I2C users list */
  v_bspI2cUsers |= user;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <I2C1_Init+0x70>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4313      	orrs	r3, r2
 8003138:	4a05      	ldr	r2, [pc, #20]	; (8003150 <I2C1_Init+0x70>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000995c 	.word	0x2000995c
 8003148:	40005400 	.word	0x40005400
 800314c:	c080242f 	.word	0xc080242f
 8003150:	20009a04 	.word	0x20009a04

08003154 <I2C1_MspInit>:
  * @brief Discovery I2C1 MSP Initialization
  * @param hi2c: I2C1 handle
  * @retval None
  */
static void I2C1_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0b0      	sub	sp, #192	; 0xc0
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef          GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == I2C1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a31      	ldr	r2, [pc, #196]	; (8003228 <I2C1_MspInit+0xd4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d15b      	bne.n	800321e <I2C1_MspInit+0xca>
  {
    /*##-1- Configure the Discovery I2C1 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003166:	2340      	movs	r3, #64	; 0x40
 8003168:	617b      	str	r3, [r7, #20]
    RCC_PeriphCLKInitStruct.I2c1ClockSelection   = RCC_I2C1CLKSOURCE_SYSCLK;
 800316a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316e:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4618      	mov	r0, r3
 8003176:	f003 ffef 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <I2C1_MspInit+0xd8>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	4a2b      	ldr	r2, [pc, #172]	; (800322c <I2C1_MspInit+0xd8>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <I2C1_MspInit+0xd8>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C pins as alternate function  */
    GPIO_InitStructure.Pin       = GPIO_PIN_6;
 8003192:	2340      	movs	r3, #64	; 0x40
 8003194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8003198:	2312      	movs	r3, #18
 800319a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 800319e:	2301      	movs	r3, #1
 80031a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a4:	2303      	movs	r3, #3
 80031a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStructure.Alternate = GPIO_AF4_I2C1;
 80031aa:	2304      	movs	r3, #4
 80031ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure); /* I2C1_SCL on PB6 */
 80031b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031b4:	4619      	mov	r1, r3
 80031b6:	481e      	ldr	r0, [pc, #120]	; (8003230 <I2C1_MspInit+0xdc>)
 80031b8:	f001 fde8 	bl	8004d8c <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = GPIO_PIN_7;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure); /* I2C1_SDA on PB7 */
 80031c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031c6:	4619      	mov	r1, r3
 80031c8:	4819      	ldr	r0, [pc, #100]	; (8003230 <I2C1_MspInit+0xdc>)
 80031ca:	f001 fddf 	bl	8004d8c <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #############################*/
    /* Enable I2C1 clock */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <I2C1_MspInit+0xd8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <I2C1_MspInit+0xd8>)
 80031d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <I2C1_MspInit+0xd8>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C1 Peripheral */
    __HAL_RCC_I2C1_FORCE_RESET();
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <I2C1_MspInit+0xd8>)
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <I2C1_MspInit+0xd8>)
 80031ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C1_RELEASE_RESET();
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <I2C1_MspInit+0xd8>)
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <I2C1_MspInit+0xd8>)
 80031f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set I2C1 event interrupt to the highest priority */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0x00, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2100      	movs	r1, #0
 8003202:	201f      	movs	r0, #31
 8003204:	f000 febf 	bl	8003f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003208:	201f      	movs	r0, #31
 800320a:	f000 fed8 	bl	8003fbe <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 error interrupt to the highest priority */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0x00, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2020      	movs	r0, #32
 8003214:	f000 feb7 	bl	8003f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003218:	2020      	movs	r0, #32
 800321a:	f000 fed0 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  }
}
 800321e:	bf00      	nop
 8003220:	37c0      	adds	r7, #192	; 0xc0
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40005400 	.word	0x40005400
 800322c:	40021000 	.word	0x40021000
 8003230:	48000400 	.word	0x48000400

08003234 <I2C1_DeInit>:
/**
  * @brief Discovery I2C1 Bus Deinitialization
  * @retval None
  */
void I2C1_DeInit(uint32_t user)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Update BSP I2C users list */
  v_bspI2cUsers &= ~(user);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	43da      	mvns	r2, r3
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <I2C1_DeInit+0x40>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4013      	ands	r3, r2
 8003246:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <I2C1_DeInit+0x40>)
 8003248:	6013      	str	r3, [r2, #0]

  if((HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET) && (v_bspI2cUsers == BSP_I2C_NO_USER))
 800324a:	480b      	ldr	r0, [pc, #44]	; (8003278 <I2C1_DeInit+0x44>)
 800324c:	f002 fc2d 	bl	8005aaa <HAL_I2C_GetState>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <I2C1_DeInit+0x36>
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <I2C1_DeInit+0x40>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <I2C1_DeInit+0x36>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c1Handle);
 800325e:	4806      	ldr	r0, [pc, #24]	; (8003278 <I2C1_DeInit+0x44>)
 8003260:	f002 f8bf 	bl	80053e2 <HAL_I2C_DeInit>
    I2C1_MspDeInit(&I2c1Handle);
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <I2C1_DeInit+0x44>)
 8003266:	f000 f809 	bl	800327c <I2C1_MspDeInit>
#if defined(BSP_USE_CMSIS_OS_NOT_USED)
    /* Delete semaphore to prevent multiple I2C access */
    osSemaphoreDelete(BspI2cSemaphore);
#endif
  }
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20009a04 	.word	0x20009a04
 8003278:	2000995c 	.word	0x2000995c

0800327c <I2C1_MspDeInit>:
  * @brief Discovery I2C1 MSP DeInitialization
  * @param hi2c: I2C1 handle
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <I2C1_MspDeInit+0x5c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11f      	bne.n	80032ce <I2C1_MspDeInit+0x52>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Reset configuration of I2C GPIOs as alternate function  */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);  /* I2C1_SCL */
 800328e:	2140      	movs	r1, #64	; 0x40
 8003290:	4812      	ldr	r0, [pc, #72]	; (80032dc <I2C1_MspDeInit+0x60>)
 8003292:	f001 ff0d 	bl	80050b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7); /* I2C1_SDA */
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	4810      	ldr	r0, [pc, #64]	; (80032dc <I2C1_MspDeInit+0x60>)
 800329a:	f001 ff09 	bl	80050b0 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C1 peripheral ############################*/
    /* Force and release I2C1 Peripheral */
    __HAL_RCC_I2C1_FORCE_RESET();
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <I2C1_MspDeInit+0x64>)
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <I2C1_MspDeInit+0x64>)
 80032a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032a8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_I2C1_RELEASE_RESET();
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <I2C1_MspDeInit+0x64>)
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <I2C1_MspDeInit+0x64>)
 80032b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable I2C1 clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <I2C1_MspDeInit+0x64>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <I2C1_MspDeInit+0x64>)
 80032bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032c0:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable I2C1 interrupts */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80032c2:	201f      	movs	r0, #31
 80032c4:	f000 fe89 	bl	8003fda <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80032c8:	2020      	movs	r0, #32
 80032ca:	f000 fe86 	bl	8003fda <HAL_NVIC_DisableIRQ>
  }
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40005400 	.word	0x40005400
 80032dc:	48000400 	.word	0x48000400
 80032e0:	40021000 	.word	0x40021000

080032e4 <I2C1_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C1_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	4604      	mov	r4, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	80fb      	strh	r3, [r7, #6]
 80032f6:	4603      	mov	r3, r0
 80032f8:	80bb      	strh	r3, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]
 80032fe:	4613      	mov	r3, r2
 8003300:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
#if defined(BSP_USE_CMSIS_OS_NOT_USED)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif

  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c1Timeout);
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <I2C1_WriteData+0x54>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	8878      	ldrh	r0, [r7, #2]
 800330c:	88ba      	ldrh	r2, [r7, #4]
 800330e:	88f9      	ldrh	r1, [r7, #6]
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	2301      	movs	r3, #1
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	1c7b      	adds	r3, r7, #1
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4603      	mov	r3, r0
 800331c:	4807      	ldr	r0, [pc, #28]	; (800333c <I2C1_WriteData+0x58>)
 800331e:	f002 f88f 	bl	8005440 <HAL_I2C_Mem_Write>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif

  /* Check the communication status */
  if(status != HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <I2C1_WriteData+0x4c>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 800332c:	f000 f880 	bl	8003430 <I2C1_Error>
  }
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bd90      	pop	{r4, r7, pc}
 8003338:	20000090 	.word	0x20000090
 800333c:	2000995c 	.word	0x2000995c

08003340 <I2C1_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C1_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af04      	add	r7, sp, #16
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
 800334a:	460b      	mov	r3, r1
 800334c:	80bb      	strh	r3, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8003356:	2300      	movs	r3, #0
 8003358:	73bb      	strb	r3, [r7, #14]
#if defined(BSP_USE_CMSIS_OS_NOT_USED)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, Reg, RegSize, &value, 1, I2c1Timeout);
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <I2C1_ReadData+0x5c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	8878      	ldrh	r0, [r7, #2]
 8003360:	88ba      	ldrh	r2, [r7, #4]
 8003362:	88f9      	ldrh	r1, [r7, #6]
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	2301      	movs	r3, #1
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	f107 030e 	add.w	r3, r7, #14
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4603      	mov	r3, r0
 8003372:	480b      	ldr	r0, [pc, #44]	; (80033a0 <I2C1_ReadData+0x60>)
 8003374:	f002 f978 	bl	8005668 <HAL_I2C_Mem_Read>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif

  /* Check the communication status */
  if(status != HAL_OK)
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <I2C1_ReadData+0x50>
  {
    if (Addr == TS_I2C_ADDRESS)
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b10      	cmp	r3, #16
 8003386:	d101      	bne.n	800338c <I2C1_ReadData+0x4c>
    {
      /* No error reported for Touchscreen address
         in case LCD is not mounted on board */
      return 0x0;
 8003388:	2300      	movs	r3, #0
 800338a:	e002      	b.n	8003392 <I2C1_ReadData+0x52>
    }
    else
    {
      /* Re-Initiaize the BUS */
      I2C1_Error();
 800338c:	f000 f850 	bl	8003430 <I2C1_Error>
    }
  }

  return value;
 8003390:	7bbb      	ldrb	r3, [r7, #14]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000090 	.word	0x20000090
 80033a0:	2000995c 	.word	0x2000995c

080033a4 <I2C1_isDeviceReady>:
* @param  Addr: Target device address
* @param  Trials: Number of trials
* @retval HAL status
*/
static uint8_t I2C1_isDeviceReady(uint16_t Addr, uint32_t Trials)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
#if defined(BSP_USE_CMSIS_OS_NOT_USED)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif

  status = HAL_I2C_IsDeviceReady(&I2c1Handle, Addr, Trials, 50);
 80033b4:	88f9      	ldrh	r1, [r7, #6]
 80033b6:	2332      	movs	r3, #50	; 0x32
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4807      	ldr	r0, [pc, #28]	; (80033d8 <I2C1_isDeviceReady+0x34>)
 80033bc:	f002 fa6e 	bl	800589c <HAL_I2C_IsDeviceReady>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif

  /* Check the communication status */
  if(status != HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C1_isDeviceReady+0x2a>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 80033ca:	f000 f831 	bl	8003430 <I2C1_Error>
  }

  return status;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000995c 	.word	0x2000995c

080033dc <I2C1_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C1_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af04      	add	r7, sp, #16
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	4603      	mov	r3, r0
 80033e6:	81fb      	strh	r3, [r7, #14]
 80033e8:	460b      	mov	r3, r1
 80033ea:	81bb      	strh	r3, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
#if defined(BSP_USE_CMSIS_OS_NOT_USED)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif

  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <I2C1_ReadBuffer+0x4c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	8978      	ldrh	r0, [r7, #10]
 80033fa:	89ba      	ldrh	r2, [r7, #12]
 80033fc:	89f9      	ldrh	r1, [r7, #14]
 80033fe:	9302      	str	r3, [sp, #8]
 8003400:	8c3b      	ldrh	r3, [r7, #32]
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4603      	mov	r3, r0
 800340a:	4808      	ldr	r0, [pc, #32]	; (800342c <I2C1_ReadBuffer+0x50>)
 800340c:	f002 f92c 	bl	8005668 <HAL_I2C_Mem_Read>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif

  /* Check the communication status */
  if(status != HAL_OK)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C1_ReadBuffer+0x42>
  {
    /* Re-Initiaize the BUS */
    I2C1_Error();
 800341a:	f000 f809 	bl	8003430 <I2C1_Error>
  }

  return status;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000090 	.word	0x20000090
 800342c:	2000995c 	.word	0x2000995c

08003430 <I2C1_Error>:
/**
  * @brief Discovery I2C1 error treatment function
  * @retval None
  */
static void I2C1_Error(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
  uint32_t tmpI2cUsers;

  BSP_ErrorHandler();
 8003436:	f7ff fdcb 	bl	8002fd0 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  tmpI2cUsers = v_bspI2cUsers;
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <I2C1_Error+0x24>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	607b      	str	r3, [r7, #4]
  I2C1_DeInit(BSP_I2C_ALL_USERS);
 8003440:	200f      	movs	r0, #15
 8003442:	f7ff fef7 	bl	8003234 <I2C1_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C1_Init(tmpI2cUsers);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe4a 	bl	80030e0 <I2C1_Init>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20009a04 	.word	0x20009a04

08003458 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f002 fb22 	bl	8005aaa <HAL_I2C_GetState>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11e      	bne.n	80034aa <I2Cx_Init+0x52>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <I2Cx_Init+0x5c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <I2Cx_Init+0x22>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <I2Cx_Init+0x60>)
 8003478:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <I2Cx_Init+0x64>)
 800347e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = CAMERA_I2C_ADDRESS;  /* 0x78 */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2278      	movs	r2, #120	; 0x78
 8003484:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f001 ff0d 	bl	80052c4 <HAL_I2C_Init>

  }

}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200099b0 	.word	0x200099b0
 80034b8:	40008400 	.word	0x40008400
 80034bc:	40505681 	.word	0x40505681

080034c0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	72fb      	strb	r3, [r7, #11]
 80034d2:	460b      	mov	r3, r1
 80034d4:	813b      	strh	r3, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	b299      	uxth	r1, r3
 80034e2:	88f8      	ldrh	r0, [r7, #6]
 80034e4:	893a      	ldrh	r2, [r7, #8]
 80034e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4603      	mov	r3, r0
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f002 f8b6 	bl	8005668 <HAL_I2C_Mem_Read>
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003506:	7afb      	ldrb	r3, [r7, #11]
 8003508:	4619      	mov	r1, r3
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f832 	bl	8003574 <I2Cx_Error>
  }
  return status;
 8003510:	7dfb      	ldrb	r3, [r7, #23]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b08a      	sub	sp, #40	; 0x28
 800351e:	af04      	add	r7, sp, #16
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	4608      	mov	r0, r1
 8003524:	4611      	mov	r1, r2
 8003526:	461a      	mov	r2, r3
 8003528:	4603      	mov	r3, r0
 800352a:	72fb      	strb	r3, [r7, #11]
 800352c:	460b      	mov	r3, r1
 800352e:	813b      	strh	r3, [r7, #8]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003538:	7afb      	ldrb	r3, [r7, #11]
 800353a:	b299      	uxth	r1, r3
 800353c:	88f8      	ldrh	r0, [r7, #6]
 800353e:	893a      	ldrh	r2, [r7, #8]
 8003540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f001 ff75 	bl	8005440 <HAL_I2C_Mem_Write>
 8003556:	4603      	mov	r3, r0
 8003558:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	4619      	mov	r1, r3
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f805 	bl	8003574 <I2Cx_Error>
  }
  return status;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 8003580:	f7ff fd26 	bl	8002fd0 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f001 ff2c 	bl	80053e2 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff64 	bl	8003458 <I2Cx_Init>
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* I2C1 init */
  I2C1_Init(BSP_I2C_MFX_USER);
 800359c:	2004      	movs	r0, #4
 800359e:	f7ff fd9f 	bl	80030e0 <I2C1_Init>

  /* Wait for device ready */
  if(I2C1_isDeviceReady(IO_I2C_ADDRESS, 4) != HAL_OK)
 80035a2:	2104      	movs	r1, #4
 80035a4:	2084      	movs	r0, #132	; 0x84
 80035a6:	f7ff fefd 	bl	80033a4 <I2C1_isDeviceReady>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MFX_IO_Init+0x1c>
  {
     BSP_ErrorHandler();
 80035b0:	f7ff fd0e 	bl	8002fd0 <BSP_ErrorHandler>
  }
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <MFX_IO_DeInit+0x70>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	4a19      	ldr	r2, [pc, #100]	; (8003628 <MFX_IO_DeInit+0x70>)
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <MFX_IO_DeInit+0x70>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80035d6:	2320      	movs	r3, #32
 80035d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80035e2:	2302      	movs	r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	4619      	mov	r1, r3
 80035ec:	480f      	ldr	r0, [pc, #60]	; (800362c <MFX_IO_DeInit+0x74>)
 80035ee:	f001 fbcd 	bl	8004d8c <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80035f2:	2006      	movs	r0, #6
 80035f4:	f000 fcf1 	bl	8003fda <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MFX_IO_DeInit+0x70>)
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <MFX_IO_DeInit+0x70>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MFX_IO_DeInit+0x70>)
 8003606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8003610:	2101      	movs	r1, #1
 8003612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003616:	f001 fd4b 	bl	80050b0 <HAL_GPIO_DeInit>

  /* I2C1 Deinit */
  I2C1_DeInit(BSP_I2C_MFX_USER);
 800361a:	2004      	movs	r0, #4
 800361c:	f7ff fe0a 	bl	8003234 <I2C1_DeInit>
}
 8003620:	bf00      	nop
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	48001400 	.word	0x48001400

08003630 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <MFX_IO_ITConfig+0x54>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <MFX_IO_ITConfig+0x54>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <MFX_IO_ITConfig+0x54>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 800364e:	2301      	movs	r3, #1
 8003650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800365a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800365e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	4619      	mov	r1, r3
 8003664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003668:	f001 fb90 	bl	8004d8c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800366c:	220f      	movs	r2, #15
 800366e:	210f      	movs	r1, #15
 8003670:	2006      	movs	r0, #6
 8003672:	f000 fc88 	bl	8003f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8003676:	2006      	movs	r0, #6
 8003678:	f000 fca1 	bl	8003fbe <HAL_NVIC_EnableIRQ>
}
 800367c:	bf00      	nop
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000

08003688 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <MFX_IO_EnableWakeupPin+0x40>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <MFX_IO_EnableWakeupPin+0x40>)
 8003694:	f043 0320 	orr.w	r3, r3, #32
 8003698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <MFX_IO_EnableWakeupPin+0x40>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80036a6:	2320      	movs	r3, #32
 80036a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ae:	2302      	movs	r3, #2
 80036b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4804      	ldr	r0, [pc, #16]	; (80036cc <MFX_IO_EnableWakeupPin+0x44>)
 80036bc:	f001 fb66 	bl	8004d8c <HAL_GPIO_Init>
}
 80036c0:	bf00      	nop
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48001400 	.word	0x48001400

080036d0 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80036d4:	2201      	movs	r2, #1
 80036d6:	2120      	movs	r1, #32
 80036d8:	4806      	ldr	r0, [pc, #24]	; (80036f4 <MFX_IO_Wakeup+0x24>)
 80036da:	f001 fddb 	bl	8005294 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80036de:	2001      	movs	r0, #1
 80036e0:	f000 fb2e 	bl	8003d40 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2120      	movs	r1, #32
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <MFX_IO_Wakeup+0x24>)
 80036ea:	f001 fdd3 	bl	8005294 <HAL_GPIO_WritePin>
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	48001400 	.word	0x48001400

080036f8 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	80fb      	strh	r3, [r7, #6]
 8003702:	460b      	mov	r3, r1
 8003704:	717b      	strb	r3, [r7, #5]
 8003706:	4613      	mov	r3, r2
 8003708:	713b      	strb	r3, [r7, #4]
  I2C1_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800370a:	797b      	ldrb	r3, [r7, #5]
 800370c:	b299      	uxth	r1, r3
 800370e:	793b      	ldrb	r3, [r7, #4]
 8003710:	88f8      	ldrh	r0, [r7, #6]
 8003712:	2201      	movs	r2, #1
 8003714:	f7ff fde6 	bl	80032e4 <I2C1_WriteData>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	460a      	mov	r2, r1
 800372a:	80fb      	strh	r3, [r7, #6]
 800372c:	4613      	mov	r3, r2
 800372e:	717b      	strb	r3, [r7, #5]
  return I2C1_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8003730:	797b      	ldrb	r3, [r7, #5]
 8003732:	b299      	uxth	r1, r3
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	2201      	movs	r2, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fe01 	bl	8003340 <I2C1_ReadData>
 800373e:	4603      	mov	r3, r0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	60ba      	str	r2, [r7, #8]
 8003750:	461a      	mov	r2, r3
 8003752:	4603      	mov	r3, r0
 8003754:	81fb      	strh	r3, [r7, #14]
 8003756:	460b      	mov	r3, r1
 8003758:	737b      	strb	r3, [r7, #13]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
 return I2C1_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800375e:	7b7b      	ldrb	r3, [r7, #13]
 8003760:	b299      	uxth	r1, r3
 8003762:	89f8      	ldrh	r0, [r7, #14]
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2201      	movs	r2, #1
 800376c:	f7ff fe36 	bl	80033dc <I2C1_ReadBuffer>
 8003770:	4603      	mov	r3, r0
 8003772:	b29b      	uxth	r3, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fadb 	bl	8003d40 <HAL_Delay>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <CAMERA_IO_Init>:
/**
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cCameraHandler);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <CAMERA_IO_Init+0x10>)
 800379a:	f7ff fe5d 	bl	8003458 <I2Cx_Init>
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200099b0 	.word	0x200099b0

080037a8 <CAMERA_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint16_t DeviceAddr, uint16_t Reg, uint8_t value)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
 80037b2:	460b      	mov	r3, r1
 80037b4:	80bb      	strh	r3, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	70fb      	strb	r3, [r7, #3]
  I2Cx_WriteMultiple(&hI2cCameraHandler, DeviceAddr, (uint16_t)Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&value, 1);
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	b2d9      	uxtb	r1, r3
 80037be:	88ba      	ldrh	r2, [r7, #4]
 80037c0:	2301      	movs	r3, #1
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	1cfb      	adds	r3, r7, #3
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2302      	movs	r3, #2
 80037ca:	4803      	ldr	r0, [pc, #12]	; (80037d8 <CAMERA_IO_Write+0x30>)
 80037cc:	f7ff fea5 	bl	800351a <I2Cx_WriteMultiple>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	200099b0 	.word	0x200099b0

080037dc <CAMERA_IO_Read>:
  * @param  DeviceAddr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint16_t DeviceAddr, uint16_t Reg)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	4603      	mov	r3, r0
 80037e4:	460a      	mov	r2, r1
 80037e6:	80fb      	strh	r3, [r7, #6]
 80037e8:	4613      	mov	r3, r2
 80037ea:	80bb      	strh	r3, [r7, #4]
  uint8_t read_value = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
  I2Cx_ReadMultiple(&hI2cCameraHandler, DeviceAddr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 1);
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	b2d9      	uxtb	r1, r3
 80037f4:	88ba      	ldrh	r2, [r7, #4]
 80037f6:	2301      	movs	r3, #1
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	f107 030f 	add.w	r3, r7, #15
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2302      	movs	r3, #2
 8003802:	4804      	ldr	r0, [pc, #16]	; (8003814 <CAMERA_IO_Read+0x38>)
 8003804:	f7ff fe5c 	bl	80034c0 <I2Cx_ReadMultiple>
  return read_value;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200099b0 	.word	0x200099b0

08003818 <CAMERA_Delay>:
  * @brief  Camera delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void CAMERA_Delay(uint32_t Delay)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa8d 	bl	8003d40 <HAL_Delay>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af02      	add	r7, sp, #8
 8003836:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]

  /* Get the DCMI handle structure */
  phdcmi = &hDcmiHandler;
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <BSP_CAMERA_Init+0xe4>)
 800383e:	60bb      	str	r3, [r7, #8]


  /* Initialize the IO functionalities */
  BSP_IO_Init();
 8003840:	f000 f98c 	bl	8003b5c <BSP_IO_Init>


  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	611a      	str	r2, [r3, #16]
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	605a      	str	r2, [r3, #4]
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	60da      	str	r2, [r3, #12]
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	619a      	str	r2, [r3, #24]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2220      	movs	r2, #32
 8003866:	609a      	str	r2, [r3, #8]
  phdcmi->Init.ByteSelectMode   = DCMI_BSM_ALL;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
  phdcmi->Init.LineSelectMode   = DCMI_LSM_ALL;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2200      	movs	r2, #0
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
  phdcmi->Instance              = DCMI;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <BSP_CAMERA_Init+0xe8>)
 8003878:	601a      	str	r2, [r3, #0]

  /* Camera initialization */
  BSP_CAMERA_MspInit(&hDcmiHandler, NULL);
 800387a:	2100      	movs	r1, #0
 800387c:	4825      	ldr	r0, [pc, #148]	; (8003914 <BSP_CAMERA_Init+0xe4>)
 800387e:	f000 f855 	bl	800392c <BSP_CAMERA_MspInit>

  /* Read ID of Camera module via I2C */
  if (ov5640_ReadID(CAMERA_I2C_ADDRESS) == OV5640_ID)
 8003882:	2078      	movs	r0, #120	; 0x78
 8003884:	f7ff fae1 	bl	8002e4a <ov5640_ReadID>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	f245 6340 	movw	r3, #22080	; 0x5640
 8003890:	429a      	cmp	r2, r3
 8003892:	d137      	bne.n	8003904 <BSP_CAMERA_Init+0xd4>
  {
    /* Initialize the camera driver structure */
    camera_drv = &ov5640_drv;
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <BSP_CAMERA_Init+0xec>)
 8003896:	4a22      	ldr	r2, [pc, #136]	; (8003920 <BSP_CAMERA_Init+0xf0>)
 8003898:	601a      	str	r2, [r3, #0]
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <BSP_CAMERA_Init+0xf4>)
 800389c:	2278      	movs	r2, #120	; 0x78
 800389e:	601a      	str	r2, [r3, #0]

    /* DCMI Initialization */
    HAL_DCMI_Init(phdcmi);
 80038a0:	68b8      	ldr	r0, [r7, #8]
 80038a2:	f000 fbb5 	bl	8004010 <HAL_DCMI_Init>

    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R320x240)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d119      	bne.n	80038e0 <BSP_CAMERA_Init+0xb0>
    {
      /* For 240x240 resolution, the OV5640 sensor is set to QVGA resolution
       * as OV5640 doesn't supports 240x240  resolution,
       * then DCMI is configured to output a 240x240 cropped window */
      camera_drv->Init(CameraHwAddress, CAMERA_R320x240);
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <BSP_CAMERA_Init+0xec>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <BSP_CAMERA_Init+0xf4>)
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	b292      	uxth	r2, r2
 80038b8:	2101      	movs	r1, #1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4798      	blx	r3


      HAL_DCMI_ConfigCROP(phdcmi,
 80038be:	23ef      	movs	r3, #239	; 0xef
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f240 13df 	movw	r3, #479	; 0x1df
 80038c6:	2200      	movs	r2, #0
 80038c8:	2128      	movs	r1, #40	; 0x28
 80038ca:	68b8      	ldr	r0, [r7, #8]
 80038cc:	f000 fd74 	bl	80043b8 <HAL_DCMI_ConfigCrop>
                          40,                /* Crop in the middle of the QVGA picture */
                          0,                 /* Same height (same number of lines: no need to crop vertically) */
                          (240 * 2) - 1,     /* 2 pixels clock needed to capture one pixel */
                          (240 * 1) - 1);    /* All 240 lines are captured */
      HAL_DCMI_EnableCROP(phdcmi);
 80038d0:	68b8      	ldr	r0, [r7, #8]
 80038d2:	f000 fddd 	bl	8004490 <HAL_DCMI_EnableCrop>
//      /* Set the RGB565 mode */
//      MFX_IO_Write(CameraHwAddress, 0x12 /*OV5640_COM7*/, 0x63);
//      MFX_IO_Write(CameraHwAddress, 0x40 /*OV5640_COM15*/, 0x10);
//      /* Invert the HRef signal */
//      MFX_IO_Write(CameraHwAddress, 0x15 /*OV5640_COM10*/, 0x08);
      HAL_Delay(500);
 80038d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038da:	f000 fa31 	bl	8003d40 <HAL_Delay>
 80038de:	e00b      	b.n	80038f8 <BSP_CAMERA_Init+0xc8>
//      MFX_IO_Write(CameraHwAddress, 0x15 /*OV5640_COM10*/, 0x08);
//      HAL_Delay(500);
//    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <BSP_CAMERA_Init+0xec>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <BSP_CAMERA_Init+0xf4>)
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	b292      	uxth	r2, r2
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4610      	mov	r0, r2
 80038f0:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 80038f2:	68b8      	ldr	r0, [r7, #8]
 80038f4:	f000 fda2 	bl	800443c <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <BSP_CAMERA_Init+0xf8>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]

    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e001      	b.n	8003908 <BSP_CAMERA_Init+0xd8>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 8003904:	2304      	movs	r3, #4
 8003906:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20009a08 	.word	0x20009a08
 8003918:	50050000 	.word	0x50050000
 800391c:	20009a6c 	.word	0x20009a6c
 8003920:	2000007c 	.word	0x2000007c
 8003924:	20009a74 	.word	0x20009a74
 8003928:	20009a70 	.word	0x20009a70

0800392c <BSP_CAMERA_MspInit>:
  * @param  hdcmi: HDMI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_CAMERA_MspInit(DCMI_HandleTypeDef *hdcmi, void *Params)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08e      	sub	sp, #56	; 0x38
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef GPIO_InitStruct;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 8003936:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003942:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800394e:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	4a5d      	ldr	r2, [pc, #372]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	6493      	str	r3, [r2, #72]	; 0x48
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 800395c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003972:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800397e:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003984:	f043 0310 	orr.w	r3, r3, #16
 8003988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800398a:	4b4f      	ldr	r3, [pc, #316]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003996:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399a:	4a4b      	ldr	r2, [pc, #300]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a2:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80039ae:	4b46      	ldr	r3, [pc, #280]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	4a45      	ldr	r2, [pc, #276]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 80039c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039ca:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80039ce:	2000      	movs	r0, #0
 80039d0:	f003 fa42 	bl	8006e58 <HAL_RCC_MCOConfig>
  __HAL_RCC_HSI48_ENABLE();
 80039d4:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 80039d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039da:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <BSP_CAMERA_MspInit+0x19c>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  HAL_Delay(10); // HSI48 should start in 10ms
 80039e4:	200a      	movs	r0, #10
 80039e6:	f000 f9ab 	bl	8003d40 <HAL_Delay>
    PI5     ------> DCMI_VSYNC
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D2_Pin;
 80039ea:	2301      	movs	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80039fa:	230a      	movs	r3, #10
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D2_GPIO_Port, &GPIO_InitStruct);
 80039fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a02:	4619      	mov	r1, r3
 8003a04:	4831      	ldr	r0, [pc, #196]	; (8003acc <BSP_CAMERA_MspInit+0x1a0>)
 8003a06:	f001 f9c1 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCLK_Pin
 8003a0a:	f245 7320 	movw	r3, #22304	; 0x5720
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8003a1c:	230a      	movs	r3, #10
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a24:	4619      	mov	r1, r3
 8003a26:	482a      	ldr	r0, [pc, #168]	; (8003ad0 <BSP_CAMERA_MspInit+0x1a4>)
 8003a28:	f001 f9b0 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D6_Pin|DCMI_D10_Pin|DCMI_D5_Pin
 8003a2c:	23f8      	movs	r3, #248	; 0xf8
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_VSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8003a3c:	230a      	movs	r3, #10
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a44:	4619      	mov	r1, r3
 8003a46:	4823      	ldr	r0, [pc, #140]	; (8003ad4 <BSP_CAMERA_MspInit+0x1a8>)
 8003a48:	f001 f9a0 	bl	8004d8c <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Instance                 = BSP_CAMERA_DMA_INSTANCE;
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a4e:	4a23      	ldr	r2, [pc, #140]	; (8003adc <BSP_CAMERA_MspInit+0x1b0>)
 8003a50:	601a      	str	r2, [r3, #0]

  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8003a52:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a54:	225b      	movs	r2, #91	; 0x5b
 8003a56:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;      /* Image captured by the DCMI is stored in memory */
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD; /* DMA_MDATAALIGN_WORD; */
 8003a72:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a78:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8003a7a:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a86:	621a      	str	r2, [r3, #32]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a8c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <BSP_CAMERA_MspInit+0x1ac>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6293      	str	r3, [r2, #40]	; 0x28

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	210f      	movs	r1, #15
 8003a98:	2055      	movs	r0, #85	; 0x55
 8003a9a:	f000 fa74 	bl	8003f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003a9e:	2055      	movs	r0, #85	; 0x55
 8003aa0:	f000 fa8d 	bl	8003fbe <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0x0F, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	210f      	movs	r1, #15
 8003aa8:	2044      	movs	r0, #68	; 0x44
 8003aaa:	f000 fa6c 	bl	8003f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003aae:	2044      	movs	r0, #68	; 0x44
 8003ab0:	f000 fa85 	bl	8003fbe <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fe95 	bl	80047e8 <HAL_DMA_Init>
}
 8003abe:	bf00      	nop
 8003ac0:	3738      	adds	r7, #56	; 0x38
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	48001000 	.word	0x48001000
 8003ad0:	48001c00 	.word	0x48001c00
 8003ad4:	48002000 	.word	0x48002000
 8003ad8:	20009a78 	.word	0x20009a78
 8003adc:	4002046c 	.word	0x4002046c

08003ae0 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 8003ae8:	f000 f804 	bl	8003af4 <BSP_CAMERA_LineEventCallback>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 8003b0a:	f000 f804 	bl	8003b16 <BSP_CAMERA_VsyncEventCallback>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_FrameEventCallback();
 8003b2c:	f7fc ff8c 	bl	8000a48 <BSP_CAMERA_FrameEventCallback>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8003b40:	f000 f804 	bl	8003b4c <BSP_CAMERA_ErrorCallback>
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
  uint8_t ret = IO_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	71bb      	strb	r3, [r7, #6]

  if (io_driver == NULL) /* Checks if MFX initialization has been already done */
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <BSP_IO_Init+0x78>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d12b      	bne.n	8003bca <BSP_IO_Init+0x6e>
  {
    mfxstm32l152_idd_drv.WakeUp(IO_I2C_ADDRESS);
 8003b72:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <BSP_IO_Init+0x7c>)
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2084      	movs	r0, #132	; 0x84
 8003b78:	4798      	blx	r3

    HAL_Delay(10);
 8003b7a:	200a      	movs	r0, #10
 8003b7c:	f000 f8e0 	bl	8003d40 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO_I2C_ADDRESS);
 8003b80:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <BSP_IO_Init+0x80>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2084      	movs	r0, #132	; 0x84
 8003b86:	4798      	blx	r3
 8003b88:	4603      	mov	r3, r0
 8003b8a:	71bb      	strb	r3, [r7, #6]

    if((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8003b8c:	79bb      	ldrb	r3, [r7, #6]
 8003b8e:	2b7b      	cmp	r3, #123	; 0x7b
 8003b90:	d002      	beq.n	8003b98 <BSP_IO_Init+0x3c>
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	2b79      	cmp	r3, #121	; 0x79
 8003b96:	d116      	bne.n	8003bc6 <BSP_IO_Init+0x6a>
    {
      /* Initialize the MFX */
      io_driver = &mfxstm32l152_io_drv;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <BSP_IO_Init+0x78>)
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <BSP_IO_Init+0x80>)
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if(io_driver->Init != NULL)
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <BSP_IO_Init+0x78>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <BSP_IO_Init+0x64>
      {
        io_driver->Init(IO_I2C_ADDRESS);
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <BSP_IO_Init+0x78>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2084      	movs	r0, #132	; 0x84
 8003bb0:	4798      	blx	r3
        io_driver->Start(IO_I2C_ADDRESS, IO_PIN_ALL);
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <BSP_IO_Init+0x78>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4909      	ldr	r1, [pc, #36]	; (8003be0 <BSP_IO_Init+0x84>)
 8003bba:	2084      	movs	r0, #132	; 0x84
 8003bbc:	4798      	blx	r3
      if(io_driver->Init != NULL)
 8003bbe:	e004      	b.n	8003bca <BSP_IO_Init+0x6e>
      }
      else
      {
        ret = IO_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	71fb      	strb	r3, [r7, #7]
      if(io_driver->Init != NULL)
 8003bc4:	e001      	b.n	8003bca <BSP_IO_Init+0x6e>
      }
    }
    else
    {
      ret = IO_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	71fb      	strb	r3, [r7, #7]
  else
  {
    /* MFX initialization already done : do nothing */
  }

  return ret;
 8003bca:	79fb      	ldrb	r3, [r7, #7]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20009ad8 	.word	0x20009ad8
 8003bd8:	20000030 	.word	0x20000030
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	0003ffff 	.word	0x0003ffff

08003be4 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  /* Configure the selected IO pin(s) mode */
  io_driver->Config(IO_I2C_ADDRESS, IO_Pin, IO_Mode);
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <BSP_IO_ConfigPin+0x24>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	2084      	movs	r0, #132	; 0x84
 8003bfc:	4798      	blx	r3

  return IO_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20009ad8 	.word	0x20009ad8

08003c0c <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pin(s).
  * @param  PinState: New pin state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  /* Set the IO pin(s) state */
  io_driver->WritePin(IO_I2C_ADDRESS, IO_Pin, PinState);
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <BSP_IO_WritePin+0x24>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	2084      	movs	r0, #132	; 0x84
 8003c24:	4798      	blx	r3
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20009ad8 	.word	0x20009ad8

08003c34 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pin(s) to read.
  *          This parameter can be any combination of the IO pin(s).
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return(io_driver->ReadPin(IO_I2C_ADDRESS, IO_Pin));
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <BSP_IO_ReadPin+0x20>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	2084      	movs	r0, #132	; 0x84
 8003c46:	4798      	blx	r3
 8003c48:	4603      	mov	r3, r0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20009ad8 	.word	0x20009ad8

08003c58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c62:	2003      	movs	r0, #3
 8003c64:	f000 f984 	bl	8003f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f000 f80d 	bl	8003c88 <HAL_InitTick>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	71fb      	strb	r3, [r7, #7]
 8003c78:	e001      	b.n	8003c7e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c7a:	f7fc ff05 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_InitTick+0x6c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c9c:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <HAL_InitTick+0x70>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_InitTick+0x6c>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f99f 	bl	8003ff6 <HAL_SYSTICK_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d809      	bhi.n	8003cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f000 f95b 	bl	8003f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_InitTick+0x74>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e007      	b.n	8003ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e004      	b.n	8003ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e001      	b.n	8003ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000098 	.word	0x20000098
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000094 	.word	0x20000094

08003d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_IncTick+0x20>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_IncTick+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <HAL_IncTick+0x24>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000098 	.word	0x20000098
 8003d24:	20009adc 	.word	0x20009adc

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20009adc 	.word	0x20009adc

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff ffee 	bl	8003d28 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_Delay+0x44>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffde 	bl	8003d28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000098 	.word	0x20000098

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4907      	ldr	r1, [pc, #28]	; (8003e24 <__NVIC_EnableIRQ+0x38>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	e000e100 	.word	0xe000e100

08003e28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db12      	blt.n	8003e60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	490a      	ldr	r1, [pc, #40]	; (8003e6c <__NVIC_DisableIRQ+0x44>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2001      	movs	r0, #1
 8003e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4e:	3320      	adds	r3, #32
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e54:	f3bf 8f4f 	dsb	sy
}
 8003e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e5a:	f3bf 8f6f 	isb	sy
}
 8003e5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	db0a      	blt.n	8003e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	490c      	ldr	r1, [pc, #48]	; (8003ebc <__NVIC_SetPriority+0x4c>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	440b      	add	r3, r1
 8003e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e98:	e00a      	b.n	8003eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4908      	ldr	r1, [pc, #32]	; (8003ec0 <__NVIC_SetPriority+0x50>)
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	3b04      	subs	r3, #4
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	440b      	add	r3, r1
 8003eae:	761a      	strb	r2, [r3, #24]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000e100 	.word	0xe000e100
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf28      	it	cs
 8003ee2:	2304      	movcs	r3, #4
 8003ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d902      	bls.n	8003ef4 <NVIC_EncodePriority+0x30>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	e000      	b.n	8003ef6 <NVIC_EncodePriority+0x32>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43d9      	mvns	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f1c:	4313      	orrs	r3, r2
         );
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3c:	d301      	bcc.n	8003f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e00f      	b.n	8003f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <SysTick_Config+0x40>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f4a:	210f      	movs	r1, #15
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	f7ff ff8e 	bl	8003e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <SysTick_Config+0x40>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <SysTick_Config+0x40>)
 8003f5c:	2207      	movs	r2, #7
 8003f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	e000e010 	.word	0xe000e010

08003f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff05 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f98:	f7ff ff1a 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7ff ff8e 	bl	8003ec4 <NVIC_EncodePriority>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff5d 	bl	8003e70 <__NVIC_SetPriority>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff0d 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff1d 	bl	8003e28 <__NVIC_DisableIRQ>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ff94 	bl	8003f2c <SysTick_Config>
 8004004:	4603      	mov	r3, r0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e075      	b.n	800410e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fd4a 	bl	8000ad0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004052:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6819      	ldr	r1, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_DCMI_Init+0x108>)
 800406e:	400b      	ands	r3, r1
 8004070:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004086:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004092:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800409e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80040aa:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80040b6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d112      	bne.n	80040ee <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7f1b      	ldrb	r3, [r3, #28]
 80040cc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7f5b      	ldrb	r3, [r3, #29]
 80040d2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80040d4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	7f9b      	ldrb	r3, [r3, #30]
 80040da:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80040dc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7fdb      	ldrb	r3, [r3, #31]
 80040e4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80040ea:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80040ec:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 021f 	orr.w	r2, r2, #31
 80040fc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	ffe0f007 	.word	0xffe0f007

0800411c <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_DCMI_Start_DMA+0x1c>
 8004134:	2302      	movs	r3, #2
 8004136:	e0b8      	b.n	80042aa <HAL_DCMI_Start_DMA+0x18e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004152:	f023 0302 	bic.w	r3, r3, #2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004162:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	4a52      	ldr	r2, [pc, #328]	; (80042b4 <HAL_DCMI_Start_DMA+0x198>)
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	4a51      	ldr	r2, [pc, #324]	; (80042b8 <HAL_DCMI_Start_DMA+0x19c>)
 8004172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	2200      	movs	r2, #0
 800417a:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d21f      	bcs.n	80041c4 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3328      	adds	r3, #40	; 0x28
 8004194:	4619      	mov	r1, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	f000 fbcd 	bl	8004938 <HAL_DMA_Start_IT>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d075      	beq.n	8004290 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e072      	b.n	80042aa <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c8:	2220      	movs	r2, #32
 80041ca:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	4a3a      	ldr	r2, [pc, #232]	; (80042bc <HAL_DCMI_Start_DMA+0x1a0>)
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 80041e0:	6838      	ldr	r0, [r7, #0]
 80041e2:	f000 fa7b 	bl	80046dc <DCMI_TransferSize>
 80041e6:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e053      	b.n	80042aa <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	085a      	lsrs	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	fbb1 f3f3 	udiv	r3, r1, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	6979      	ldr	r1, [r7, #20]
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3328      	adds	r3, #40	; 0x28
 800425e:	4619      	mov	r1, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f000 fb67 	bl	8004938 <HAL_DMA_Start_IT>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00f      	beq.n	8004290 <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e00c      	b.n	80042aa <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	080044e5 	.word	0x080044e5
 80042b8:	080046ad 	.word	0x080046ad
 80042bc:	08004615 	.word	0x08004615

080042c0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2204      	movs	r2, #4
 80042e0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	f043 0202 	orr.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2202      	movs	r2, #2
 80042fe:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	2b00      	cmp	r3, #0
 8004312:	d014      	beq.n	800433e <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <HAL_DCMI_IRQHandler+0xf4>)
 8004322:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fb80 	bl	8004a2e <HAL_DMA_Abort_IT>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f9b7 	bl	80046ac <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d006      	beq.n	8004356 <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2210      	movs	r2, #16
 800434e:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fbc5 	bl	8003ae0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fbca 	bl	8003b02 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d019      	beq.n	80043ac <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d10b      	bne.n	800439e <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 021e 	bic.w	r2, r2, #30
 8004394:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fbbc 	bl	8003b24 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	080046ad 	.word	0x080046ad

080043b8 <HAL_DCMI_ConfigCrop>:
  * @note For all the parameters, the actual value is the input data + 1 (e.g. YSize = 0x0 means 1 line,
  *       YSize = 0x1 means 2 lines, ...)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_DCMI_ConfigCrop+0x1c>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e02a      	b.n	800442a <HAL_DCMI_ConfigCrop+0x72>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure CROP */
  MODIFY_REG(hdcmi->Instance->CWSIZER, (DCMI_CWSIZE_VLINE|DCMI_CWSIZE_CAPCNT), (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos)));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 21c0 	and.w	r1, r3, #3221274624	; 0xc000c000
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
  MODIFY_REG(hdcmi->Instance->CWSTRTR, (DCMI_CWSTRT_VST|DCMI_CWSTRT_HOFFCNT), (X0 | (Y0 << DCMI_CWSTRT_VST_Pos)));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_DCMI_ConfigCrop+0x80>)
 8004406:	4013      	ands	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	0411      	lsls	r1, r2, #16
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	4311      	orrs	r1, r2
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6213      	str	r3, [r2, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	e000c000 	.word	0xe000c000

0800443c <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_DCMI_DisableCrop+0x16>
 800444e:	2302      	movs	r3, #2
 8004450:	e018      	b.n	8004484 <HAL_DCMI_DisableCrop+0x48>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_DCMI_EnableCrop+0x16>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e018      	b.n	80044d8 <HAL_DCMI_EnableCrop+0x48>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI Crop feature */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0204 	orr.w	r2, r2, #4
 80044c4:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d05c      	beq.n	80045b4 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8004502:	4293      	cmp	r3, r2
 8004504:	d10c      	bne.n	8004520 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 800451e:	e075      	b.n	800460c <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454e:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d103      	bne.n	800457c <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f000 f9d7 	bl	8004938 <HAL_DMA_Start_IT>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d03d      	beq.n	800460c <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 80045ac:	69f8      	ldr	r0, [r7, #28]
 80045ae:	f7ff fac3 	bl	8003b38 <HAL_DCMI_ErrorCallback>
}
 80045b2:	e02b      	b.n	800460c <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d124      	bne.n	800460c <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01d      	beq.n	800460c <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2201      	movs	r2, #1
 80045d6:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d10f      	bne.n	8004606 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 021e 	bic.w	r2, r2, #30
 80045f4:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8004606:	69f8      	ldr	r0, [r7, #28]
 8004608:	f7ff fa8c 	bl	8003b24 <HAL_DCMI_FrameEventCallback>
}
 800460c:	bf00      	nop
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	2b00      	cmp	r3, #0
 8004628:	d03c      	beq.n	80046a4 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8004632:	4293      	cmp	r3, r2
 8004634:	d036      	beq.n	80046a4 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004672:	68f9      	ldr	r1, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f000 f95e 	bl	8004938 <HAL_DMA_Start_IT>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d010      	beq.n	80046a4 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f7ff fa4a 	bl	8003b38 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fa32 	bl	8003b38 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b096      	sub	sp, #88	; 0x58
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 80046e4:	2301      	movs	r3, #1
 80046e6:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 80046ec:	f107 030c 	add.w	r3, r7, #12
 80046f0:	2240      	movs	r2, #64	; 0x40
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f003 fe23 	bl	8008340 <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 80046fa:	2302      	movs	r3, #2
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 80046fe:	e02b      	b.n	8004758 <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 8004700:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <DCMI_TransferSize+0x108>)
 8004702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800470a:	429a      	cmp	r2, r3
 800470c:	d328      	bcc.n	8004760 <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 800470e:	e014      	b.n	800473a <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 8004710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	3358      	adds	r3, #88	; 0x58
 8004716:	443b      	add	r3, r7
 8004718:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3358      	adds	r3, #88	; 0x58
 8004724:	443b      	add	r3, r7
 8004726:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 800472a:	4a2e      	ldr	r2, [pc, #184]	; (80047e4 <DCMI_TransferSize+0x108>)
 800472c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004732:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 800473a:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <DCMI_TransferSize+0x108>)
 800473c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004744:	fbb3 f1f2 	udiv	r1, r3, r2
 8004748:	fb01 f202 	mul.w	r2, r1, r2
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0de      	beq.n	8004710 <DCMI_TransferSize+0x34>
    }
    j++;
 8004752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004754:	3301      	adds	r3, #1
 8004756:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 8004758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d9d0      	bls.n	8004700 <DCMI_TransferSize+0x24>
 800475e:	e000      	b.n	8004762 <DCMI_TransferSize+0x86>
      break;
 8004760:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3b01      	subs	r3, #1
 8004766:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8004768:	230f      	movs	r3, #15
 800476a:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 800476c:	e02c      	b.n	80047c8 <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <DCMI_TransferSize+0x108>)
 8004770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004780:	4293      	cmp	r3, r2
 8004782:	d81d      	bhi.n	80047c0 <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <DCMI_TransferSize+0x108>)
 8004786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	3358      	adds	r3, #88	; 0x58
 800479a:	443b      	add	r3, r7
 800479c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	3358      	adds	r3, #88	; 0x58
 80047a8:	443b      	add	r3, r7
 80047aa:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 80047ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	3358      	adds	r3, #88	; 0x58
 80047b4:	443b      	add	r3, r7
 80047b6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1d7      	bne.n	800476e <DCMI_TransferSize+0x92>
 80047be:	e000      	b.n	80047c2 <DCMI_TransferSize+0xe6>
        break;
 80047c0:	bf00      	nop
      }
    }
    j--;
 80047c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c4:	3b01      	subs	r3, #1
 80047c6:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80047c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <DCMI_TransferSize+0xfc>
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d9ea      	bls.n	80047ae <DCMI_TransferSize+0xd2>
  }



  return output;
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3758      	adds	r7, #88	; 0x58
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	080097c8 	.word	0x080097c8

080047e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e08d      	b.n	8004916 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_DMA_Init+0x138>)
 8004802:	429a      	cmp	r2, r3
 8004804:	d80f      	bhi.n	8004826 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	4b45      	ldr	r3, [pc, #276]	; (8004924 <HAL_DMA_Init+0x13c>)
 800480e:	4413      	add	r3, r2
 8004810:	4a45      	ldr	r2, [pc, #276]	; (8004928 <HAL_DMA_Init+0x140>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	009a      	lsls	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a42      	ldr	r2, [pc, #264]	; (800492c <HAL_DMA_Init+0x144>)
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
 8004824:	e00e      	b.n	8004844 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	4b40      	ldr	r3, [pc, #256]	; (8004930 <HAL_DMA_Init+0x148>)
 800482e:	4413      	add	r3, r2
 8004830:	4a3d      	ldr	r2, [pc, #244]	; (8004928 <HAL_DMA_Init+0x140>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	009a      	lsls	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <HAL_DMA_Init+0x14c>)
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa16 	bl	8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a4:	d102      	bne.n	80048ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048c0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d010      	beq.n	80048ec <HAL_DMA_Init+0x104>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d80c      	bhi.n	80048ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa36 	bl	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	e008      	b.n	80048fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40020407 	.word	0x40020407
 8004924:	bffdfff8 	.word	0xbffdfff8
 8004928:	cccccccd 	.word	0xcccccccd
 800492c:	40020000 	.word	0x40020000
 8004930:	bffdfbf8 	.word	0xbffdfbf8
 8004934:	40020400 	.word	0x40020400

08004938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_DMA_Start_IT+0x20>
 8004954:	2302      	movs	r3, #2
 8004956:	e066      	b.n	8004a26 <HAL_DMA_Start_IT+0xee>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d155      	bne.n	8004a18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f95a 	bl	8004c4a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 020e 	orr.w	r2, r2, #14
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e00f      	b.n	80049d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0204 	bic.w	r2, r2, #4
 80049be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 020a 	orr.w	r2, r2, #10
 80049ce:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ec:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a04:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e005      	b.n	8004a24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
 8004a22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d005      	beq.n	8004a52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
 8004a50:	e047      	b.n	8004ae2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 020e 	bic.w	r2, r2, #14
 8004a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f003 021c 	and.w	r2, r3, #28
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	2101      	movs	r1, #1
 8004a90:	fa01 f202 	lsl.w	r2, r1, r2
 8004a94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a9e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ac0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
    }
  }
  return status;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f003 031c 	and.w	r3, r3, #28
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d026      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x7a>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d021      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d107      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	f003 021c 	and.w	r2, r3, #28
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b52:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d071      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b64:	e06c      	b.n	8004c40 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f003 031c 	and.w	r3, r3, #28
 8004b6e:	2202      	movs	r2, #2
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02e      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0xec>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d029      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 020a 	bic.w	r2, r2, #10
 8004ba0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f003 021c 	and.w	r2, r3, #28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d038      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bd6:	e033      	b.n	8004c40 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	f003 031c 	and.w	r3, r3, #28
 8004be0:	2208      	movs	r2, #8
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02a      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x156>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d025      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 020e 	bic.w	r2, r2, #14
 8004c04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f003 021c 	and.w	r2, r3, #28
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2101      	movs	r1, #1
 8004c14:	fa01 f202 	lsl.w	r2, r1, r2
 8004c18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
}
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c60:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c72:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f003 021c 	and.w	r2, r3, #28
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f202 	lsl.w	r2, r1, r2
 8004c86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d108      	bne.n	8004caa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ca8:	e007      	b.n	8004cba <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	60da      	str	r2, [r3, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d80a      	bhi.n	8004cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ce8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6493      	str	r3, [r2, #72]	; 0x48
 8004cf0:	e007      	b.n	8004d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	009a      	lsls	r2, r3, #2
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004cfc:	4413      	add	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	3b08      	subs	r3, #8
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d18:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2201      	movs	r2, #1
 8004d22:	409a      	lsls	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d28:	bf00      	nop
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40020407 	.word	0x40020407
 8004d38:	4002081c 	.word	0x4002081c
 8004d3c:	cccccccd 	.word	0xcccccccd
 8004d40:	40020880 	.word	0x40020880

08004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d66:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2201      	movs	r2, #1
 8004d72:	409a      	lsls	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	1000823f 	.word	0x1000823f
 8004d88:	40020940 	.word	0x40020940

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d9a:	e166      	b.n	800506a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2101      	movs	r1, #1
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8158 	beq.w	8005064 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d005      	beq.n	8004dcc <HAL_GPIO_Init+0x40>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d130      	bne.n	8004e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e02:	2201      	movs	r2, #1
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 0201 	and.w	r2, r3, #1
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d017      	beq.n	8004e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2203      	movs	r2, #3
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d123      	bne.n	8004ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	08da      	lsrs	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3208      	adds	r2, #8
 8004e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4013      	ands	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	08da      	lsrs	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3208      	adds	r2, #8
 8004eb8:	6939      	ldr	r1, [r7, #16]
 8004eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0203 	and.w	r2, r3, #3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80b2 	beq.w	8005064 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <HAL_GPIO_Init+0x2fc>)
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	4a60      	ldr	r2, [pc, #384]	; (8005088 <HAL_GPIO_Init+0x2fc>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_GPIO_Init+0x2fc>)
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f18:	4a5c      	ldr	r2, [pc, #368]	; (800508c <HAL_GPIO_Init+0x300>)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	3302      	adds	r3, #2
 8004f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	220f      	movs	r2, #15
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f42:	d02b      	beq.n	8004f9c <HAL_GPIO_Init+0x210>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a52      	ldr	r2, [pc, #328]	; (8005090 <HAL_GPIO_Init+0x304>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d025      	beq.n	8004f98 <HAL_GPIO_Init+0x20c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a51      	ldr	r2, [pc, #324]	; (8005094 <HAL_GPIO_Init+0x308>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01f      	beq.n	8004f94 <HAL_GPIO_Init+0x208>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a50      	ldr	r2, [pc, #320]	; (8005098 <HAL_GPIO_Init+0x30c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d019      	beq.n	8004f90 <HAL_GPIO_Init+0x204>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a4f      	ldr	r2, [pc, #316]	; (800509c <HAL_GPIO_Init+0x310>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_GPIO_Init+0x200>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <HAL_GPIO_Init+0x314>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00d      	beq.n	8004f88 <HAL_GPIO_Init+0x1fc>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a4d      	ldr	r2, [pc, #308]	; (80050a4 <HAL_GPIO_Init+0x318>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <HAL_GPIO_Init+0x1f8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a4c      	ldr	r2, [pc, #304]	; (80050a8 <HAL_GPIO_Init+0x31c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_GPIO_Init+0x1f4>
 8004f7c:	2307      	movs	r3, #7
 8004f7e:	e00e      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f80:	2308      	movs	r3, #8
 8004f82:	e00c      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f84:	2306      	movs	r3, #6
 8004f86:	e00a      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f88:	2305      	movs	r3, #5
 8004f8a:	e008      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	e006      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f90:	2303      	movs	r3, #3
 8004f92:	e004      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e002      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	f002 0203 	and.w	r2, r2, #3
 8004fa4:	0092      	lsls	r2, r2, #2
 8004fa6:	4093      	lsls	r3, r2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fae:	4937      	ldr	r1, [pc, #220]	; (800508c <HAL_GPIO_Init+0x300>)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_GPIO_Init+0x320>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fe0:	4a32      	ldr	r2, [pc, #200]	; (80050ac <HAL_GPIO_Init+0x320>)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fe6:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_GPIO_Init+0x320>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800500a:	4a28      	ldr	r2, [pc, #160]	; (80050ac <HAL_GPIO_Init+0x320>)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005010:	4b26      	ldr	r3, [pc, #152]	; (80050ac <HAL_GPIO_Init+0x320>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	43db      	mvns	r3, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005034:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <HAL_GPIO_Init+0x320>)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <HAL_GPIO_Init+0x320>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800505e:	4a13      	ldr	r2, [pc, #76]	; (80050ac <HAL_GPIO_Init+0x320>)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f ae91 	bne.w	8004d9c <HAL_GPIO_Init+0x10>
  }
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40021000 	.word	0x40021000
 800508c:	40010000 	.word	0x40010000
 8005090:	48000400 	.word	0x48000400
 8005094:	48000800 	.word	0x48000800
 8005098:	48000c00 	.word	0x48000c00
 800509c:	48001000 	.word	0x48001000
 80050a0:	48001400 	.word	0x48001400
 80050a4:	48001800 	.word	0x48001800
 80050a8:	48001c00 	.word	0x48001c00
 80050ac:	40010400 	.word	0x40010400

080050b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80050be:	e0c9      	b.n	8005254 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050c0:	2201      	movs	r2, #1
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80bc 	beq.w	800524e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80050d6:	4a66      	ldr	r2, [pc, #408]	; (8005270 <HAL_GPIO_DeInit+0x1c0>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4013      	ands	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050fe:	d02b      	beq.n	8005158 <HAL_GPIO_DeInit+0xa8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_GPIO_DeInit+0x1c4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d025      	beq.n	8005154 <HAL_GPIO_DeInit+0xa4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a5b      	ldr	r2, [pc, #364]	; (8005278 <HAL_GPIO_DeInit+0x1c8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01f      	beq.n	8005150 <HAL_GPIO_DeInit+0xa0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a5a      	ldr	r2, [pc, #360]	; (800527c <HAL_GPIO_DeInit+0x1cc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d019      	beq.n	800514c <HAL_GPIO_DeInit+0x9c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a59      	ldr	r2, [pc, #356]	; (8005280 <HAL_GPIO_DeInit+0x1d0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_GPIO_DeInit+0x98>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_GPIO_DeInit+0x1d4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00d      	beq.n	8005144 <HAL_GPIO_DeInit+0x94>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a57      	ldr	r2, [pc, #348]	; (8005288 <HAL_GPIO_DeInit+0x1d8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <HAL_GPIO_DeInit+0x90>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a56      	ldr	r2, [pc, #344]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_GPIO_DeInit+0x8c>
 8005138:	2307      	movs	r3, #7
 800513a:	e00e      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 800513c:	2308      	movs	r3, #8
 800513e:	e00c      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 8005140:	2306      	movs	r3, #6
 8005142:	e00a      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 8005144:	2305      	movs	r3, #5
 8005146:	e008      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 8005148:	2304      	movs	r3, #4
 800514a:	e006      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 800514c:	2303      	movs	r3, #3
 800514e:	e004      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 8005150:	2302      	movs	r3, #2
 8005152:	e002      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <HAL_GPIO_DeInit+0xaa>
 8005158:	2300      	movs	r3, #0
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	f002 0203 	and.w	r2, r2, #3
 8005160:	0092      	lsls	r2, r2, #2
 8005162:	4093      	lsls	r3, r2
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	429a      	cmp	r2, r3
 8005168:	d132      	bne.n	80051d0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	43db      	mvns	r3, r3
 8005172:	4947      	ldr	r1, [pc, #284]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 8005174:	4013      	ands	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005178:	4b45      	ldr	r3, [pc, #276]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	43db      	mvns	r3, r3
 8005180:	4943      	ldr	r1, [pc, #268]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 8005182:	4013      	ands	r3, r2
 8005184:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005186:	4b42      	ldr	r3, [pc, #264]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	43db      	mvns	r3, r3
 800518e:	4940      	ldr	r1, [pc, #256]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 8005190:	4013      	ands	r3, r2
 8005192:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005194:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	493c      	ldr	r1, [pc, #240]	; (8005290 <HAL_GPIO_DeInit+0x1e0>)
 800519e:	4013      	ands	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	220f      	movs	r2, #15
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051b2:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <HAL_GPIO_DeInit+0x1c0>)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	3302      	adds	r3, #2
 80051ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	43da      	mvns	r2, r3
 80051c2:	482b      	ldr	r0, [pc, #172]	; (8005270 <HAL_GPIO_DeInit+0x1c0>)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	089b      	lsrs	r3, r3, #2
 80051c8:	400a      	ands	r2, r1
 80051ca:	3302      	adds	r3, #2
 80051cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	2103      	movs	r1, #3
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	08da      	lsrs	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3208      	adds	r2, #8
 80051ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	220f      	movs	r2, #15
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	08d2      	lsrs	r2, r2, #3
 8005204:	4019      	ands	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3208      	adds	r2, #8
 800520a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2103      	movs	r1, #3
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	401a      	ands	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	2101      	movs	r1, #1
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	fa01 f303 	lsl.w	r3, r1, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	401a      	ands	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	2103      	movs	r1, #3
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	43db      	mvns	r3, r3
 8005248:	401a      	ands	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3301      	adds	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af2f 	bne.w	80050c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40010000 	.word	0x40010000
 8005274:	48000400 	.word	0x48000400
 8005278:	48000800 	.word	0x48000800
 800527c:	48000c00 	.word	0x48000c00
 8005280:	48001000 	.word	0x48001000
 8005284:	48001400 	.word	0x48001400
 8005288:	48001800 	.word	0x48001800
 800528c:	48001c00 	.word	0x48001c00
 8005290:	40010400 	.word	0x40010400

08005294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a4:	787b      	ldrb	r3, [r7, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052b0:	e002      	b.n	80052b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e081      	b.n	80053da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fb fcaa 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	; 0x24
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005314:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005324:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e006      	b.n	800534c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800534a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d104      	bne.n	800535e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800536c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005370:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005380:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69d9      	ldr	r1, [r3, #28]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e021      	b.n	8005438 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fb fcd1 	bl	8000db4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b20      	cmp	r3, #32
 8005464:	f040 80f9 	bne.w	800565a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_I2C_Mem_Write+0x34>
 800546e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0ed      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2C_Mem_Write+0x4e>
 800548a:	2302      	movs	r3, #2
 800548c:	e0e6      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005496:	f7fe fc47 	bl	8003d28 <HAL_GetTick>
 800549a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2319      	movs	r3, #25
 80054a2:	2201      	movs	r2, #1
 80054a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fbd9 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0d1      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2221      	movs	r2, #33	; 0x21
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2240      	movs	r2, #64	; 0x40
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054e0:	88f8      	ldrh	r0, [r7, #6]
 80054e2:	893a      	ldrh	r2, [r7, #8]
 80054e4:	8979      	ldrh	r1, [r7, #10]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4603      	mov	r3, r0
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fae9 	bl	8005ac8 <I2C_RequestMemoryWrite>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0a9      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2bff      	cmp	r3, #255	; 0xff
 8005510:	d90e      	bls.n	8005530 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	b2da      	uxtb	r2, r3
 800551e:	8979      	ldrh	r1, [r7, #10]
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fd41 	bl	8005fb0 <I2C_TransferConfig>
 800552e:	e00f      	b.n	8005550 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553e:	b2da      	uxtb	r2, r3
 8005540:	8979      	ldrh	r1, [r7, #10]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fd30 	bl	8005fb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fbc3 	bl	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e07b      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d034      	beq.n	8005608 <HAL_I2C_Mem_Write+0x1c8>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d130      	bne.n	8005608 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2200      	movs	r2, #0
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fb55 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e04d      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2bff      	cmp	r3, #255	; 0xff
 80055c8:	d90e      	bls.n	80055e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	8979      	ldrh	r1, [r7, #10]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fce5 	bl	8005fb0 <I2C_TransferConfig>
 80055e6:	e00f      	b.n	8005608 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	8979      	ldrh	r1, [r7, #10]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fcd4 	bl	8005fb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d19e      	bne.n	8005550 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fba2 	bl	8005d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e01a      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2220      	movs	r2, #32
 800562c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <HAL_I2C_Mem_Write+0x224>)
 800563a:	400b      	ands	r3, r1
 800563c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e000      	b.n	800565c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800565a:	2302      	movs	r3, #2
  }
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	fe00e800 	.word	0xfe00e800

08005668 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4603      	mov	r3, r0
 8005678:	817b      	strh	r3, [r7, #10]
 800567a:	460b      	mov	r3, r1
 800567c:	813b      	strh	r3, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	f040 80fd 	bne.w	800588a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_I2C_Mem_Read+0x34>
 8005696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0f1      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_I2C_Mem_Read+0x4e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0ea      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056be:	f7fe fb33 	bl	8003d28 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2319      	movs	r3, #25
 80056ca:	2201      	movs	r2, #1
 80056cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fac5 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d5      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2222      	movs	r2, #34	; 0x22
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005708:	88f8      	ldrh	r0, [r7, #6]
 800570a:	893a      	ldrh	r2, [r7, #8]
 800570c:	8979      	ldrh	r1, [r7, #10]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4603      	mov	r3, r0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa29 	bl	8005b70 <I2C_RequestMemoryRead>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0ad      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2bff      	cmp	r3, #255	; 0xff
 8005738:	d90e      	bls.n	8005758 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	b2da      	uxtb	r2, r3
 8005746:	8979      	ldrh	r1, [r7, #10]
 8005748:	4b52      	ldr	r3, [pc, #328]	; (8005894 <HAL_I2C_Mem_Read+0x22c>)
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fc2d 	bl	8005fb0 <I2C_TransferConfig>
 8005756:	e00f      	b.n	8005778 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005766:	b2da      	uxtb	r2, r3
 8005768:	8979      	ldrh	r1, [r7, #10]
 800576a:	4b4a      	ldr	r3, [pc, #296]	; (8005894 <HAL_I2C_Mem_Read+0x22c>)
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc1c 	bl	8005fb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	2200      	movs	r2, #0
 8005780:	2104      	movs	r1, #4
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa6c 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07c      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d034      	beq.n	8005838 <HAL_I2C_Mem_Read+0x1d0>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d130      	bne.n	8005838 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa3d 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e04d      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2bff      	cmp	r3, #255	; 0xff
 80057f8:	d90e      	bls.n	8005818 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	b2da      	uxtb	r2, r3
 8005806:	8979      	ldrh	r1, [r7, #10]
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fbcd 	bl	8005fb0 <I2C_TransferConfig>
 8005816:	e00f      	b.n	8005838 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fbbc 	bl	8005fb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d19a      	bne.n	8005778 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fa8a 	bl	8005d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e01a      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2220      	movs	r2, #32
 800585c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_I2C_Mem_Read+0x230>)
 800586a:	400b      	ands	r3, r1
 800586c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	80002400 	.word	0x80002400
 8005898:	fe00e800 	.word	0xfe00e800

0800589c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	460b      	mov	r3, r1
 80058aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	f040 80f1 	bne.w	8005aa0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	d101      	bne.n	80058d2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	e0e7      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_I2C_IsDeviceReady+0x44>
 80058dc:	2302      	movs	r3, #2
 80058de:	e0e0      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2224      	movs	r2, #36	; 0x24
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_I2C_IsDeviceReady+0x72>
 80058fe:	897b      	ldrh	r3, [r7, #10]
 8005900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800590c:	e004      	b.n	8005918 <HAL_I2C_IsDeviceReady+0x7c>
 800590e:	897b      	ldrh	r3, [r7, #10]
 8005910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005914:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800591e:	f7fe fa03 	bl	8003d28 <HAL_GetTick>
 8005922:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b20      	cmp	r3, #32
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005950:	e034      	b.n	80059bc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d01a      	beq.n	8005990 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800595a:	f7fe f9e5 	bl	8003d28 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <HAL_I2C_IsDeviceReady+0xd4>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e088      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <HAL_I2C_IsDeviceReady+0x12c>
 80059c2:	7fbb      	ldrb	r3, [r7, #30]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0c4      	beq.n	8005952 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d01a      	beq.n	8005a0c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	2120      	movs	r1, #32
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f93d 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e058      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2220      	movs	r2, #32
 80059f6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e04a      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2120      	movs	r1, #32
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f922 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e03d      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2220      	movs	r2, #32
 8005a34:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d118      	bne.n	8005a70 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a4c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2120      	movs	r1, #32
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f901 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e01c      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3301      	adds	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f63f af3b 	bhi.w	80058f6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
  }
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab8:	b2db      	uxtb	r3, r3
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	460b      	mov	r3, r1
 8005adc:	813b      	strh	r3, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	8979      	ldrh	r1, [r7, #10]
 8005ae8:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <I2C_RequestMemoryWrite+0xa4>)
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fa5d 	bl	8005fb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	69b9      	ldr	r1, [r7, #24]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8f0 	bl	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e02c      	b.n	8005b64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d105      	bne.n	8005b1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b10:	893b      	ldrh	r3, [r7, #8]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	629a      	str	r2, [r3, #40]	; 0x28
 8005b1a:	e015      	b.n	8005b48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b1c:	893b      	ldrh	r3, [r7, #8]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f8d6 	bl	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e012      	b.n	8005b64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2180      	movs	r1, #128	; 0x80
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f884 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	80002000 	.word	0x80002000

08005b70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	817b      	strh	r3, [r7, #10]
 8005b82:	460b      	mov	r3, r1
 8005b84:	813b      	strh	r3, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	8979      	ldrh	r1, [r7, #10]
 8005b90:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <I2C_RequestMemoryRead+0xa4>)
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fa0a 	bl	8005fb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	69b9      	ldr	r1, [r7, #24]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f89d 	bl	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e02c      	b.n	8005c0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d105      	bne.n	8005bc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb6:	893b      	ldrh	r3, [r7, #8]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc0:	e015      	b.n	8005bee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bc2:	893b      	ldrh	r3, [r7, #8]
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f883 	bl	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e012      	b.n	8005c0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2140      	movs	r1, #64	; 0x40
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f831 	bl	8005c60 <I2C_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	80002000 	.word	0x80002000

08005c18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d103      	bne.n	8005c36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d007      	beq.n	8005c54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	619a      	str	r2, [r3, #24]
  }
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c70:	e022      	b.n	8005cb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d01e      	beq.n	8005cb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fe f855 	bl	8003d28 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e00f      	b.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2301      	moveq	r3, #1
 8005cca:	2300      	movne	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d0cd      	beq.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cec:	e02c      	b.n	8005d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f870 	bl	8005dd8 <I2C_IsErrorOccurred>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e02a      	b.n	8005d58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d01e      	beq.n	8005d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0a:	f7fe f80d 	bl	8003d28 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d113      	bne.n	8005d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e007      	b.n	8005d58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d1cb      	bne.n	8005cee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d6c:	e028      	b.n	8005dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f830 	bl	8005dd8 <I2C_IsErrorOccurred>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e026      	b.n	8005dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fd ffd1 	bl	8003d28 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e007      	b.n	8005dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d1cf      	bne.n	8005d6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d075      	beq.n	8005ef0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e0c:	e056      	b.n	8005ebc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d052      	beq.n	8005ebc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fd ff87 	bl	8003d28 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <I2C_IsErrorOccurred+0x54>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d147      	bne.n	8005ebc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4e:	d12e      	bne.n	8005eae <I2C_IsErrorOccurred+0xd6>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e56:	d02a      	beq.n	8005eae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d027      	beq.n	8005eae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e6e:	f7fd ff5b 	bl	8003d28 <HAL_GetTick>
 8005e72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e74:	e01b      	b.n	8005eae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e76:	f7fd ff57 	bl	8003d28 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b19      	cmp	r3, #25
 8005e82:	d914      	bls.n	8005eae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d1dc      	bne.n	8005e76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d003      	beq.n	8005ed2 <I2C_IsErrorOccurred+0xfa>
 8005eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d09d      	beq.n	8005e0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f043 0304 	orr.w	r3, r3, #4
 8005ee8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	f043 0308 	orr.w	r3, r3, #8
 8005f2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01c      	beq.n	8005fa0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe56 	bl	8005c18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <I2C_IsErrorOccurred+0x1d4>)
 8005f78:	400b      	ands	r3, r1
 8005f7a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3728      	adds	r7, #40	; 0x28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	fe00e800 	.word	0xfe00e800

08005fb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fc8:	7a7b      	ldrb	r3, [r7, #9]
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	0d5b      	lsrs	r3, r3, #21
 8005fea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <I2C_TransferConfig+0x60>)
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	ea02 0103 	and.w	r1, r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	03ff63ff 	.word	0x03ff63ff

08006014 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b20      	cmp	r3, #32
 8006028:	d138      	bne.n	800609c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006034:	2302      	movs	r3, #2
 8006036:	e032      	b.n	800609e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	; 0x24
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006066:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6819      	ldr	r1, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d139      	bne.n	8006134 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e033      	b.n	8006136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	e000      	b.n	8006136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006134:	2302      	movs	r3, #2
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <HAL_PWREx_GetVoltageRange+0x3c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006154:	d102      	bne.n	800615c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615a:	e00b      	b.n	8006174 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <HAL_PWREx_GetVoltageRange+0x3c>)
 800615e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616a:	d102      	bne.n	8006172 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800616c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006170:	e000      	b.n	8006174 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006172:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006174:	4618      	mov	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40007000 	.word	0x40007000

08006184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d141      	bne.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006192:	4b4b      	ldr	r3, [pc, #300]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800619a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619e:	d131      	bne.n	8006204 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061a0:	4b47      	ldr	r3, [pc, #284]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a6:	4a46      	ldr	r2, [pc, #280]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061b0:	4b43      	ldr	r3, [pc, #268]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061b8:	4a41      	ldr	r2, [pc, #260]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80061c0:	4b40      	ldr	r3, [pc, #256]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2232      	movs	r2, #50	; 0x32
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	4a3f      	ldr	r2, [pc, #252]	; (80062c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	0c9b      	lsrs	r3, r3, #18
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061d6:	e002      	b.n	80061de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061de:	4b38      	ldr	r3, [pc, #224]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ea:	d102      	bne.n	80061f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f2      	bne.n	80061d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061f2:	4b33      	ldr	r3, [pc, #204]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fe:	d158      	bne.n	80062b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e057      	b.n	80062b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006204:	4b2e      	ldr	r3, [pc, #184]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800620a:	4a2d      	ldr	r2, [pc, #180]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006214:	e04d      	b.n	80062b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800621c:	d141      	bne.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800621e:	4b28      	ldr	r3, [pc, #160]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622a:	d131      	bne.n	8006290 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800622c:	4b24      	ldr	r3, [pc, #144]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006232:	4a23      	ldr	r2, [pc, #140]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800623c:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006244:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800624a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800624c:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2232      	movs	r2, #50	; 0x32
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	0c9b      	lsrs	r3, r3, #18
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006262:	e002      	b.n	800626a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3b01      	subs	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d102      	bne.n	800627e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f2      	bne.n	8006264 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800627e:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628a:	d112      	bne.n	80062b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e011      	b.n	80062b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006296:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80062a0:	e007      	b.n	80062b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062aa:	4a05      	ldr	r2, [pc, #20]	; (80062c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062b0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40007000 	.word	0x40007000
 80062c4:	20000000 	.word	0x20000000
 80062c8:	431bde83 	.word	0x431bde83

080062cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a04      	ldr	r2, [pc, #16]	; (80062e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80062d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062da:	6053      	str	r3, [r2, #4]
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40007000 	.word	0x40007000

080062ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f000 bc68 	b.w	8006bd0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006300:	4b97      	ldr	r3, [pc, #604]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800630a:	4b95      	ldr	r3, [pc, #596]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80e6 	beq.w	80064ee <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_RCC_OscConfig+0x4c>
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	2b0c      	cmp	r3, #12
 800632c:	f040 808d 	bne.w	800644a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b01      	cmp	r3, #1
 8006334:	f040 8089 	bne.w	800644a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006338:	4b89      	ldr	r3, [pc, #548]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d006      	beq.n	8006352 <HAL_RCC_OscConfig+0x66>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f000 bc3f 	b.w	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006356:	4b82      	ldr	r3, [pc, #520]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <HAL_RCC_OscConfig+0x80>
 8006362:	4b7f      	ldr	r3, [pc, #508]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636a:	e005      	b.n	8006378 <HAL_RCC_OscConfig+0x8c>
 800636c:	4b7c      	ldr	r3, [pc, #496]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800636e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006378:	4293      	cmp	r3, r2
 800637a:	d224      	bcs.n	80063c6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe29 	bl	8006fd8 <RCC_SetFlashLatencyFromMSIRange>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f000 bc1f 	b.w	8006bd0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006392:	4b73      	ldr	r3, [pc, #460]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a72      	ldr	r2, [pc, #456]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006398:	f043 0308 	orr.w	r3, r3, #8
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b70      	ldr	r3, [pc, #448]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	496d      	ldr	r1, [pc, #436]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063b0:	4b6b      	ldr	r3, [pc, #428]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4968      	ldr	r1, [pc, #416]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
 80063c4:	e025      	b.n	8006412 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063c6:	4b66      	ldr	r3, [pc, #408]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a65      	ldr	r2, [pc, #404]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063cc:	f043 0308 	orr.w	r3, r3, #8
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b63      	ldr	r3, [pc, #396]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	4960      	ldr	r1, [pc, #384]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063e4:	4b5e      	ldr	r3, [pc, #376]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	495b      	ldr	r1, [pc, #364]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fde8 	bl	8006fd8 <RCC_SetFlashLatencyFromMSIRange>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e3de      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006412:	f000 fd55 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006416:	4602      	mov	r2, r0
 8006418:	4b51      	ldr	r3, [pc, #324]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	4950      	ldr	r1, [pc, #320]	; (8006564 <HAL_RCC_OscConfig+0x278>)
 8006424:	5ccb      	ldrb	r3, [r1, r3]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	fa22 f303 	lsr.w	r3, r2, r3
 800642e:	4a4e      	ldr	r2, [pc, #312]	; (8006568 <HAL_RCC_OscConfig+0x27c>)
 8006430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006432:	4b4e      	ldr	r3, [pc, #312]	; (800656c <HAL_RCC_OscConfig+0x280>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd fc26 	bl	8003c88 <HAL_InitTick>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d052      	beq.n	80064ec <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	e3c2      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d032      	beq.n	80064b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006452:	4b43      	ldr	r3, [pc, #268]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a42      	ldr	r2, [pc, #264]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800645e:	f7fd fc63 	bl	8003d28 <HAL_GetTick>
 8006462:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006466:	f7fd fc5f 	bl	8003d28 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e3ab      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006478:	4b39      	ldr	r3, [pc, #228]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006484:	4b36      	ldr	r3, [pc, #216]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a35      	ldr	r2, [pc, #212]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800648a:	f043 0308 	orr.w	r3, r3, #8
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b33      	ldr	r3, [pc, #204]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	4930      	ldr	r1, [pc, #192]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064a2:	4b2f      	ldr	r3, [pc, #188]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	492b      	ldr	r1, [pc, #172]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
 80064b6:	e01a      	b.n	80064ee <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064b8:	4b29      	ldr	r3, [pc, #164]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a28      	ldr	r2, [pc, #160]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064c4:	f7fd fc30 	bl	8003d28 <HAL_GetTick>
 80064c8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064cc:	f7fd fc2c 	bl	8003d28 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e378      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f0      	bne.n	80064cc <HAL_RCC_OscConfig+0x1e0>
 80064ea:	e000      	b.n	80064ee <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d073      	beq.n	80065e2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d005      	beq.n	800650c <HAL_RCC_OscConfig+0x220>
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2b0c      	cmp	r3, #12
 8006504:	d10e      	bne.n	8006524 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d10b      	bne.n	8006524 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800650c:	4b14      	ldr	r3, [pc, #80]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d063      	beq.n	80065e0 <HAL_RCC_OscConfig+0x2f4>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d15f      	bne.n	80065e0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e355      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d106      	bne.n	800653c <HAL_RCC_OscConfig+0x250>
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a0b      	ldr	r2, [pc, #44]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e025      	b.n	8006588 <HAL_RCC_OscConfig+0x29c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006544:	d114      	bne.n	8006570 <HAL_RCC_OscConfig+0x284>
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a05      	ldr	r2, [pc, #20]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 800654c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	4b03      	ldr	r3, [pc, #12]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a02      	ldr	r2, [pc, #8]	; (8006560 <HAL_RCC_OscConfig+0x274>)
 8006558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e013      	b.n	8006588 <HAL_RCC_OscConfig+0x29c>
 8006560:	40021000 	.word	0x40021000
 8006564:	080092a4 	.word	0x080092a4
 8006568:	20000000 	.word	0x20000000
 800656c:	20000094 	.word	0x20000094
 8006570:	4b8f      	ldr	r3, [pc, #572]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a8e      	ldr	r2, [pc, #568]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4b8c      	ldr	r3, [pc, #560]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a8b      	ldr	r2, [pc, #556]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fd fbca 	bl	8003d28 <HAL_GetTick>
 8006594:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fd fbc6 	bl	8003d28 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e312      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065aa:	4b81      	ldr	r3, [pc, #516]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0x2ac>
 80065b6:	e014      	b.n	80065e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fd fbb6 	bl	8003d28 <HAL_GetTick>
 80065bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c0:	f7fd fbb2 	bl	8003d28 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b64      	cmp	r3, #100	; 0x64
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e2fe      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065d2:	4b77      	ldr	r3, [pc, #476]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
 80065de:	e000      	b.n	80065e2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d060      	beq.n	80066b0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d005      	beq.n	8006600 <HAL_RCC_OscConfig+0x314>
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b0c      	cmp	r3, #12
 80065f8:	d119      	bne.n	800662e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d116      	bne.n	800662e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006600:	4b6b      	ldr	r3, [pc, #428]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCC_OscConfig+0x32c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e2db      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006618:	4b65      	ldr	r3, [pc, #404]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	061b      	lsls	r3, r3, #24
 8006626:	4962      	ldr	r1, [pc, #392]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	4313      	orrs	r3, r2
 800662a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800662c:	e040      	b.n	80066b0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d023      	beq.n	800667e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006636:	4b5e      	ldr	r3, [pc, #376]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a5d      	ldr	r2, [pc, #372]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800663c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006642:	f7fd fb71 	bl	8003d28 <HAL_GetTick>
 8006646:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664a:	f7fd fb6d 	bl	8003d28 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e2b9      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800665c:	4b54      	ldr	r3, [pc, #336]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006668:	4b51      	ldr	r3, [pc, #324]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	061b      	lsls	r3, r3, #24
 8006676:	494e      	ldr	r1, [pc, #312]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006678:	4313      	orrs	r3, r2
 800667a:	604b      	str	r3, [r1, #4]
 800667c:	e018      	b.n	80066b0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667e:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a4b      	ldr	r2, [pc, #300]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fd fb4d 	bl	8003d28 <HAL_GetTick>
 800668e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006692:	f7fd fb49 	bl	8003d28 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e295      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066a4:	4b42      	ldr	r3, [pc, #264]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f0      	bne.n	8006692 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8082 	beq.w	80067c2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d05f      	beq.n	8006786 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80066c6:	4b3a      	ldr	r3, [pc, #232]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 80066c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066cc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	429a      	cmp	r2, r3
 80066da:	d037      	beq.n	800674c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d006      	beq.n	80066f4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e26d      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01b      	beq.n	8006736 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80066fe:	4b2c      	ldr	r3, [pc, #176]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006704:	4a2a      	ldr	r2, [pc, #168]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800670e:	f7fd fb0b 	bl	8003d28 <HAL_GetTick>
 8006712:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006716:	f7fd fb07 	bl	8003d28 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b11      	cmp	r3, #17
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e253      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800672a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1ef      	bne.n	8006716 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673c:	f023 0210 	bic.w	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	491a      	ldr	r1, [pc, #104]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006746:	4313      	orrs	r3, r2
 8006748:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800674c:	4b18      	ldr	r3, [pc, #96]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800674e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006752:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006754:	f043 0301 	orr.w	r3, r3, #1
 8006758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675c:	f7fd fae4 	bl	8003d28 <HAL_GetTick>
 8006760:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006764:	f7fd fae0 	bl	8003d28 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b11      	cmp	r3, #17
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e22c      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006776:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0ef      	beq.n	8006764 <HAL_RCC_OscConfig+0x478>
 8006784:	e01d      	b.n	80067c2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 8006788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800678c:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <HAL_RCC_OscConfig+0x4c4>)
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006796:	f7fd fac7 	bl	8003d28 <HAL_GetTick>
 800679a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679e:	f7fd fac3 	bl	8003d28 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b11      	cmp	r3, #17
 80067aa:	d903      	bls.n	80067b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e20f      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
 80067b0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067b4:	4b83      	ldr	r3, [pc, #524]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80067b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1ed      	bne.n	800679e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 80bd 	beq.w	800694a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067d6:	4b7b      	ldr	r3, [pc, #492]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10e      	bne.n	8006800 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067e2:	4b78      	ldr	r3, [pc, #480]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	4a77      	ldr	r2, [pc, #476]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80067e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6593      	str	r3, [r2, #88]	; 0x58
 80067ee:	4b75      	ldr	r3, [pc, #468]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006800:	4b71      	ldr	r3, [pc, #452]	; (80069c8 <HAL_RCC_OscConfig+0x6dc>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d118      	bne.n	800683e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800680c:	4b6e      	ldr	r3, [pc, #440]	; (80069c8 <HAL_RCC_OscConfig+0x6dc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6d      	ldr	r2, [pc, #436]	; (80069c8 <HAL_RCC_OscConfig+0x6dc>)
 8006812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006818:	f7fd fa86 	bl	8003d28 <HAL_GetTick>
 800681c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006820:	f7fd fa82 	bl	8003d28 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e1ce      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006832:	4b65      	ldr	r3, [pc, #404]	; (80069c8 <HAL_RCC_OscConfig+0x6dc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02c      	beq.n	80068a4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800684a:	4b5e      	ldr	r3, [pc, #376]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685c:	4959      	ldr	r1, [pc, #356]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006870:	4b54      	ldr	r3, [pc, #336]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	4a53      	ldr	r2, [pc, #332]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006878:	f043 0304 	orr.w	r3, r3, #4
 800687c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006880:	4b50      	ldr	r3, [pc, #320]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006886:	4a4f      	ldr	r2, [pc, #316]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006890:	e018      	b.n	80068c4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006892:	4b4c      	ldr	r3, [pc, #304]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	4a4a      	ldr	r2, [pc, #296]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068a2:	e00f      	b.n	80068c4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80068a4:	4b47      	ldr	r3, [pc, #284]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	4a46      	ldr	r2, [pc, #280]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	4a42      	ldr	r2, [pc, #264]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80068bc:	f023 0304 	bic.w	r3, r3, #4
 80068c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d016      	beq.n	80068fa <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fd fa2c 	bl	8003d28 <HAL_GetTick>
 80068d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d2:	e00a      	b.n	80068ea <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d4:	f7fd fa28 	bl	8003d28 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e172      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ed      	beq.n	80068d4 <HAL_RCC_OscConfig+0x5e8>
 80068f8:	e01d      	b.n	8006936 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fd fa15 	bl	8003d28 <HAL_GetTick>
 80068fe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006900:	e00a      	b.n	8006918 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fd fa11 	bl	8003d28 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e15b      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006918:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1ed      	bne.n	8006902 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800692e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693e:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	4a20      	ldr	r2, [pc, #128]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006948:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d041      	beq.n	80069da <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01c      	beq.n	8006998 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800695e:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006964:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696e:	f7fd f9db 	bl	8003d28 <HAL_GetTick>
 8006972:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006976:	f7fd f9d7 	bl	8003d28 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e123      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800698a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0ef      	beq.n	8006976 <HAL_RCC_OscConfig+0x68a>
 8006996:	e020      	b.n	80069da <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 800699a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <HAL_RCC_OscConfig+0x6d8>)
 80069a0:	f023 0301 	bic.w	r3, r3, #1
 80069a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a8:	f7fd f9be 	bl	8003d28 <HAL_GetTick>
 80069ac:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069ae:	e00d      	b.n	80069cc <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069b0:	f7fd f9ba 	bl	8003d28 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d906      	bls.n	80069cc <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e106      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
 80069c2:	bf00      	nop
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069cc:	4b82      	ldr	r3, [pc, #520]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 80069ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ea      	bne.n	80069b0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 80f5 	beq.w	8006bce <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	f040 80cb 	bne.w	8006b84 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069ee:	4b7a      	ldr	r3, [pc, #488]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0203 	and.w	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d12c      	bne.n	8006a5c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d123      	bne.n	8006a5c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d11b      	bne.n	8006a5c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d113      	bne.n	8006a5c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	3b01      	subs	r3, #1
 8006a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d109      	bne.n	8006a5c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	3b01      	subs	r3, #1
 8006a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d06d      	beq.n	8006b38 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d068      	beq.n	8006b34 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a62:	4b5d      	ldr	r3, [pc, #372]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006a6e:	4b5a      	ldr	r3, [pc, #360]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e0a8      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a7e:	4b56      	ldr	r3, [pc, #344]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a55      	ldr	r2, [pc, #340]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a8a:	f7fd f94d 	bl	8003d28 <HAL_GetTick>
 8006a8e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fd f949 	bl	8003d28 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e095      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aa4:	4b4c      	ldr	r3, [pc, #304]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f0      	bne.n	8006a92 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ab0:	4b49      	ldr	r3, [pc, #292]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	4b49      	ldr	r3, [pc, #292]	; (8006bdc <HAL_RCC_OscConfig+0x8f0>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	0112      	lsls	r2, r2, #4
 8006ac4:	4311      	orrs	r1, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aca:	0212      	lsls	r2, r2, #8
 8006acc:	4311      	orrs	r1, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ad2:	0852      	lsrs	r2, r2, #1
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	0552      	lsls	r2, r2, #21
 8006ad8:	4311      	orrs	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ade:	0852      	lsrs	r2, r2, #1
 8006ae0:	3a01      	subs	r2, #1
 8006ae2:	0652      	lsls	r2, r2, #25
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006aea:	06d2      	lsls	r2, r2, #27
 8006aec:	430a      	orrs	r2, r1
 8006aee:	493a      	ldr	r1, [pc, #232]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006af4:	4b38      	ldr	r3, [pc, #224]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a37      	ldr	r2, [pc, #220]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b00:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b0c:	f7fd f90c 	bl	8003d28 <HAL_GetTick>
 8006b10:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fd f908 	bl	8003d28 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e054      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b26:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b32:	e04c      	b.n	8006bce <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e04b      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b38:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d144      	bne.n	8006bce <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b44:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a23      	ldr	r2, [pc, #140]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b50:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4a20      	ldr	r2, [pc, #128]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b5c:	f7fd f8e4 	bl	8003d28 <HAL_GetTick>
 8006b60:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b64:	f7fd f8e0 	bl	8003d28 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e02c      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b76:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCC_OscConfig+0x878>
 8006b82:	e024      	b.n	8006bce <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	2b0c      	cmp	r3, #12
 8006b88:	d01f      	beq.n	8006bca <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a12      	ldr	r2, [pc, #72]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b96:	f7fd f8c7 	bl	8003d28 <HAL_GetTick>
 8006b9a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9e:	f7fd f8c3 	bl	8003d28 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e00f      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb0:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f0      	bne.n	8006b9e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <HAL_RCC_OscConfig+0x8ec>)
 8006bc2:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <HAL_RCC_OscConfig+0x8f4>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60cb      	str	r3, [r1, #12]
 8006bc8:	e001      	b.n	8006bce <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3728      	adds	r7, #40	; 0x28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	019d800c 	.word	0x019d800c
 8006be0:	feeefffc 	.word	0xfeeefffc

08006be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e11d      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bfc:	4b90      	ldr	r3, [pc, #576]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d910      	bls.n	8006c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0a:	4b8d      	ldr	r3, [pc, #564]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 020f 	bic.w	r2, r3, #15
 8006c12:	498b      	ldr	r1, [pc, #556]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1a:	4b89      	ldr	r3, [pc, #548]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e105      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	4b81      	ldr	r3, [pc, #516]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d908      	bls.n	8006c5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c48:	4b7e      	ldr	r3, [pc, #504]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	497b      	ldr	r1, [pc, #492]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d079      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d11e      	bne.n	8006cac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6e:	4b75      	ldr	r3, [pc, #468]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e0dc      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006c7e:	f000 fa05 	bl	800708c <RCC_GetSysClockFreqFromPLLSource>
 8006c82:	4603      	mov	r3, r0
 8006c84:	4a70      	ldr	r2, [pc, #448]	; (8006e48 <HAL_RCC_ClockConfig+0x264>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d946      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006c8a:	4b6e      	ldr	r3, [pc, #440]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d140      	bne.n	8006d18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c96:	4b6b      	ldr	r3, [pc, #428]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c9e:	4a69      	ldr	r2, [pc, #420]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ca6:	2380      	movs	r3, #128	; 0x80
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	e035      	b.n	8006d18 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cb4:	4b63      	ldr	r3, [pc, #396]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d115      	bne.n	8006cec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0b9      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d107      	bne.n	8006cdc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ccc:	4b5d      	ldr	r3, [pc, #372]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d109      	bne.n	8006cec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0ad      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cdc:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0a5      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006cec:	f000 f8e8 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4a55      	ldr	r2, [pc, #340]	; (8006e48 <HAL_RCC_ClockConfig+0x264>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d90f      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006cf8:	4b52      	ldr	r3, [pc, #328]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d109      	bne.n	8006d18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d04:	4b4f      	ldr	r3, [pc, #316]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0c:	4a4d      	ldr	r2, [pc, #308]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d18:	4b4a      	ldr	r3, [pc, #296]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f023 0203 	bic.w	r2, r3, #3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4947      	ldr	r1, [pc, #284]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d2a:	f7fc fffd 	bl	8003d28 <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d30:	e00a      	b.n	8006d48 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d32:	f7fc fff9 	bl	8003d28 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e077      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d48:	4b3e      	ldr	r3, [pc, #248]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 020c 	and.w	r2, r3, #12
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d1eb      	bne.n	8006d32 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	d105      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d60:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d6a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d010      	beq.n	8006d9a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d208      	bcs.n	8006d9a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d88:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	492b      	ldr	r1, [pc, #172]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d9a:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d210      	bcs.n	8006dca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f023 020f 	bic.w	r2, r3, #15
 8006db0:	4923      	ldr	r1, [pc, #140]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db8:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <HAL_RCC_ClockConfig+0x25c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d001      	beq.n	8006dca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e036      	b.n	8006e38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d008      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd6:	4b1b      	ldr	r3, [pc, #108]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	4918      	ldr	r1, [pc, #96]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006df4:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	4910      	ldr	r1, [pc, #64]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e08:	f000 f85a 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <HAL_RCC_ClockConfig+0x260>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	490c      	ldr	r1, [pc, #48]	; (8006e4c <HAL_RCC_ClockConfig+0x268>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x26c>)
 8006e26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <HAL_RCC_ClockConfig+0x270>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fc ff2b 	bl	8003c88 <HAL_InitTick>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]

  return status;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40022000 	.word	0x40022000
 8006e44:	40021000 	.word	0x40021000
 8006e48:	04c4b400 	.word	0x04c4b400
 8006e4c:	080092a4 	.word	0x080092a4
 8006e50:	20000000 	.word	0x20000000
 8006e54:	20000094 	.word	0x20000094

08006e58 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8006e64:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <HAL_RCC_MCOConfig+0x64>)
 8006e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e68:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <HAL_RCC_MCOConfig+0x64>)
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e70:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <HAL_RCC_MCOConfig+0x64>)
 8006e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e82:	2302      	movs	r3, #2
 8006e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e86:	2302      	movs	r3, #2
 8006e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006e92:	f107 0314 	add.w	r3, r7, #20
 8006e96:	4619      	mov	r1, r3
 8006e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e9c:	f7fd ff76 	bl	8004d8c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <HAL_RCC_MCOConfig+0x64>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	430b      	orrs	r3, r1
 8006eae:	4903      	ldr	r1, [pc, #12]	; (8006ebc <HAL_RCC_MCOConfig+0x64>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	608b      	str	r3, [r1, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	3728      	adds	r7, #40	; 0x28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40021000 	.word	0x40021000

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	; 0x24
 8006ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ece:	4b3e      	ldr	r3, [pc, #248]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ed8:	4b3b      	ldr	r3, [pc, #236]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d121      	bne.n	8006f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d11e      	bne.n	8006f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ef4:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d107      	bne.n	8006f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f00:	4b31      	ldr	r3, [pc, #196]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	e005      	b.n	8006f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f1c:	4a2b      	ldr	r2, [pc, #172]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10d      	bne.n	8006f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f30:	e00a      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d102      	bne.n	8006f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	e004      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d101      	bne.n	8006f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f44:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b0c      	cmp	r3, #12
 8006f4c:	d134      	bne.n	8006fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d003      	beq.n	8006f6c <HAL_RCC_GetSysClockFreq+0xac>
 8006f64:	e005      	b.n	8006f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f66:	4b1a      	ldr	r3, [pc, #104]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f68:	617b      	str	r3, [r7, #20]
      break;
 8006f6a:	e005      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f6c:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f6e:	617b      	str	r3, [r7, #20]
      break;
 8006f70:	e002      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	617b      	str	r3, [r7, #20]
      break;
 8006f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f78:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	3301      	adds	r3, #1
 8006f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	fb03 f202 	mul.w	r2, r3, r2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	0e5b      	lsrs	r3, r3, #25
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	3301      	adds	r3, #1
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3724      	adds	r7, #36	; 0x24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	080092b4 	.word	0x080092b4
 8006fd0:	00f42400 	.word	0x00f42400
 8006fd4:	016e3600 	.word	0x016e3600

08006fd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ff0:	f7ff f8a8 	bl	8006144 <HAL_PWREx_GetVoltageRange>
 8006ff4:	6178      	str	r0, [r7, #20]
 8006ff6:	e014      	b.n	8007022 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ff8:	4b22      	ldr	r3, [pc, #136]	; (8007084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffc:	4a21      	ldr	r2, [pc, #132]	; (8007084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007002:	6593      	str	r3, [r2, #88]	; 0x58
 8007004:	4b1f      	ldr	r3, [pc, #124]	; (8007084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007010:	f7ff f898 	bl	8006144 <HAL_PWREx_GetVoltageRange>
 8007014:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007016:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800701c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007020:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d10b      	bne.n	8007042 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d913      	bls.n	8007058 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2ba0      	cmp	r3, #160	; 0xa0
 8007034:	d902      	bls.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007036:	2302      	movs	r3, #2
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e00d      	b.n	8007058 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800703c:	2301      	movs	r3, #1
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e00a      	b.n	8007058 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b7f      	cmp	r3, #127	; 0x7f
 8007046:	d902      	bls.n	800704e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007048:	2302      	movs	r3, #2
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	e004      	b.n	8007058 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b70      	cmp	r3, #112	; 0x70
 8007052:	d101      	bne.n	8007058 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007054:	2301      	movs	r3, #1
 8007056:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007058:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f023 020f 	bic.w	r2, r3, #15
 8007060:	4909      	ldr	r1, [pc, #36]	; (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007068:	4b07      	ldr	r3, [pc, #28]	; (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	429a      	cmp	r2, r3
 8007074:	d001      	beq.n	800707a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40021000 	.word	0x40021000
 8007088:	40022000 	.word	0x40022000

0800708c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d00b      	beq.n	80070ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d825      	bhi.n	80070f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d008      	beq.n	80070c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d11f      	bne.n	80070f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80070b6:	613b      	str	r3, [r7, #16]
    break;
 80070b8:	e01f      	b.n	80070fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80070bc:	613b      	str	r3, [r7, #16]
    break;
 80070be:	e01c      	b.n	80070fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80070c0:	4b21      	ldr	r3, [pc, #132]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d107      	bne.n	80070dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80070cc:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80070ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e005      	b.n	80070e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80070dc:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80070e8:	4a1a      	ldr	r2, [pc, #104]	; (8007154 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f0:	613b      	str	r3, [r7, #16]
    break;
 80070f2:	e002      	b.n	80070fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
    break;
 80070f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070fa:	4b13      	ldr	r3, [pc, #76]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	091b      	lsrs	r3, r3, #4
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	3301      	adds	r3, #1
 8007106:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	0a1b      	lsrs	r3, r3, #8
 800710e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	fb03 f202 	mul.w	r2, r3, r2
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	0e5b      	lsrs	r3, r3, #25
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	3301      	adds	r3, #1
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800713a:	683b      	ldr	r3, [r7, #0]
}
 800713c:	4618      	mov	r0, r3
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40021000 	.word	0x40021000
 800714c:	00f42400 	.word	0x00f42400
 8007150:	016e3600 	.word	0x016e3600
 8007154:	080092b4 	.word	0x080092b4

08007158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007160:	2300      	movs	r3, #0
 8007162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007164:	2300      	movs	r3, #0
 8007166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007170:	2b00      	cmp	r3, #0
 8007172:	d040      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	2b80      	cmp	r3, #128	; 0x80
 800717a:	d02a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d825      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007180:	2b60      	cmp	r3, #96	; 0x60
 8007182:	d026      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007184:	2b60      	cmp	r3, #96	; 0x60
 8007186:	d821      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d006      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d81d      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d010      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007198:	e018      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800719a:	4b89      	ldr	r3, [pc, #548]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	4a88      	ldr	r2, [pc, #544]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071a6:	e015      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fb3e 	bl	8007830 <RCCEx_PLLSAI1_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071b8:	e00c      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3320      	adds	r3, #32
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc29 	bl	8007a18 <RCCEx_PLLSAI2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071ca:	e003      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	74fb      	strb	r3, [r7, #19]
      break;
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80071d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071da:	4b79      	ldr	r3, [pc, #484]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e8:	4975      	ldr	r1, [pc, #468]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80071f0:	e001      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f2:	7cfb      	ldrb	r3, [r7, #19]
 80071f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d047      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720a:	d030      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800720c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007210:	d82a      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007216:	d02a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721c:	d824      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800721e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007222:	d008      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007228:	d81e      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800722e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007232:	d010      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007234:	e018      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007236:	4b62      	ldr	r3, [pc, #392]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	4a61      	ldr	r2, [pc, #388]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007242:	e015      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	2100      	movs	r1, #0
 800724a:	4618      	mov	r0, r3
 800724c:	f000 faf0 	bl	8007830 <RCCEx_PLLSAI1_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007254:	e00c      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3320      	adds	r3, #32
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fbdb 	bl	8007a18 <RCCEx_PLLSAI2_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	74fb      	strb	r3, [r7, #19]
      break;
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800726e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007270:	7cfb      	ldrb	r3, [r7, #19]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007276:	4b52      	ldr	r3, [pc, #328]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800727c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	494e      	ldr	r1, [pc, #312]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007286:	4313      	orrs	r3, r2
 8007288:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800728c:	e001      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	7cfb      	ldrb	r3, [r7, #19]
 8007290:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 809f 	beq.w	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072a0:	2300      	movs	r3, #0
 80072a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072a4:	4b46      	ldr	r3, [pc, #280]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e000      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80072b4:	2300      	movs	r3, #0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00d      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ba:	4b41      	ldr	r3, [pc, #260]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	4a40      	ldr	r2, [pc, #256]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c4:	6593      	str	r3, [r2, #88]	; 0x58
 80072c6:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ce:	60bb      	str	r3, [r7, #8]
 80072d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072d2:	2301      	movs	r3, #1
 80072d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072d6:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3a      	ldr	r2, [pc, #232]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80072dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072e2:	f7fc fd21 	bl	8003d28 <HAL_GetTick>
 80072e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072e8:	e009      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ea:	f7fc fd1d 	bl	8003d28 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d902      	bls.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	74fb      	strb	r3, [r7, #19]
        break;
 80072fc:	e005      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072fe:	4b31      	ldr	r3, [pc, #196]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0ef      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800730a:	7cfb      	ldrb	r3, [r7, #19]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d15b      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007310:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01f      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	429a      	cmp	r2, r3
 800732c:	d019      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800732e:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007338:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800733a:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007340:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800734a:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	4a1b      	ldr	r2, [pc, #108]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800735a:	4a19      	ldr	r2, [pc, #100]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d016      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736c:	f7fc fcdc 	bl	8003d28 <HAL_GetTick>
 8007370:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007372:	e00b      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007374:	f7fc fcd8 	bl	8003d28 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007382:	4293      	cmp	r3, r2
 8007384:	d902      	bls.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	74fb      	strb	r3, [r7, #19]
            break;
 800738a:	e006      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800738c:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0ec      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800739a:	7cfb      	ldrb	r3, [r7, #19]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10c      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b0:	4903      	ldr	r1, [pc, #12]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073b8:	e008      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073ba:	7cfb      	ldrb	r3, [r7, #19]
 80073bc:	74bb      	strb	r3, [r7, #18]
 80073be:	e005      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80073c0:	40021000 	.word	0x40021000
 80073c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c8:	7cfb      	ldrb	r3, [r7, #19]
 80073ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073cc:	7c7b      	ldrb	r3, [r7, #17]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d105      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073d2:	4ba0      	ldr	r3, [pc, #640]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	4a9f      	ldr	r2, [pc, #636]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073ea:	4b9a      	ldr	r3, [pc, #616]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f0:	f023 0203 	bic.w	r2, r3, #3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	4996      	ldr	r1, [pc, #600]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800740c:	4b91      	ldr	r3, [pc, #580]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	f023 020c 	bic.w	r2, r3, #12
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	498e      	ldr	r1, [pc, #568]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800742e:	4b89      	ldr	r3, [pc, #548]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007434:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	4985      	ldr	r1, [pc, #532]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007450:	4b80      	ldr	r3, [pc, #512]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007456:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745e:	497d      	ldr	r1, [pc, #500]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007472:	4b78      	ldr	r3, [pc, #480]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007480:	4974      	ldr	r1, [pc, #464]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007494:	4b6f      	ldr	r3, [pc, #444]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a2:	496c      	ldr	r1, [pc, #432]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074b6:	4b67      	ldr	r3, [pc, #412]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c4:	4963      	ldr	r1, [pc, #396]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074d8:	4b5e      	ldr	r3, [pc, #376]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e6:	495b      	ldr	r1, [pc, #364]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074fa:	4b56      	ldr	r3, [pc, #344]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007500:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	4952      	ldr	r1, [pc, #328]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800751c:	4b4d      	ldr	r3, [pc, #308]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007522:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	494a      	ldr	r1, [pc, #296]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800753e:	4b45      	ldr	r3, [pc, #276]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	4941      	ldr	r1, [pc, #260]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007560:	4b3c      	ldr	r3, [pc, #240]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007566:	f023 0203 	bic.w	r2, r3, #3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756e:	4939      	ldr	r1, [pc, #228]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d028      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007582:	4b34      	ldr	r3, [pc, #208]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007590:	4930      	ldr	r1, [pc, #192]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a0:	d106      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075a2:	4b2c      	ldr	r3, [pc, #176]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	4a2b      	ldr	r2, [pc, #172]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ac:	60d3      	str	r3, [r2, #12]
 80075ae:	e011      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075b8:	d10c      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	2101      	movs	r1, #1
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f935 	bl	8007830 <RCCEx_PLLSAI1_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80075ca:	7cfb      	ldrb	r3, [r7, #19]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80075d0:	7cfb      	ldrb	r3, [r7, #19]
 80075d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d04d      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075e8:	d108      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80075ea:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075f0:	4a18      	ldr	r2, [pc, #96]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80075fa:	e012      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007602:	4a14      	ldr	r2, [pc, #80]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007608:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761a:	490e      	ldr	r1, [pc, #56]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800762a:	d106      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007636:	60d3      	str	r3, [r2, #12]
 8007638:	e020      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007644:	4b03      	ldr	r3, [pc, #12]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a02      	ldr	r2, [pc, #8]	; (8007654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800764a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800764e:	60d3      	str	r3, [r2, #12]
 8007650:	e014      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007652:	bf00      	nop
 8007654:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800765c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007660:	d10c      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	2101      	movs	r1, #1
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f8e1 	bl	8007830 <RCCEx_PLLSAI1_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007672:	7cfb      	ldrb	r3, [r7, #19]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007678:	7cfb      	ldrb	r3, [r7, #19]
 800767a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d028      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007688:	4b68      	ldr	r3, [pc, #416]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007696:	4965      	ldr	r1, [pc, #404]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a6:	d106      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076a8:	4b60      	ldr	r3, [pc, #384]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a5f      	ldr	r2, [pc, #380]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80076ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076b2:	60d3      	str	r3, [r2, #12]
 80076b4:	e011      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076be:	d10c      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	2101      	movs	r1, #1
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f8b2 	bl	8007830 <RCCEx_PLLSAI1_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076d0:	7cfb      	ldrb	r3, [r7, #19]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80076d6:	7cfb      	ldrb	r3, [r7, #19]
 80076d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01e      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076e6:	4b51      	ldr	r3, [pc, #324]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f6:	494d      	ldr	r1, [pc, #308]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007708:	d10c      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2102      	movs	r1, #2
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f88d 	bl	8007830 <RCCEx_PLLSAI1_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800771a:	7cfb      	ldrb	r3, [r7, #19]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007720:	7cfb      	ldrb	r3, [r7, #19]
 8007722:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007730:	4b3e      	ldr	r3, [pc, #248]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007736:	f023 0204 	bic.w	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007740:	493a      	ldr	r1, [pc, #232]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007754:	4b35      	ldr	r3, [pc, #212]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800775a:	f023 0218 	bic.w	r2, r3, #24
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007764:	4931      	ldr	r1, [pc, #196]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007766:	4313      	orrs	r3, r2
 8007768:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d035      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007778:	4b2c      	ldr	r3, [pc, #176]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a2b      	ldr	r2, [pc, #172]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800777e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007784:	f7fc fad0 	bl	8003d28 <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800778a:	e009      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800778c:	f7fc facc 	bl	8003d28 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d902      	bls.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	74fb      	strb	r3, [r7, #19]
        break;
 800779e:	e005      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077a0:	4b22      	ldr	r3, [pc, #136]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ef      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80077ac:	7cfb      	ldrb	r3, [r7, #19]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d113      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80077b2:	4b1e      	ldr	r3, [pc, #120]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80077b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c2:	491a      	ldr	r1, [pc, #104]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3320      	adds	r3, #32
 80077ce:	2102      	movs	r1, #2
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 f921 	bl	8007a18 <RCCEx_PLLSAI2_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80077da:	7cfb      	ldrb	r3, [r7, #19]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80077e0:	7cfb      	ldrb	r3, [r7, #19]
 80077e2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d017      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80077f0:	4b0e      	ldr	r3, [pc, #56]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80077f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007800:	490a      	ldr	r1, [pc, #40]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007812:	d105      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4a04      	ldr	r2, [pc, #16]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800781a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007820:	7cbb      	ldrb	r3, [r7, #18]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	40021000 	.word	0x40021000

08007830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800783e:	4b72      	ldr	r3, [pc, #456]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800784a:	4b6f      	ldr	r3, [pc, #444]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f003 0203 	and.w	r2, r3, #3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d103      	bne.n	8007862 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
       ||
 800785e:	2b00      	cmp	r3, #0
 8007860:	d142      	bne.n	80078e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	73fb      	strb	r3, [r7, #15]
 8007866:	e03f      	b.n	80078e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d018      	beq.n	80078a2 <RCCEx_PLLSAI1_Config+0x72>
 8007870:	2b03      	cmp	r3, #3
 8007872:	d825      	bhi.n	80078c0 <RCCEx_PLLSAI1_Config+0x90>
 8007874:	2b01      	cmp	r3, #1
 8007876:	d002      	beq.n	800787e <RCCEx_PLLSAI1_Config+0x4e>
 8007878:	2b02      	cmp	r3, #2
 800787a:	d009      	beq.n	8007890 <RCCEx_PLLSAI1_Config+0x60>
 800787c:	e020      	b.n	80078c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800787e:	4b62      	ldr	r3, [pc, #392]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d11d      	bne.n	80078c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800788e:	e01a      	b.n	80078c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007890:	4b5d      	ldr	r3, [pc, #372]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007898:	2b00      	cmp	r3, #0
 800789a:	d116      	bne.n	80078ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a0:	e013      	b.n	80078ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078a2:	4b59      	ldr	r3, [pc, #356]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10f      	bne.n	80078ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078ae:	4b56      	ldr	r3, [pc, #344]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078be:	e006      	b.n	80078ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	73fb      	strb	r3, [r7, #15]
      break;
 80078c4:	e004      	b.n	80078d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80078c6:	bf00      	nop
 80078c8:	e002      	b.n	80078d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80078ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d108      	bne.n	80078e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80078d6:	4b4c      	ldr	r3, [pc, #304]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f023 0203 	bic.w	r2, r3, #3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4949      	ldr	r1, [pc, #292]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 8086 	bne.w	80079fc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80078f0:	4b45      	ldr	r3, [pc, #276]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a44      	ldr	r2, [pc, #272]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fc:	f7fc fa14 	bl	8003d28 <HAL_GetTick>
 8007900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007902:	e009      	b.n	8007918 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007904:	f7fc fa10 	bl	8003d28 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d902      	bls.n	8007918 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	73fb      	strb	r3, [r7, #15]
        break;
 8007916:	e005      	b.n	8007924 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007918:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1ef      	bne.n	8007904 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d168      	bne.n	80079fc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d113      	bne.n	8007958 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007930:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	4b35      	ldr	r3, [pc, #212]	; (8007a0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007936:	4013      	ands	r3, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6892      	ldr	r2, [r2, #8]
 800793c:	0211      	lsls	r1, r2, #8
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	68d2      	ldr	r2, [r2, #12]
 8007942:	06d2      	lsls	r2, r2, #27
 8007944:	4311      	orrs	r1, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6852      	ldr	r2, [r2, #4]
 800794a:	3a01      	subs	r2, #1
 800794c:	0112      	lsls	r2, r2, #4
 800794e:	430a      	orrs	r2, r1
 8007950:	492d      	ldr	r1, [pc, #180]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007952:	4313      	orrs	r3, r2
 8007954:	610b      	str	r3, [r1, #16]
 8007956:	e02d      	b.n	80079b4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d115      	bne.n	800798a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800795e:	4b2a      	ldr	r3, [pc, #168]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	4b2b      	ldr	r3, [pc, #172]	; (8007a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6892      	ldr	r2, [r2, #8]
 800796a:	0211      	lsls	r1, r2, #8
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6912      	ldr	r2, [r2, #16]
 8007970:	0852      	lsrs	r2, r2, #1
 8007972:	3a01      	subs	r2, #1
 8007974:	0552      	lsls	r2, r2, #21
 8007976:	4311      	orrs	r1, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6852      	ldr	r2, [r2, #4]
 800797c:	3a01      	subs	r2, #1
 800797e:	0112      	lsls	r2, r2, #4
 8007980:	430a      	orrs	r2, r1
 8007982:	4921      	ldr	r1, [pc, #132]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007984:	4313      	orrs	r3, r2
 8007986:	610b      	str	r3, [r1, #16]
 8007988:	e014      	b.n	80079b4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800798a:	4b1f      	ldr	r3, [pc, #124]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6892      	ldr	r2, [r2, #8]
 8007996:	0211      	lsls	r1, r2, #8
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6952      	ldr	r2, [r2, #20]
 800799c:	0852      	lsrs	r2, r2, #1
 800799e:	3a01      	subs	r2, #1
 80079a0:	0652      	lsls	r2, r2, #25
 80079a2:	4311      	orrs	r1, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6852      	ldr	r2, [r2, #4]
 80079a8:	3a01      	subs	r2, #1
 80079aa:	0112      	lsls	r2, r2, #4
 80079ac:	430a      	orrs	r2, r1
 80079ae:	4916      	ldr	r1, [pc, #88]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80079b4:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c0:	f7fc f9b2 	bl	8003d28 <HAL_GetTick>
 80079c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079c6:	e009      	b.n	80079dc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079c8:	f7fc f9ae 	bl	8003d28 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d902      	bls.n	80079dc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
          break;
 80079da:	e005      	b.n	80079e8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0ef      	beq.n	80079c8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	4904      	ldr	r1, [pc, #16]	; (8007a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	07ff800f 	.word	0x07ff800f
 8007a10:	ff9f800f 	.word	0xff9f800f
 8007a14:	f9ff800f 	.word	0xf9ff800f

08007a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a26:	4b72      	ldr	r3, [pc, #456]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00e      	beq.n	8007a50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007a32:	4b6f      	ldr	r3, [pc, #444]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0203 	and.w	r2, r3, #3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d103      	bne.n	8007a4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
       ||
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d142      	bne.n	8007ad0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
 8007a4e:	e03f      	b.n	8007ad0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d018      	beq.n	8007a8a <RCCEx_PLLSAI2_Config+0x72>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d825      	bhi.n	8007aa8 <RCCEx_PLLSAI2_Config+0x90>
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d002      	beq.n	8007a66 <RCCEx_PLLSAI2_Config+0x4e>
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d009      	beq.n	8007a78 <RCCEx_PLLSAI2_Config+0x60>
 8007a64:	e020      	b.n	8007aa8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a66:	4b62      	ldr	r3, [pc, #392]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d11d      	bne.n	8007aae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a76:	e01a      	b.n	8007aae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a78:	4b5d      	ldr	r3, [pc, #372]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d116      	bne.n	8007ab2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a88:	e013      	b.n	8007ab2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a8a:	4b59      	ldr	r3, [pc, #356]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a96:	4b56      	ldr	r3, [pc, #344]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aa6:	e006      	b.n	8007ab6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e004      	b.n	8007ab8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d108      	bne.n	8007ad0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007abe:	4b4c      	ldr	r3, [pc, #304]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f023 0203 	bic.w	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4949      	ldr	r1, [pc, #292]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 8086 	bne.w	8007be4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ad8:	4b45      	ldr	r3, [pc, #276]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a44      	ldr	r2, [pc, #272]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae4:	f7fc f920 	bl	8003d28 <HAL_GetTick>
 8007ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007aea:	e009      	b.n	8007b00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007aec:	f7fc f91c 	bl	8003d28 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d902      	bls.n	8007b00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	73fb      	strb	r3, [r7, #15]
        break;
 8007afe:	e005      	b.n	8007b0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b00:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1ef      	bne.n	8007aec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d168      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d113      	bne.n	8007b40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b18:	4b35      	ldr	r3, [pc, #212]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b1a:	695a      	ldr	r2, [r3, #20]
 8007b1c:	4b35      	ldr	r3, [pc, #212]	; (8007bf4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6892      	ldr	r2, [r2, #8]
 8007b24:	0211      	lsls	r1, r2, #8
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68d2      	ldr	r2, [r2, #12]
 8007b2a:	06d2      	lsls	r2, r2, #27
 8007b2c:	4311      	orrs	r1, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6852      	ldr	r2, [r2, #4]
 8007b32:	3a01      	subs	r2, #1
 8007b34:	0112      	lsls	r2, r2, #4
 8007b36:	430a      	orrs	r2, r1
 8007b38:	492d      	ldr	r1, [pc, #180]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	614b      	str	r3, [r1, #20]
 8007b3e:	e02d      	b.n	8007b9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d115      	bne.n	8007b72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b46:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	4b2b      	ldr	r3, [pc, #172]	; (8007bf8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6892      	ldr	r2, [r2, #8]
 8007b52:	0211      	lsls	r1, r2, #8
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6912      	ldr	r2, [r2, #16]
 8007b58:	0852      	lsrs	r2, r2, #1
 8007b5a:	3a01      	subs	r2, #1
 8007b5c:	0552      	lsls	r2, r2, #21
 8007b5e:	4311      	orrs	r1, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6852      	ldr	r2, [r2, #4]
 8007b64:	3a01      	subs	r2, #1
 8007b66:	0112      	lsls	r2, r2, #4
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	4921      	ldr	r1, [pc, #132]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	614b      	str	r3, [r1, #20]
 8007b70:	e014      	b.n	8007b9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	4b21      	ldr	r3, [pc, #132]	; (8007bfc <RCCEx_PLLSAI2_Config+0x1e4>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6892      	ldr	r2, [r2, #8]
 8007b7e:	0211      	lsls	r1, r2, #8
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6952      	ldr	r2, [r2, #20]
 8007b84:	0852      	lsrs	r2, r2, #1
 8007b86:	3a01      	subs	r2, #1
 8007b88:	0652      	lsls	r2, r2, #25
 8007b8a:	4311      	orrs	r1, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	3a01      	subs	r2, #1
 8007b92:	0112      	lsls	r2, r2, #4
 8007b94:	430a      	orrs	r2, r1
 8007b96:	4916      	ldr	r1, [pc, #88]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b9c:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba8:	f7fc f8be 	bl	8003d28 <HAL_GetTick>
 8007bac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bae:	e009      	b.n	8007bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007bb0:	f7fc f8ba 	bl	8003d28 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d902      	bls.n	8007bc4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	73fb      	strb	r3, [r7, #15]
          break;
 8007bc2:	e005      	b.n	8007bd0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0ef      	beq.n	8007bb0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bd8:	695a      	ldr	r2, [r3, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	4904      	ldr	r1, [pc, #16]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	07ff800f 	.word	0x07ff800f
 8007bf8:	ff9f800f 	.word	0xff9f800f
 8007bfc:	f9ff800f 	.word	0xf9ff800f

08007c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e095      	b.n	8007d3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d108      	bne.n	8007c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c22:	d009      	beq.n	8007c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	61da      	str	r2, [r3, #28]
 8007c2a:	e005      	b.n	8007c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7f9 f8ea 	bl	8000e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c78:	d902      	bls.n	8007c80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e002      	b.n	8007c86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c8e:	d007      	beq.n	8007ca0 <HAL_SPI_Init+0xa0>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c98:	d002      	beq.n	8007ca0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	ea42 0103 	orr.w	r1, r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	f003 0204 	and.w	r2, r3, #4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d1c:	ea42 0103 	orr.w	r1, r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b088      	sub	sp, #32
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	603b      	str	r3, [r7, #0]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_SPI_Transmit+0x22>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e158      	b.n	800801a <HAL_SPI_Transmit+0x2d4>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d70:	f7fb ffda 	bl	8003d28 <HAL_GetTick>
 8007d74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d002      	beq.n	8007d8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
 8007d88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d8a:	e13d      	b.n	8008008 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_SPI_Transmit+0x52>
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d9c:	e134      	b.n	8008008 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2203      	movs	r2, #3
 8007da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	88fa      	ldrh	r2, [r7, #6]
 8007db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de8:	d10f      	bne.n	8007e0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d007      	beq.n	8007e28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e30:	d94b      	bls.n	8007eca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_SPI_Transmit+0xfa>
 8007e3a:	8afb      	ldrh	r3, [r7, #22]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d13e      	bne.n	8007ebe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	881a      	ldrh	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	1c9a      	adds	r2, r3, #2
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e64:	e02b      	b.n	8007ebe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d112      	bne.n	8007e9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	881a      	ldrh	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	1c9a      	adds	r2, r3, #2
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e98:	e011      	b.n	8007ebe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e9a:	f7fb ff45 	bl	8003d28 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d803      	bhi.n	8007eb2 <HAL_SPI_Transmit+0x16c>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb0:	d102      	bne.n	8007eb8 <HAL_SPI_Transmit+0x172>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ebc:	e0a4      	b.n	8008008 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1ce      	bne.n	8007e66 <HAL_SPI_Transmit+0x120>
 8007ec8:	e07c      	b.n	8007fc4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SPI_Transmit+0x192>
 8007ed2:	8afb      	ldrh	r3, [r7, #22]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d170      	bne.n	8007fba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d912      	bls.n	8007f08 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	881a      	ldrh	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	1c9a      	adds	r2, r3, #2
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b02      	subs	r3, #2
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f06:	e058      	b.n	8007fba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	7812      	ldrb	r2, [r2, #0]
 8007f14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007f2e:	e044      	b.n	8007fba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d12b      	bne.n	8007f96 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d912      	bls.n	8007f6e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	881a      	ldrh	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	1c9a      	adds	r2, r3, #2
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b02      	subs	r3, #2
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f6c:	e025      	b.n	8007fba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	330c      	adds	r3, #12
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f94:	e011      	b.n	8007fba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f96:	f7fb fec7 	bl	8003d28 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d803      	bhi.n	8007fae <HAL_SPI_Transmit+0x268>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d102      	bne.n	8007fb4 <HAL_SPI_Transmit+0x26e>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fb8:	e026      	b.n	8008008 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1b5      	bne.n	8007f30 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f949 	bl	8008260 <SPI_EndRxTxTransaction>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	613b      	str	r3, [r7, #16]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e000      	b.n	8008008 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008006:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008018:	7ffb      	ldrb	r3, [r7, #31]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008034:	f7fb fe78 	bl	8003d28 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4413      	add	r3, r2
 8008042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008044:	f7fb fe70 	bl	8003d28 <HAL_GetTick>
 8008048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800804a:	4b39      	ldr	r3, [pc, #228]	; (8008130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	015b      	lsls	r3, r3, #5
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800805a:	e054      	b.n	8008106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d050      	beq.n	8008106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008064:	f7fb fe60 	bl	8003d28 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	429a      	cmp	r2, r3
 8008072:	d902      	bls.n	800807a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d13d      	bne.n	80080f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008092:	d111      	bne.n	80080b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809c:	d004      	beq.n	80080a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a6:	d107      	bne.n	80080b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c0:	d10f      	bne.n	80080e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e017      	b.n	8008126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	3b01      	subs	r3, #1
 8008104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	4013      	ands	r3, r2
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	429a      	cmp	r2, r3
 8008114:	bf0c      	ite	eq
 8008116:	2301      	moveq	r3, #1
 8008118:	2300      	movne	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d19b      	bne.n	800805c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000000 	.word	0x20000000

08008134 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008146:	f7fb fdef 	bl	8003d28 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	4413      	add	r3, r2
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008156:	f7fb fde7 	bl	8003d28 <HAL_GetTick>
 800815a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008164:	4b3d      	ldr	r3, [pc, #244]	; (800825c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	00da      	lsls	r2, r3, #3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	0d1b      	lsrs	r3, r3, #20
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800817c:	e060      	b.n	8008240 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008184:	d107      	bne.n	8008196 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008194:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819c:	d050      	beq.n	8008240 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800819e:	f7fb fdc3 	bl	8003d28 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d902      	bls.n	80081b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d13d      	bne.n	8008230 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081cc:	d111      	bne.n	80081f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d6:	d004      	beq.n	80081e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e0:	d107      	bne.n	80081f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	d10f      	bne.n	800821c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800821a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e010      	b.n	8008252 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	3b01      	subs	r3, #1
 800823e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4013      	ands	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	429a      	cmp	r2, r3
 800824e:	d196      	bne.n	800817e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3728      	adds	r7, #40	; 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000000 	.word	0x20000000

08008260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff ff5b 	bl	8008134 <SPI_WaitFifoStateUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008288:	f043 0220 	orr.w	r2, r3, #32
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e027      	b.n	80082e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	2180      	movs	r1, #128	; 0x80
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fec0 	bl	8008024 <SPI_WaitFlagStateUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ae:	f043 0220 	orr.w	r2, r3, #32
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e014      	b.n	80082e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff ff34 	bl	8008134 <SPI_WaitFifoStateUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d6:	f043 0220 	orr.w	r2, r3, #32
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e000      	b.n	80082e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <__errno>:
 80082ec:	4b01      	ldr	r3, [pc, #4]	; (80082f4 <__errno+0x8>)
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	2000009c 	.word	0x2000009c

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4d0d      	ldr	r5, [pc, #52]	; (8008330 <__libc_init_array+0x38>)
 80082fc:	4c0d      	ldr	r4, [pc, #52]	; (8008334 <__libc_init_array+0x3c>)
 80082fe:	1b64      	subs	r4, r4, r5
 8008300:	10a4      	asrs	r4, r4, #2
 8008302:	2600      	movs	r6, #0
 8008304:	42a6      	cmp	r6, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	4d0b      	ldr	r5, [pc, #44]	; (8008338 <__libc_init_array+0x40>)
 800830a:	4c0c      	ldr	r4, [pc, #48]	; (800833c <__libc_init_array+0x44>)
 800830c:	f000 ffae 	bl	800926c <_init>
 8008310:	1b64      	subs	r4, r4, r5
 8008312:	10a4      	asrs	r4, r4, #2
 8008314:	2600      	movs	r6, #0
 8008316:	42a6      	cmp	r6, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008320:	4798      	blx	r3
 8008322:	3601      	adds	r6, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f855 3b04 	ldr.w	r3, [r5], #4
 800832a:	4798      	blx	r3
 800832c:	3601      	adds	r6, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	080098a0 	.word	0x080098a0
 8008334:	080098a0 	.word	0x080098a0
 8008338:	080098a0 	.word	0x080098a0
 800833c:	080098a4 	.word	0x080098a4

08008340 <memset>:
 8008340:	4402      	add	r2, r0
 8008342:	4603      	mov	r3, r0
 8008344:	4293      	cmp	r3, r2
 8008346:	d100      	bne.n	800834a <memset+0xa>
 8008348:	4770      	bx	lr
 800834a:	f803 1b01 	strb.w	r1, [r3], #1
 800834e:	e7f9      	b.n	8008344 <memset+0x4>

08008350 <_free_r>:
 8008350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008352:	2900      	cmp	r1, #0
 8008354:	d044      	beq.n	80083e0 <_free_r+0x90>
 8008356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835a:	9001      	str	r0, [sp, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f1a1 0404 	sub.w	r4, r1, #4
 8008362:	bfb8      	it	lt
 8008364:	18e4      	addlt	r4, r4, r3
 8008366:	f000 f9f3 	bl	8008750 <__malloc_lock>
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <_free_r+0x94>)
 800836c:	9801      	ldr	r0, [sp, #4]
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	b933      	cbnz	r3, 8008380 <_free_r+0x30>
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	6014      	str	r4, [r2, #0]
 8008376:	b003      	add	sp, #12
 8008378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800837c:	f000 b9ee 	b.w	800875c <__malloc_unlock>
 8008380:	42a3      	cmp	r3, r4
 8008382:	d908      	bls.n	8008396 <_free_r+0x46>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	1961      	adds	r1, r4, r5
 8008388:	428b      	cmp	r3, r1
 800838a:	bf01      	itttt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	1949      	addeq	r1, r1, r5
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	e7ed      	b.n	8008372 <_free_r+0x22>
 8008396:	461a      	mov	r2, r3
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b10b      	cbz	r3, 80083a0 <_free_r+0x50>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d9fa      	bls.n	8008396 <_free_r+0x46>
 80083a0:	6811      	ldr	r1, [r2, #0]
 80083a2:	1855      	adds	r5, r2, r1
 80083a4:	42a5      	cmp	r5, r4
 80083a6:	d10b      	bne.n	80083c0 <_free_r+0x70>
 80083a8:	6824      	ldr	r4, [r4, #0]
 80083aa:	4421      	add	r1, r4
 80083ac:	1854      	adds	r4, r2, r1
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	6011      	str	r1, [r2, #0]
 80083b2:	d1e0      	bne.n	8008376 <_free_r+0x26>
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	6053      	str	r3, [r2, #4]
 80083ba:	4421      	add	r1, r4
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	e7da      	b.n	8008376 <_free_r+0x26>
 80083c0:	d902      	bls.n	80083c8 <_free_r+0x78>
 80083c2:	230c      	movs	r3, #12
 80083c4:	6003      	str	r3, [r0, #0]
 80083c6:	e7d6      	b.n	8008376 <_free_r+0x26>
 80083c8:	6825      	ldr	r5, [r4, #0]
 80083ca:	1961      	adds	r1, r4, r5
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf04      	itt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	bf04      	itt	eq
 80083d8:	1949      	addeq	r1, r1, r5
 80083da:	6021      	streq	r1, [r4, #0]
 80083dc:	6054      	str	r4, [r2, #4]
 80083de:	e7ca      	b.n	8008376 <_free_r+0x26>
 80083e0:	b003      	add	sp, #12
 80083e2:	bd30      	pop	{r4, r5, pc}
 80083e4:	20009ae0 	.word	0x20009ae0

080083e8 <sbrk_aligned>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4e0e      	ldr	r6, [pc, #56]	; (8008424 <sbrk_aligned+0x3c>)
 80083ec:	460c      	mov	r4, r1
 80083ee:	6831      	ldr	r1, [r6, #0]
 80083f0:	4605      	mov	r5, r0
 80083f2:	b911      	cbnz	r1, 80083fa <sbrk_aligned+0x12>
 80083f4:	f000 f8a4 	bl	8008540 <_sbrk_r>
 80083f8:	6030      	str	r0, [r6, #0]
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f89f 	bl	8008540 <_sbrk_r>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d00a      	beq.n	800841c <sbrk_aligned+0x34>
 8008406:	1cc4      	adds	r4, r0, #3
 8008408:	f024 0403 	bic.w	r4, r4, #3
 800840c:	42a0      	cmp	r0, r4
 800840e:	d007      	beq.n	8008420 <sbrk_aligned+0x38>
 8008410:	1a21      	subs	r1, r4, r0
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f894 	bl	8008540 <_sbrk_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d101      	bne.n	8008420 <sbrk_aligned+0x38>
 800841c:	f04f 34ff 	mov.w	r4, #4294967295
 8008420:	4620      	mov	r0, r4
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	20009ae4 	.word	0x20009ae4

08008428 <_malloc_r>:
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	1ccd      	adds	r5, r1, #3
 800842e:	f025 0503 	bic.w	r5, r5, #3
 8008432:	3508      	adds	r5, #8
 8008434:	2d0c      	cmp	r5, #12
 8008436:	bf38      	it	cc
 8008438:	250c      	movcc	r5, #12
 800843a:	2d00      	cmp	r5, #0
 800843c:	4607      	mov	r7, r0
 800843e:	db01      	blt.n	8008444 <_malloc_r+0x1c>
 8008440:	42a9      	cmp	r1, r5
 8008442:	d905      	bls.n	8008450 <_malloc_r+0x28>
 8008444:	230c      	movs	r3, #12
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	2600      	movs	r6, #0
 800844a:	4630      	mov	r0, r6
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	4e2e      	ldr	r6, [pc, #184]	; (800850c <_malloc_r+0xe4>)
 8008452:	f000 f97d 	bl	8008750 <__malloc_lock>
 8008456:	6833      	ldr	r3, [r6, #0]
 8008458:	461c      	mov	r4, r3
 800845a:	bb34      	cbnz	r4, 80084aa <_malloc_r+0x82>
 800845c:	4629      	mov	r1, r5
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ffc2 	bl	80083e8 <sbrk_aligned>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	4604      	mov	r4, r0
 8008468:	d14d      	bne.n	8008506 <_malloc_r+0xde>
 800846a:	6834      	ldr	r4, [r6, #0]
 800846c:	4626      	mov	r6, r4
 800846e:	2e00      	cmp	r6, #0
 8008470:	d140      	bne.n	80084f4 <_malloc_r+0xcc>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	4631      	mov	r1, r6
 8008476:	4638      	mov	r0, r7
 8008478:	eb04 0803 	add.w	r8, r4, r3
 800847c:	f000 f860 	bl	8008540 <_sbrk_r>
 8008480:	4580      	cmp	r8, r0
 8008482:	d13a      	bne.n	80084fa <_malloc_r+0xd2>
 8008484:	6821      	ldr	r1, [r4, #0]
 8008486:	3503      	adds	r5, #3
 8008488:	1a6d      	subs	r5, r5, r1
 800848a:	f025 0503 	bic.w	r5, r5, #3
 800848e:	3508      	adds	r5, #8
 8008490:	2d0c      	cmp	r5, #12
 8008492:	bf38      	it	cc
 8008494:	250c      	movcc	r5, #12
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ffa5 	bl	80083e8 <sbrk_aligned>
 800849e:	3001      	adds	r0, #1
 80084a0:	d02b      	beq.n	80084fa <_malloc_r+0xd2>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	442b      	add	r3, r5
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	e00e      	b.n	80084c8 <_malloc_r+0xa0>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	1b52      	subs	r2, r2, r5
 80084ae:	d41e      	bmi.n	80084ee <_malloc_r+0xc6>
 80084b0:	2a0b      	cmp	r2, #11
 80084b2:	d916      	bls.n	80084e2 <_malloc_r+0xba>
 80084b4:	1961      	adds	r1, r4, r5
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	6025      	str	r5, [r4, #0]
 80084ba:	bf18      	it	ne
 80084bc:	6059      	strne	r1, [r3, #4]
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	bf08      	it	eq
 80084c2:	6031      	streq	r1, [r6, #0]
 80084c4:	5162      	str	r2, [r4, r5]
 80084c6:	604b      	str	r3, [r1, #4]
 80084c8:	4638      	mov	r0, r7
 80084ca:	f104 060b 	add.w	r6, r4, #11
 80084ce:	f000 f945 	bl	800875c <__malloc_unlock>
 80084d2:	f026 0607 	bic.w	r6, r6, #7
 80084d6:	1d23      	adds	r3, r4, #4
 80084d8:	1af2      	subs	r2, r6, r3
 80084da:	d0b6      	beq.n	800844a <_malloc_r+0x22>
 80084dc:	1b9b      	subs	r3, r3, r6
 80084de:	50a3      	str	r3, [r4, r2]
 80084e0:	e7b3      	b.n	800844a <_malloc_r+0x22>
 80084e2:	6862      	ldr	r2, [r4, #4]
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	bf0c      	ite	eq
 80084e8:	6032      	streq	r2, [r6, #0]
 80084ea:	605a      	strne	r2, [r3, #4]
 80084ec:	e7ec      	b.n	80084c8 <_malloc_r+0xa0>
 80084ee:	4623      	mov	r3, r4
 80084f0:	6864      	ldr	r4, [r4, #4]
 80084f2:	e7b2      	b.n	800845a <_malloc_r+0x32>
 80084f4:	4634      	mov	r4, r6
 80084f6:	6876      	ldr	r6, [r6, #4]
 80084f8:	e7b9      	b.n	800846e <_malloc_r+0x46>
 80084fa:	230c      	movs	r3, #12
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4638      	mov	r0, r7
 8008500:	f000 f92c 	bl	800875c <__malloc_unlock>
 8008504:	e7a1      	b.n	800844a <_malloc_r+0x22>
 8008506:	6025      	str	r5, [r4, #0]
 8008508:	e7de      	b.n	80084c8 <_malloc_r+0xa0>
 800850a:	bf00      	nop
 800850c:	20009ae0 	.word	0x20009ae0

08008510 <iprintf>:
 8008510:	b40f      	push	{r0, r1, r2, r3}
 8008512:	4b0a      	ldr	r3, [pc, #40]	; (800853c <iprintf+0x2c>)
 8008514:	b513      	push	{r0, r1, r4, lr}
 8008516:	681c      	ldr	r4, [r3, #0]
 8008518:	b124      	cbz	r4, 8008524 <iprintf+0x14>
 800851a:	69a3      	ldr	r3, [r4, #24]
 800851c:	b913      	cbnz	r3, 8008524 <iprintf+0x14>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 f876 	bl	8008610 <__sinit>
 8008524:	ab05      	add	r3, sp, #20
 8008526:	9a04      	ldr	r2, [sp, #16]
 8008528:	68a1      	ldr	r1, [r4, #8]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	4620      	mov	r0, r4
 800852e:	f000 f945 	bl	80087bc <_vfiprintf_r>
 8008532:	b002      	add	sp, #8
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	b004      	add	sp, #16
 800853a:	4770      	bx	lr
 800853c:	2000009c 	.word	0x2000009c

08008540 <_sbrk_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d06      	ldr	r5, [pc, #24]	; (800855c <_sbrk_r+0x1c>)
 8008544:	2300      	movs	r3, #0
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	f7f8 fd68 	bl	8001020 <_sbrk>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_sbrk_r+0x1a>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_sbrk_r+0x1a>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20009aec 	.word	0x20009aec

08008560 <std>:
 8008560:	2300      	movs	r3, #0
 8008562:	b510      	push	{r4, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	e9c0 3300 	strd	r3, r3, [r0]
 800856a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856e:	6083      	str	r3, [r0, #8]
 8008570:	8181      	strh	r1, [r0, #12]
 8008572:	6643      	str	r3, [r0, #100]	; 0x64
 8008574:	81c2      	strh	r2, [r0, #14]
 8008576:	6183      	str	r3, [r0, #24]
 8008578:	4619      	mov	r1, r3
 800857a:	2208      	movs	r2, #8
 800857c:	305c      	adds	r0, #92	; 0x5c
 800857e:	f7ff fedf 	bl	8008340 <memset>
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x38>)
 8008584:	6263      	str	r3, [r4, #36]	; 0x24
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <std+0x3c>)
 8008588:	62a3      	str	r3, [r4, #40]	; 0x28
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <std+0x40>)
 800858c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <std+0x44>)
 8008590:	6224      	str	r4, [r4, #32]
 8008592:	6323      	str	r3, [r4, #48]	; 0x30
 8008594:	bd10      	pop	{r4, pc}
 8008596:	bf00      	nop
 8008598:	08008d45 	.word	0x08008d45
 800859c:	08008d67 	.word	0x08008d67
 80085a0:	08008d9f 	.word	0x08008d9f
 80085a4:	08008dc3 	.word	0x08008dc3

080085a8 <_cleanup_r>:
 80085a8:	4901      	ldr	r1, [pc, #4]	; (80085b0 <_cleanup_r+0x8>)
 80085aa:	f000 b8af 	b.w	800870c <_fwalk_reent>
 80085ae:	bf00      	nop
 80085b0:	0800909d 	.word	0x0800909d

080085b4 <__sfmoreglue>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	2268      	movs	r2, #104	; 0x68
 80085b8:	1e4d      	subs	r5, r1, #1
 80085ba:	4355      	muls	r5, r2
 80085bc:	460e      	mov	r6, r1
 80085be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085c2:	f7ff ff31 	bl	8008428 <_malloc_r>
 80085c6:	4604      	mov	r4, r0
 80085c8:	b140      	cbz	r0, 80085dc <__sfmoreglue+0x28>
 80085ca:	2100      	movs	r1, #0
 80085cc:	e9c0 1600 	strd	r1, r6, [r0]
 80085d0:	300c      	adds	r0, #12
 80085d2:	60a0      	str	r0, [r4, #8]
 80085d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085d8:	f7ff feb2 	bl	8008340 <memset>
 80085dc:	4620      	mov	r0, r4
 80085de:	bd70      	pop	{r4, r5, r6, pc}

080085e0 <__sfp_lock_acquire>:
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <__sfp_lock_acquire+0x8>)
 80085e2:	f000 b8b3 	b.w	800874c <__retarget_lock_acquire_recursive>
 80085e6:	bf00      	nop
 80085e8:	20009ae9 	.word	0x20009ae9

080085ec <__sfp_lock_release>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sfp_lock_release+0x8>)
 80085ee:	f000 b8ae 	b.w	800874e <__retarget_lock_release_recursive>
 80085f2:	bf00      	nop
 80085f4:	20009ae9 	.word	0x20009ae9

080085f8 <__sinit_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sinit_lock_acquire+0x8>)
 80085fa:	f000 b8a7 	b.w	800874c <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	20009aea 	.word	0x20009aea

08008604 <__sinit_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sinit_lock_release+0x8>)
 8008606:	f000 b8a2 	b.w	800874e <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	20009aea 	.word	0x20009aea

08008610 <__sinit>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4604      	mov	r4, r0
 8008614:	f7ff fff0 	bl	80085f8 <__sinit_lock_acquire>
 8008618:	69a3      	ldr	r3, [r4, #24]
 800861a:	b11b      	cbz	r3, 8008624 <__sinit+0x14>
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f7ff bff0 	b.w	8008604 <__sinit_lock_release>
 8008624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008628:	6523      	str	r3, [r4, #80]	; 0x50
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <__sinit+0x68>)
 800862c:	4a13      	ldr	r2, [pc, #76]	; (800867c <__sinit+0x6c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	62a2      	str	r2, [r4, #40]	; 0x28
 8008632:	42a3      	cmp	r3, r4
 8008634:	bf04      	itt	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	61a3      	streq	r3, [r4, #24]
 800863a:	4620      	mov	r0, r4
 800863c:	f000 f820 	bl	8008680 <__sfp>
 8008640:	6060      	str	r0, [r4, #4]
 8008642:	4620      	mov	r0, r4
 8008644:	f000 f81c 	bl	8008680 <__sfp>
 8008648:	60a0      	str	r0, [r4, #8]
 800864a:	4620      	mov	r0, r4
 800864c:	f000 f818 	bl	8008680 <__sfp>
 8008650:	2200      	movs	r2, #0
 8008652:	60e0      	str	r0, [r4, #12]
 8008654:	2104      	movs	r1, #4
 8008656:	6860      	ldr	r0, [r4, #4]
 8008658:	f7ff ff82 	bl	8008560 <std>
 800865c:	68a0      	ldr	r0, [r4, #8]
 800865e:	2201      	movs	r2, #1
 8008660:	2109      	movs	r1, #9
 8008662:	f7ff ff7d 	bl	8008560 <std>
 8008666:	68e0      	ldr	r0, [r4, #12]
 8008668:	2202      	movs	r2, #2
 800866a:	2112      	movs	r1, #18
 800866c:	f7ff ff78 	bl	8008560 <std>
 8008670:	2301      	movs	r3, #1
 8008672:	61a3      	str	r3, [r4, #24]
 8008674:	e7d2      	b.n	800861c <__sinit+0xc>
 8008676:	bf00      	nop
 8008678:	08009808 	.word	0x08009808
 800867c:	080085a9 	.word	0x080085a9

08008680 <__sfp>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	4607      	mov	r7, r0
 8008684:	f7ff ffac 	bl	80085e0 <__sfp_lock_acquire>
 8008688:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <__sfp+0x84>)
 800868a:	681e      	ldr	r6, [r3, #0]
 800868c:	69b3      	ldr	r3, [r6, #24]
 800868e:	b913      	cbnz	r3, 8008696 <__sfp+0x16>
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff ffbd 	bl	8008610 <__sinit>
 8008696:	3648      	adds	r6, #72	; 0x48
 8008698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800869c:	3b01      	subs	r3, #1
 800869e:	d503      	bpl.n	80086a8 <__sfp+0x28>
 80086a0:	6833      	ldr	r3, [r6, #0]
 80086a2:	b30b      	cbz	r3, 80086e8 <__sfp+0x68>
 80086a4:	6836      	ldr	r6, [r6, #0]
 80086a6:	e7f7      	b.n	8008698 <__sfp+0x18>
 80086a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086ac:	b9d5      	cbnz	r5, 80086e4 <__sfp+0x64>
 80086ae:	4b16      	ldr	r3, [pc, #88]	; (8008708 <__sfp+0x88>)
 80086b0:	60e3      	str	r3, [r4, #12]
 80086b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b6:	6665      	str	r5, [r4, #100]	; 0x64
 80086b8:	f000 f847 	bl	800874a <__retarget_lock_init_recursive>
 80086bc:	f7ff ff96 	bl	80085ec <__sfp_lock_release>
 80086c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086c8:	6025      	str	r5, [r4, #0]
 80086ca:	61a5      	str	r5, [r4, #24]
 80086cc:	2208      	movs	r2, #8
 80086ce:	4629      	mov	r1, r5
 80086d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d4:	f7ff fe34 	bl	8008340 <memset>
 80086d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086e0:	4620      	mov	r0, r4
 80086e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e4:	3468      	adds	r4, #104	; 0x68
 80086e6:	e7d9      	b.n	800869c <__sfp+0x1c>
 80086e8:	2104      	movs	r1, #4
 80086ea:	4638      	mov	r0, r7
 80086ec:	f7ff ff62 	bl	80085b4 <__sfmoreglue>
 80086f0:	4604      	mov	r4, r0
 80086f2:	6030      	str	r0, [r6, #0]
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d1d5      	bne.n	80086a4 <__sfp+0x24>
 80086f8:	f7ff ff78 	bl	80085ec <__sfp_lock_release>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	e7ee      	b.n	80086e0 <__sfp+0x60>
 8008702:	bf00      	nop
 8008704:	08009808 	.word	0x08009808
 8008708:	ffff0001 	.word	0xffff0001

0800870c <_fwalk_reent>:
 800870c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008710:	4606      	mov	r6, r0
 8008712:	4688      	mov	r8, r1
 8008714:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008718:	2700      	movs	r7, #0
 800871a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871e:	f1b9 0901 	subs.w	r9, r9, #1
 8008722:	d505      	bpl.n	8008730 <_fwalk_reent+0x24>
 8008724:	6824      	ldr	r4, [r4, #0]
 8008726:	2c00      	cmp	r4, #0
 8008728:	d1f7      	bne.n	800871a <_fwalk_reent+0xe>
 800872a:	4638      	mov	r0, r7
 800872c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008730:	89ab      	ldrh	r3, [r5, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d907      	bls.n	8008746 <_fwalk_reent+0x3a>
 8008736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800873a:	3301      	adds	r3, #1
 800873c:	d003      	beq.n	8008746 <_fwalk_reent+0x3a>
 800873e:	4629      	mov	r1, r5
 8008740:	4630      	mov	r0, r6
 8008742:	47c0      	blx	r8
 8008744:	4307      	orrs	r7, r0
 8008746:	3568      	adds	r5, #104	; 0x68
 8008748:	e7e9      	b.n	800871e <_fwalk_reent+0x12>

0800874a <__retarget_lock_init_recursive>:
 800874a:	4770      	bx	lr

0800874c <__retarget_lock_acquire_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_release_recursive>:
 800874e:	4770      	bx	lr

08008750 <__malloc_lock>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__malloc_lock+0x8>)
 8008752:	f7ff bffb 	b.w	800874c <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	20009ae8 	.word	0x20009ae8

0800875c <__malloc_unlock>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__malloc_unlock+0x8>)
 800875e:	f7ff bff6 	b.w	800874e <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	20009ae8 	.word	0x20009ae8

08008768 <__sfputc_r>:
 8008768:	6893      	ldr	r3, [r2, #8]
 800876a:	3b01      	subs	r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	b410      	push	{r4}
 8008770:	6093      	str	r3, [r2, #8]
 8008772:	da08      	bge.n	8008786 <__sfputc_r+0x1e>
 8008774:	6994      	ldr	r4, [r2, #24]
 8008776:	42a3      	cmp	r3, r4
 8008778:	db01      	blt.n	800877e <__sfputc_r+0x16>
 800877a:	290a      	cmp	r1, #10
 800877c:	d103      	bne.n	8008786 <__sfputc_r+0x1e>
 800877e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008782:	f000 bb23 	b.w	8008dcc <__swbuf_r>
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	1c58      	adds	r0, r3, #1
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	7019      	strb	r1, [r3, #0]
 800878e:	4608      	mov	r0, r1
 8008790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008794:	4770      	bx	lr

08008796 <__sfputs_r>:
 8008796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	4614      	mov	r4, r2
 800879e:	18d5      	adds	r5, r2, r3
 80087a0:	42ac      	cmp	r4, r5
 80087a2:	d101      	bne.n	80087a8 <__sfputs_r+0x12>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e007      	b.n	80087b8 <__sfputs_r+0x22>
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	463a      	mov	r2, r7
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ffda 	bl	8008768 <__sfputc_r>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d1f3      	bne.n	80087a0 <__sfputs_r+0xa>
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087bc <_vfiprintf_r>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	460d      	mov	r5, r1
 80087c2:	b09d      	sub	sp, #116	; 0x74
 80087c4:	4614      	mov	r4, r2
 80087c6:	4698      	mov	r8, r3
 80087c8:	4606      	mov	r6, r0
 80087ca:	b118      	cbz	r0, 80087d4 <_vfiprintf_r+0x18>
 80087cc:	6983      	ldr	r3, [r0, #24]
 80087ce:	b90b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x18>
 80087d0:	f7ff ff1e 	bl	8008610 <__sinit>
 80087d4:	4b89      	ldr	r3, [pc, #548]	; (80089fc <_vfiprintf_r+0x240>)
 80087d6:	429d      	cmp	r5, r3
 80087d8:	d11b      	bne.n	8008812 <_vfiprintf_r+0x56>
 80087da:	6875      	ldr	r5, [r6, #4]
 80087dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087de:	07d9      	lsls	r1, r3, #31
 80087e0:	d405      	bmi.n	80087ee <_vfiprintf_r+0x32>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	059a      	lsls	r2, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_vfiprintf_r+0x32>
 80087e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ea:	f7ff ffaf 	bl	800874c <__retarget_lock_acquire_recursive>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	071b      	lsls	r3, r3, #28
 80087f2:	d501      	bpl.n	80087f8 <_vfiprintf_r+0x3c>
 80087f4:	692b      	ldr	r3, [r5, #16]
 80087f6:	b9eb      	cbnz	r3, 8008834 <_vfiprintf_r+0x78>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fb4a 	bl	8008e94 <__swsetup_r>
 8008800:	b1c0      	cbz	r0, 8008834 <_vfiprintf_r+0x78>
 8008802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008804:	07dc      	lsls	r4, r3, #31
 8008806:	d50e      	bpl.n	8008826 <_vfiprintf_r+0x6a>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	b01d      	add	sp, #116	; 0x74
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	4b7b      	ldr	r3, [pc, #492]	; (8008a00 <_vfiprintf_r+0x244>)
 8008814:	429d      	cmp	r5, r3
 8008816:	d101      	bne.n	800881c <_vfiprintf_r+0x60>
 8008818:	68b5      	ldr	r5, [r6, #8]
 800881a:	e7df      	b.n	80087dc <_vfiprintf_r+0x20>
 800881c:	4b79      	ldr	r3, [pc, #484]	; (8008a04 <_vfiprintf_r+0x248>)
 800881e:	429d      	cmp	r5, r3
 8008820:	bf08      	it	eq
 8008822:	68f5      	ldreq	r5, [r6, #12]
 8008824:	e7da      	b.n	80087dc <_vfiprintf_r+0x20>
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	0598      	lsls	r0, r3, #22
 800882a:	d4ed      	bmi.n	8008808 <_vfiprintf_r+0x4c>
 800882c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800882e:	f7ff ff8e 	bl	800874e <__retarget_lock_release_recursive>
 8008832:	e7e9      	b.n	8008808 <_vfiprintf_r+0x4c>
 8008834:	2300      	movs	r3, #0
 8008836:	9309      	str	r3, [sp, #36]	; 0x24
 8008838:	2320      	movs	r3, #32
 800883a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800883e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008842:	2330      	movs	r3, #48	; 0x30
 8008844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a08 <_vfiprintf_r+0x24c>
 8008848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800884c:	f04f 0901 	mov.w	r9, #1
 8008850:	4623      	mov	r3, r4
 8008852:	469a      	mov	sl, r3
 8008854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008858:	b10a      	cbz	r2, 800885e <_vfiprintf_r+0xa2>
 800885a:	2a25      	cmp	r2, #37	; 0x25
 800885c:	d1f9      	bne.n	8008852 <_vfiprintf_r+0x96>
 800885e:	ebba 0b04 	subs.w	fp, sl, r4
 8008862:	d00b      	beq.n	800887c <_vfiprintf_r+0xc0>
 8008864:	465b      	mov	r3, fp
 8008866:	4622      	mov	r2, r4
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ff93 	bl	8008796 <__sfputs_r>
 8008870:	3001      	adds	r0, #1
 8008872:	f000 80aa 	beq.w	80089ca <_vfiprintf_r+0x20e>
 8008876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008878:	445a      	add	r2, fp
 800887a:	9209      	str	r2, [sp, #36]	; 0x24
 800887c:	f89a 3000 	ldrb.w	r3, [sl]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 80a2 	beq.w	80089ca <_vfiprintf_r+0x20e>
 8008886:	2300      	movs	r3, #0
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008890:	f10a 0a01 	add.w	sl, sl, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	9307      	str	r3, [sp, #28]
 8008898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800889c:	931a      	str	r3, [sp, #104]	; 0x68
 800889e:	4654      	mov	r4, sl
 80088a0:	2205      	movs	r2, #5
 80088a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a6:	4858      	ldr	r0, [pc, #352]	; (8008a08 <_vfiprintf_r+0x24c>)
 80088a8:	f7f7 fcaa 	bl	8000200 <memchr>
 80088ac:	9a04      	ldr	r2, [sp, #16]
 80088ae:	b9d8      	cbnz	r0, 80088e8 <_vfiprintf_r+0x12c>
 80088b0:	06d1      	lsls	r1, r2, #27
 80088b2:	bf44      	itt	mi
 80088b4:	2320      	movmi	r3, #32
 80088b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ba:	0713      	lsls	r3, r2, #28
 80088bc:	bf44      	itt	mi
 80088be:	232b      	movmi	r3, #43	; 0x2b
 80088c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c4:	f89a 3000 	ldrb.w	r3, [sl]
 80088c8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ca:	d015      	beq.n	80088f8 <_vfiprintf_r+0x13c>
 80088cc:	9a07      	ldr	r2, [sp, #28]
 80088ce:	4654      	mov	r4, sl
 80088d0:	2000      	movs	r0, #0
 80088d2:	f04f 0c0a 	mov.w	ip, #10
 80088d6:	4621      	mov	r1, r4
 80088d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088dc:	3b30      	subs	r3, #48	; 0x30
 80088de:	2b09      	cmp	r3, #9
 80088e0:	d94e      	bls.n	8008980 <_vfiprintf_r+0x1c4>
 80088e2:	b1b0      	cbz	r0, 8008912 <_vfiprintf_r+0x156>
 80088e4:	9207      	str	r2, [sp, #28]
 80088e6:	e014      	b.n	8008912 <_vfiprintf_r+0x156>
 80088e8:	eba0 0308 	sub.w	r3, r0, r8
 80088ec:	fa09 f303 	lsl.w	r3, r9, r3
 80088f0:	4313      	orrs	r3, r2
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	46a2      	mov	sl, r4
 80088f6:	e7d2      	b.n	800889e <_vfiprintf_r+0xe2>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	1d19      	adds	r1, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	9103      	str	r1, [sp, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfbb      	ittet	lt
 8008904:	425b      	neglt	r3, r3
 8008906:	f042 0202 	orrlt.w	r2, r2, #2
 800890a:	9307      	strge	r3, [sp, #28]
 800890c:	9307      	strlt	r3, [sp, #28]
 800890e:	bfb8      	it	lt
 8008910:	9204      	strlt	r2, [sp, #16]
 8008912:	7823      	ldrb	r3, [r4, #0]
 8008914:	2b2e      	cmp	r3, #46	; 0x2e
 8008916:	d10c      	bne.n	8008932 <_vfiprintf_r+0x176>
 8008918:	7863      	ldrb	r3, [r4, #1]
 800891a:	2b2a      	cmp	r3, #42	; 0x2a
 800891c:	d135      	bne.n	800898a <_vfiprintf_r+0x1ce>
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	9203      	str	r2, [sp, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb8      	it	lt
 800892a:	f04f 33ff 	movlt.w	r3, #4294967295
 800892e:	3402      	adds	r4, #2
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a18 <_vfiprintf_r+0x25c>
 8008936:	7821      	ldrb	r1, [r4, #0]
 8008938:	2203      	movs	r2, #3
 800893a:	4650      	mov	r0, sl
 800893c:	f7f7 fc60 	bl	8000200 <memchr>
 8008940:	b140      	cbz	r0, 8008954 <_vfiprintf_r+0x198>
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	eba0 000a 	sub.w	r0, r0, sl
 8008948:	fa03 f000 	lsl.w	r0, r3, r0
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	4303      	orrs	r3, r0
 8008950:	3401      	adds	r4, #1
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008958:	482c      	ldr	r0, [pc, #176]	; (8008a0c <_vfiprintf_r+0x250>)
 800895a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895e:	2206      	movs	r2, #6
 8008960:	f7f7 fc4e 	bl	8000200 <memchr>
 8008964:	2800      	cmp	r0, #0
 8008966:	d03f      	beq.n	80089e8 <_vfiprintf_r+0x22c>
 8008968:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <_vfiprintf_r+0x254>)
 800896a:	bb1b      	cbnz	r3, 80089b4 <_vfiprintf_r+0x1f8>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	3307      	adds	r3, #7
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	3308      	adds	r3, #8
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	443b      	add	r3, r7
 800897c:	9309      	str	r3, [sp, #36]	; 0x24
 800897e:	e767      	b.n	8008850 <_vfiprintf_r+0x94>
 8008980:	fb0c 3202 	mla	r2, ip, r2, r3
 8008984:	460c      	mov	r4, r1
 8008986:	2001      	movs	r0, #1
 8008988:	e7a5      	b.n	80088d6 <_vfiprintf_r+0x11a>
 800898a:	2300      	movs	r3, #0
 800898c:	3401      	adds	r4, #1
 800898e:	9305      	str	r3, [sp, #20]
 8008990:	4619      	mov	r1, r3
 8008992:	f04f 0c0a 	mov.w	ip, #10
 8008996:	4620      	mov	r0, r4
 8008998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800899c:	3a30      	subs	r2, #48	; 0x30
 800899e:	2a09      	cmp	r2, #9
 80089a0:	d903      	bls.n	80089aa <_vfiprintf_r+0x1ee>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0c5      	beq.n	8008932 <_vfiprintf_r+0x176>
 80089a6:	9105      	str	r1, [sp, #20]
 80089a8:	e7c3      	b.n	8008932 <_vfiprintf_r+0x176>
 80089aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ae:	4604      	mov	r4, r0
 80089b0:	2301      	movs	r3, #1
 80089b2:	e7f0      	b.n	8008996 <_vfiprintf_r+0x1da>
 80089b4:	ab03      	add	r3, sp, #12
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	462a      	mov	r2, r5
 80089ba:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <_vfiprintf_r+0x258>)
 80089bc:	a904      	add	r1, sp, #16
 80089be:	4630      	mov	r0, r6
 80089c0:	f3af 8000 	nop.w
 80089c4:	4607      	mov	r7, r0
 80089c6:	1c78      	adds	r0, r7, #1
 80089c8:	d1d6      	bne.n	8008978 <_vfiprintf_r+0x1bc>
 80089ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089cc:	07d9      	lsls	r1, r3, #31
 80089ce:	d405      	bmi.n	80089dc <_vfiprintf_r+0x220>
 80089d0:	89ab      	ldrh	r3, [r5, #12]
 80089d2:	059a      	lsls	r2, r3, #22
 80089d4:	d402      	bmi.n	80089dc <_vfiprintf_r+0x220>
 80089d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d8:	f7ff feb9 	bl	800874e <__retarget_lock_release_recursive>
 80089dc:	89ab      	ldrh	r3, [r5, #12]
 80089de:	065b      	lsls	r3, r3, #25
 80089e0:	f53f af12 	bmi.w	8008808 <_vfiprintf_r+0x4c>
 80089e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089e6:	e711      	b.n	800880c <_vfiprintf_r+0x50>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <_vfiprintf_r+0x258>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f880 	bl	8008af8 <_printf_i>
 80089f8:	e7e4      	b.n	80089c4 <_vfiprintf_r+0x208>
 80089fa:	bf00      	nop
 80089fc:	0800982c 	.word	0x0800982c
 8008a00:	0800984c 	.word	0x0800984c
 8008a04:	0800980c 	.word	0x0800980c
 8008a08:	0800986c 	.word	0x0800986c
 8008a0c:	08009876 	.word	0x08009876
 8008a10:	00000000 	.word	0x00000000
 8008a14:	08008797 	.word	0x08008797
 8008a18:	08009872 	.word	0x08009872

08008a1c <_printf_common>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	4616      	mov	r6, r2
 8008a22:	4699      	mov	r9, r3
 8008a24:	688a      	ldr	r2, [r1, #8]
 8008a26:	690b      	ldr	r3, [r1, #16]
 8008a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	bfb8      	it	lt
 8008a30:	4613      	movlt	r3, r2
 8008a32:	6033      	str	r3, [r6, #0]
 8008a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a38:	4607      	mov	r7, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	b10a      	cbz	r2, 8008a42 <_printf_common+0x26>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6033      	str	r3, [r6, #0]
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	0699      	lsls	r1, r3, #26
 8008a46:	bf42      	ittt	mi
 8008a48:	6833      	ldrmi	r3, [r6, #0]
 8008a4a:	3302      	addmi	r3, #2
 8008a4c:	6033      	strmi	r3, [r6, #0]
 8008a4e:	6825      	ldr	r5, [r4, #0]
 8008a50:	f015 0506 	ands.w	r5, r5, #6
 8008a54:	d106      	bne.n	8008a64 <_printf_common+0x48>
 8008a56:	f104 0a19 	add.w	sl, r4, #25
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	6832      	ldr	r2, [r6, #0]
 8008a5e:	1a9b      	subs	r3, r3, r2
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dc26      	bgt.n	8008ab2 <_printf_common+0x96>
 8008a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a68:	1e13      	subs	r3, r2, #0
 8008a6a:	6822      	ldr	r2, [r4, #0]
 8008a6c:	bf18      	it	ne
 8008a6e:	2301      	movne	r3, #1
 8008a70:	0692      	lsls	r2, r2, #26
 8008a72:	d42b      	bmi.n	8008acc <_printf_common+0xb0>
 8008a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a78:	4649      	mov	r1, r9
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	47c0      	blx	r8
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d01e      	beq.n	8008ac0 <_printf_common+0xa4>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	68e5      	ldr	r5, [r4, #12]
 8008a86:	6832      	ldr	r2, [r6, #0]
 8008a88:	f003 0306 	and.w	r3, r3, #6
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	bf08      	it	eq
 8008a90:	1aad      	subeq	r5, r5, r2
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	6922      	ldr	r2, [r4, #16]
 8008a96:	bf0c      	ite	eq
 8008a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a9c:	2500      	movne	r5, #0
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	bfc4      	itt	gt
 8008aa2:	1a9b      	subgt	r3, r3, r2
 8008aa4:	18ed      	addgt	r5, r5, r3
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	341a      	adds	r4, #26
 8008aaa:	42b5      	cmp	r5, r6
 8008aac:	d11a      	bne.n	8008ae4 <_printf_common+0xc8>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e008      	b.n	8008ac4 <_printf_common+0xa8>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	4638      	mov	r0, r7
 8008aba:	47c0      	blx	r8
 8008abc:	3001      	adds	r0, #1
 8008abe:	d103      	bne.n	8008ac8 <_printf_common+0xac>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac8:	3501      	adds	r5, #1
 8008aca:	e7c6      	b.n	8008a5a <_printf_common+0x3e>
 8008acc:	18e1      	adds	r1, r4, r3
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	2030      	movs	r0, #48	; 0x30
 8008ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ad6:	4422      	add	r2, r4
 8008ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ae0:	3302      	adds	r3, #2
 8008ae2:	e7c7      	b.n	8008a74 <_printf_common+0x58>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4638      	mov	r0, r7
 8008aec:	47c0      	blx	r8
 8008aee:	3001      	adds	r0, #1
 8008af0:	d0e6      	beq.n	8008ac0 <_printf_common+0xa4>
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7d9      	b.n	8008aaa <_printf_common+0x8e>
	...

08008af8 <_printf_i>:
 8008af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	7e0f      	ldrb	r7, [r1, #24]
 8008afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b00:	2f78      	cmp	r7, #120	; 0x78
 8008b02:	4691      	mov	r9, r2
 8008b04:	4680      	mov	r8, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	469a      	mov	sl, r3
 8008b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b0e:	d807      	bhi.n	8008b20 <_printf_i+0x28>
 8008b10:	2f62      	cmp	r7, #98	; 0x62
 8008b12:	d80a      	bhi.n	8008b2a <_printf_i+0x32>
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	f000 80d8 	beq.w	8008cca <_printf_i+0x1d2>
 8008b1a:	2f58      	cmp	r7, #88	; 0x58
 8008b1c:	f000 80a3 	beq.w	8008c66 <_printf_i+0x16e>
 8008b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b28:	e03a      	b.n	8008ba0 <_printf_i+0xa8>
 8008b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b2e:	2b15      	cmp	r3, #21
 8008b30:	d8f6      	bhi.n	8008b20 <_printf_i+0x28>
 8008b32:	a101      	add	r1, pc, #4	; (adr r1, 8008b38 <_printf_i+0x40>)
 8008b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b38:	08008b91 	.word	0x08008b91
 8008b3c:	08008ba5 	.word	0x08008ba5
 8008b40:	08008b21 	.word	0x08008b21
 8008b44:	08008b21 	.word	0x08008b21
 8008b48:	08008b21 	.word	0x08008b21
 8008b4c:	08008b21 	.word	0x08008b21
 8008b50:	08008ba5 	.word	0x08008ba5
 8008b54:	08008b21 	.word	0x08008b21
 8008b58:	08008b21 	.word	0x08008b21
 8008b5c:	08008b21 	.word	0x08008b21
 8008b60:	08008b21 	.word	0x08008b21
 8008b64:	08008cb1 	.word	0x08008cb1
 8008b68:	08008bd5 	.word	0x08008bd5
 8008b6c:	08008c93 	.word	0x08008c93
 8008b70:	08008b21 	.word	0x08008b21
 8008b74:	08008b21 	.word	0x08008b21
 8008b78:	08008cd3 	.word	0x08008cd3
 8008b7c:	08008b21 	.word	0x08008b21
 8008b80:	08008bd5 	.word	0x08008bd5
 8008b84:	08008b21 	.word	0x08008b21
 8008b88:	08008b21 	.word	0x08008b21
 8008b8c:	08008c9b 	.word	0x08008c9b
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	602a      	str	r2, [r5, #0]
 8008b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0a3      	b.n	8008cec <_printf_i+0x1f4>
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	6829      	ldr	r1, [r5, #0]
 8008ba8:	0606      	lsls	r6, r0, #24
 8008baa:	f101 0304 	add.w	r3, r1, #4
 8008bae:	d50a      	bpl.n	8008bc6 <_printf_i+0xce>
 8008bb0:	680e      	ldr	r6, [r1, #0]
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	da03      	bge.n	8008bc0 <_printf_i+0xc8>
 8008bb8:	232d      	movs	r3, #45	; 0x2d
 8008bba:	4276      	negs	r6, r6
 8008bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc0:	485e      	ldr	r0, [pc, #376]	; (8008d3c <_printf_i+0x244>)
 8008bc2:	230a      	movs	r3, #10
 8008bc4:	e019      	b.n	8008bfa <_printf_i+0x102>
 8008bc6:	680e      	ldr	r6, [r1, #0]
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bce:	bf18      	it	ne
 8008bd0:	b236      	sxthne	r6, r6
 8008bd2:	e7ef      	b.n	8008bb4 <_printf_i+0xbc>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	6820      	ldr	r0, [r4, #0]
 8008bd8:	1d19      	adds	r1, r3, #4
 8008bda:	6029      	str	r1, [r5, #0]
 8008bdc:	0601      	lsls	r1, r0, #24
 8008bde:	d501      	bpl.n	8008be4 <_printf_i+0xec>
 8008be0:	681e      	ldr	r6, [r3, #0]
 8008be2:	e002      	b.n	8008bea <_printf_i+0xf2>
 8008be4:	0646      	lsls	r6, r0, #25
 8008be6:	d5fb      	bpl.n	8008be0 <_printf_i+0xe8>
 8008be8:	881e      	ldrh	r6, [r3, #0]
 8008bea:	4854      	ldr	r0, [pc, #336]	; (8008d3c <_printf_i+0x244>)
 8008bec:	2f6f      	cmp	r7, #111	; 0x6f
 8008bee:	bf0c      	ite	eq
 8008bf0:	2308      	moveq	r3, #8
 8008bf2:	230a      	movne	r3, #10
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bfa:	6865      	ldr	r5, [r4, #4]
 8008bfc:	60a5      	str	r5, [r4, #8]
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	bfa2      	ittt	ge
 8008c02:	6821      	ldrge	r1, [r4, #0]
 8008c04:	f021 0104 	bicge.w	r1, r1, #4
 8008c08:	6021      	strge	r1, [r4, #0]
 8008c0a:	b90e      	cbnz	r6, 8008c10 <_printf_i+0x118>
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	d04d      	beq.n	8008cac <_printf_i+0x1b4>
 8008c10:	4615      	mov	r5, r2
 8008c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c16:	fb03 6711 	mls	r7, r3, r1, r6
 8008c1a:	5dc7      	ldrb	r7, [r0, r7]
 8008c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c20:	4637      	mov	r7, r6
 8008c22:	42bb      	cmp	r3, r7
 8008c24:	460e      	mov	r6, r1
 8008c26:	d9f4      	bls.n	8008c12 <_printf_i+0x11a>
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d10b      	bne.n	8008c44 <_printf_i+0x14c>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	07de      	lsls	r6, r3, #31
 8008c30:	d508      	bpl.n	8008c44 <_printf_i+0x14c>
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	6861      	ldr	r1, [r4, #4]
 8008c36:	4299      	cmp	r1, r3
 8008c38:	bfde      	ittt	le
 8008c3a:	2330      	movle	r3, #48	; 0x30
 8008c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c44:	1b52      	subs	r2, r2, r5
 8008c46:	6122      	str	r2, [r4, #16]
 8008c48:	f8cd a000 	str.w	sl, [sp]
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	aa03      	add	r2, sp, #12
 8008c50:	4621      	mov	r1, r4
 8008c52:	4640      	mov	r0, r8
 8008c54:	f7ff fee2 	bl	8008a1c <_printf_common>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d14c      	bne.n	8008cf6 <_printf_i+0x1fe>
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	b004      	add	sp, #16
 8008c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c66:	4835      	ldr	r0, [pc, #212]	; (8008d3c <_printf_i+0x244>)
 8008c68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c6c:	6829      	ldr	r1, [r5, #0]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c74:	6029      	str	r1, [r5, #0]
 8008c76:	061d      	lsls	r5, r3, #24
 8008c78:	d514      	bpl.n	8008ca4 <_printf_i+0x1ac>
 8008c7a:	07df      	lsls	r7, r3, #31
 8008c7c:	bf44      	itt	mi
 8008c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c82:	6023      	strmi	r3, [r4, #0]
 8008c84:	b91e      	cbnz	r6, 8008c8e <_printf_i+0x196>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	f023 0320 	bic.w	r3, r3, #32
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2310      	movs	r3, #16
 8008c90:	e7b0      	b.n	8008bf4 <_printf_i+0xfc>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	f043 0320 	orr.w	r3, r3, #32
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	2378      	movs	r3, #120	; 0x78
 8008c9c:	4828      	ldr	r0, [pc, #160]	; (8008d40 <_printf_i+0x248>)
 8008c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ca2:	e7e3      	b.n	8008c6c <_printf_i+0x174>
 8008ca4:	0659      	lsls	r1, r3, #25
 8008ca6:	bf48      	it	mi
 8008ca8:	b2b6      	uxthmi	r6, r6
 8008caa:	e7e6      	b.n	8008c7a <_printf_i+0x182>
 8008cac:	4615      	mov	r5, r2
 8008cae:	e7bb      	b.n	8008c28 <_printf_i+0x130>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	6826      	ldr	r6, [r4, #0]
 8008cb4:	6961      	ldr	r1, [r4, #20]
 8008cb6:	1d18      	adds	r0, r3, #4
 8008cb8:	6028      	str	r0, [r5, #0]
 8008cba:	0635      	lsls	r5, r6, #24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0x1cc>
 8008cc0:	6019      	str	r1, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0x1d2>
 8008cc4:	0670      	lsls	r0, r6, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0x1c8>
 8008cc8:	8019      	strh	r1, [r3, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	4615      	mov	r5, r2
 8008cd0:	e7ba      	b.n	8008c48 <_printf_i+0x150>
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	602a      	str	r2, [r5, #0]
 8008cd8:	681d      	ldr	r5, [r3, #0]
 8008cda:	6862      	ldr	r2, [r4, #4]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7f7 fa8e 	bl	8000200 <memchr>
 8008ce4:	b108      	cbz	r0, 8008cea <_printf_i+0x1f2>
 8008ce6:	1b40      	subs	r0, r0, r5
 8008ce8:	6060      	str	r0, [r4, #4]
 8008cea:	6863      	ldr	r3, [r4, #4]
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf4:	e7a8      	b.n	8008c48 <_printf_i+0x150>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	47d0      	blx	sl
 8008d00:	3001      	adds	r0, #1
 8008d02:	d0ab      	beq.n	8008c5c <_printf_i+0x164>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	079b      	lsls	r3, r3, #30
 8008d08:	d413      	bmi.n	8008d32 <_printf_i+0x23a>
 8008d0a:	68e0      	ldr	r0, [r4, #12]
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	4298      	cmp	r0, r3
 8008d10:	bfb8      	it	lt
 8008d12:	4618      	movlt	r0, r3
 8008d14:	e7a4      	b.n	8008c60 <_printf_i+0x168>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d09b      	beq.n	8008c5c <_printf_i+0x164>
 8008d24:	3501      	adds	r5, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	9903      	ldr	r1, [sp, #12]
 8008d2a:	1a5b      	subs	r3, r3, r1
 8008d2c:	42ab      	cmp	r3, r5
 8008d2e:	dcf2      	bgt.n	8008d16 <_printf_i+0x21e>
 8008d30:	e7eb      	b.n	8008d0a <_printf_i+0x212>
 8008d32:	2500      	movs	r5, #0
 8008d34:	f104 0619 	add.w	r6, r4, #25
 8008d38:	e7f5      	b.n	8008d26 <_printf_i+0x22e>
 8008d3a:	bf00      	nop
 8008d3c:	0800987d 	.word	0x0800987d
 8008d40:	0800988e 	.word	0x0800988e

08008d44 <__sread>:
 8008d44:	b510      	push	{r4, lr}
 8008d46:	460c      	mov	r4, r1
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	f000 fa5a 	bl	8009204 <_read_r>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	bfab      	itete	ge
 8008d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d56:	89a3      	ldrhlt	r3, [r4, #12]
 8008d58:	181b      	addge	r3, r3, r0
 8008d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d5e:	bfac      	ite	ge
 8008d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d62:	81a3      	strhlt	r3, [r4, #12]
 8008d64:	bd10      	pop	{r4, pc}

08008d66 <__swrite>:
 8008d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	461f      	mov	r7, r3
 8008d6c:	898b      	ldrh	r3, [r1, #12]
 8008d6e:	05db      	lsls	r3, r3, #23
 8008d70:	4605      	mov	r5, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	4616      	mov	r6, r2
 8008d76:	d505      	bpl.n	8008d84 <__swrite+0x1e>
 8008d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f000 f9c8 	bl	8009114 <_lseek_r>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	4628      	mov	r0, r5
 8008d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9a:	f000 b869 	b.w	8008e70 <_write_r>

08008d9e <__sseek>:
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	460c      	mov	r4, r1
 8008da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da6:	f000 f9b5 	bl	8009114 <_lseek_r>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	bf15      	itete	ne
 8008db0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008db2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008db6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dba:	81a3      	strheq	r3, [r4, #12]
 8008dbc:	bf18      	it	ne
 8008dbe:	81a3      	strhne	r3, [r4, #12]
 8008dc0:	bd10      	pop	{r4, pc}

08008dc2 <__sclose>:
 8008dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc6:	f000 b8d3 	b.w	8008f70 <_close_r>
	...

08008dcc <__swbuf_r>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	460e      	mov	r6, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	b118      	cbz	r0, 8008dde <__swbuf_r+0x12>
 8008dd6:	6983      	ldr	r3, [r0, #24]
 8008dd8:	b90b      	cbnz	r3, 8008dde <__swbuf_r+0x12>
 8008dda:	f7ff fc19 	bl	8008610 <__sinit>
 8008dde:	4b21      	ldr	r3, [pc, #132]	; (8008e64 <__swbuf_r+0x98>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	d12b      	bne.n	8008e3c <__swbuf_r+0x70>
 8008de4:	686c      	ldr	r4, [r5, #4]
 8008de6:	69a3      	ldr	r3, [r4, #24]
 8008de8:	60a3      	str	r3, [r4, #8]
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	071a      	lsls	r2, r3, #28
 8008dee:	d52f      	bpl.n	8008e50 <__swbuf_r+0x84>
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	b36b      	cbz	r3, 8008e50 <__swbuf_r+0x84>
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	1ac0      	subs	r0, r0, r3
 8008dfa:	6963      	ldr	r3, [r4, #20]
 8008dfc:	b2f6      	uxtb	r6, r6
 8008dfe:	4283      	cmp	r3, r0
 8008e00:	4637      	mov	r7, r6
 8008e02:	dc04      	bgt.n	8008e0e <__swbuf_r+0x42>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 f948 	bl	800909c <_fflush_r>
 8008e0c:	bb30      	cbnz	r0, 8008e5c <__swbuf_r+0x90>
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	60a3      	str	r3, [r4, #8]
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	6022      	str	r2, [r4, #0]
 8008e1a:	701e      	strb	r6, [r3, #0]
 8008e1c:	6963      	ldr	r3, [r4, #20]
 8008e1e:	3001      	adds	r0, #1
 8008e20:	4283      	cmp	r3, r0
 8008e22:	d004      	beq.n	8008e2e <__swbuf_r+0x62>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	07db      	lsls	r3, r3, #31
 8008e28:	d506      	bpl.n	8008e38 <__swbuf_r+0x6c>
 8008e2a:	2e0a      	cmp	r6, #10
 8008e2c:	d104      	bne.n	8008e38 <__swbuf_r+0x6c>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f933 	bl	800909c <_fflush_r>
 8008e36:	b988      	cbnz	r0, 8008e5c <__swbuf_r+0x90>
 8008e38:	4638      	mov	r0, r7
 8008e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <__swbuf_r+0x9c>)
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	d101      	bne.n	8008e46 <__swbuf_r+0x7a>
 8008e42:	68ac      	ldr	r4, [r5, #8]
 8008e44:	e7cf      	b.n	8008de6 <__swbuf_r+0x1a>
 8008e46:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <__swbuf_r+0xa0>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	bf08      	it	eq
 8008e4c:	68ec      	ldreq	r4, [r5, #12]
 8008e4e:	e7ca      	b.n	8008de6 <__swbuf_r+0x1a>
 8008e50:	4621      	mov	r1, r4
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 f81e 	bl	8008e94 <__swsetup_r>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d0cb      	beq.n	8008df4 <__swbuf_r+0x28>
 8008e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e60:	e7ea      	b.n	8008e38 <__swbuf_r+0x6c>
 8008e62:	bf00      	nop
 8008e64:	0800982c 	.word	0x0800982c
 8008e68:	0800984c 	.word	0x0800984c
 8008e6c:	0800980c 	.word	0x0800980c

08008e70 <_write_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d07      	ldr	r5, [pc, #28]	; (8008e90 <_write_r+0x20>)
 8008e74:	4604      	mov	r4, r0
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	602a      	str	r2, [r5, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f7f8 f87d 	bl	8000f7e <_write>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_write_r+0x1e>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_write_r+0x1e>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20009aec 	.word	0x20009aec

08008e94 <__swsetup_r>:
 8008e94:	4b32      	ldr	r3, [pc, #200]	; (8008f60 <__swsetup_r+0xcc>)
 8008e96:	b570      	push	{r4, r5, r6, lr}
 8008e98:	681d      	ldr	r5, [r3, #0]
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	b125      	cbz	r5, 8008eaa <__swsetup_r+0x16>
 8008ea0:	69ab      	ldr	r3, [r5, #24]
 8008ea2:	b913      	cbnz	r3, 8008eaa <__swsetup_r+0x16>
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f7ff fbb3 	bl	8008610 <__sinit>
 8008eaa:	4b2e      	ldr	r3, [pc, #184]	; (8008f64 <__swsetup_r+0xd0>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	d10f      	bne.n	8008ed0 <__swsetup_r+0x3c>
 8008eb0:	686c      	ldr	r4, [r5, #4]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb8:	0719      	lsls	r1, r3, #28
 8008eba:	d42c      	bmi.n	8008f16 <__swsetup_r+0x82>
 8008ebc:	06dd      	lsls	r5, r3, #27
 8008ebe:	d411      	bmi.n	8008ee4 <__swsetup_r+0x50>
 8008ec0:	2309      	movs	r3, #9
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	e03e      	b.n	8008f4e <__swsetup_r+0xba>
 8008ed0:	4b25      	ldr	r3, [pc, #148]	; (8008f68 <__swsetup_r+0xd4>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d101      	bne.n	8008eda <__swsetup_r+0x46>
 8008ed6:	68ac      	ldr	r4, [r5, #8]
 8008ed8:	e7eb      	b.n	8008eb2 <__swsetup_r+0x1e>
 8008eda:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <__swsetup_r+0xd8>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	bf08      	it	eq
 8008ee0:	68ec      	ldreq	r4, [r5, #12]
 8008ee2:	e7e6      	b.n	8008eb2 <__swsetup_r+0x1e>
 8008ee4:	0758      	lsls	r0, r3, #29
 8008ee6:	d512      	bpl.n	8008f0e <__swsetup_r+0x7a>
 8008ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eea:	b141      	cbz	r1, 8008efe <__swsetup_r+0x6a>
 8008eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	d002      	beq.n	8008efa <__swsetup_r+0x66>
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff fa2b 	bl	8008350 <_free_r>
 8008efa:	2300      	movs	r3, #0
 8008efc:	6363      	str	r3, [r4, #52]	; 0x34
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	2300      	movs	r3, #0
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f043 0308 	orr.w	r3, r3, #8
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	b94b      	cbnz	r3, 8008f2e <__swsetup_r+0x9a>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f24:	d003      	beq.n	8008f2e <__swsetup_r+0x9a>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f000 f92b 	bl	8009184 <__smakebuf_r>
 8008f2e:	89a0      	ldrh	r0, [r4, #12]
 8008f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f34:	f010 0301 	ands.w	r3, r0, #1
 8008f38:	d00a      	beq.n	8008f50 <__swsetup_r+0xbc>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	6963      	ldr	r3, [r4, #20]
 8008f40:	425b      	negs	r3, r3
 8008f42:	61a3      	str	r3, [r4, #24]
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	b943      	cbnz	r3, 8008f5a <__swsetup_r+0xc6>
 8008f48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f4c:	d1ba      	bne.n	8008ec4 <__swsetup_r+0x30>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	0781      	lsls	r1, r0, #30
 8008f52:	bf58      	it	pl
 8008f54:	6963      	ldrpl	r3, [r4, #20]
 8008f56:	60a3      	str	r3, [r4, #8]
 8008f58:	e7f4      	b.n	8008f44 <__swsetup_r+0xb0>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e7f7      	b.n	8008f4e <__swsetup_r+0xba>
 8008f5e:	bf00      	nop
 8008f60:	2000009c 	.word	0x2000009c
 8008f64:	0800982c 	.word	0x0800982c
 8008f68:	0800984c 	.word	0x0800984c
 8008f6c:	0800980c 	.word	0x0800980c

08008f70 <_close_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	; (8008f8c <_close_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7f8 f81b 	bl	8000fb6 <_close>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_close_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_close_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20009aec 	.word	0x20009aec

08008f90 <__sflush_r>:
 8008f90:	898a      	ldrh	r2, [r1, #12]
 8008f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f96:	4605      	mov	r5, r0
 8008f98:	0710      	lsls	r0, r2, #28
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	d458      	bmi.n	8009050 <__sflush_r+0xc0>
 8008f9e:	684b      	ldr	r3, [r1, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dc05      	bgt.n	8008fb0 <__sflush_r+0x20>
 8008fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dc02      	bgt.n	8008fb0 <__sflush_r+0x20>
 8008faa:	2000      	movs	r0, #0
 8008fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb2:	2e00      	cmp	r6, #0
 8008fb4:	d0f9      	beq.n	8008faa <__sflush_r+0x1a>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fbc:	682f      	ldr	r7, [r5, #0]
 8008fbe:	602b      	str	r3, [r5, #0]
 8008fc0:	d032      	beq.n	8009028 <__sflush_r+0x98>
 8008fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	075a      	lsls	r2, r3, #29
 8008fc8:	d505      	bpl.n	8008fd6 <__sflush_r+0x46>
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	1ac0      	subs	r0, r0, r3
 8008fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fd0:	b10b      	cbz	r3, 8008fd6 <__sflush_r+0x46>
 8008fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fd4:	1ac0      	subs	r0, r0, r3
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fdc:	6a21      	ldr	r1, [r4, #32]
 8008fde:	4628      	mov	r0, r5
 8008fe0:	47b0      	blx	r6
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	d106      	bne.n	8008ff6 <__sflush_r+0x66>
 8008fe8:	6829      	ldr	r1, [r5, #0]
 8008fea:	291d      	cmp	r1, #29
 8008fec:	d82c      	bhi.n	8009048 <__sflush_r+0xb8>
 8008fee:	4a2a      	ldr	r2, [pc, #168]	; (8009098 <__sflush_r+0x108>)
 8008ff0:	40ca      	lsrs	r2, r1
 8008ff2:	07d6      	lsls	r6, r2, #31
 8008ff4:	d528      	bpl.n	8009048 <__sflush_r+0xb8>
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	6062      	str	r2, [r4, #4]
 8008ffa:	04d9      	lsls	r1, r3, #19
 8008ffc:	6922      	ldr	r2, [r4, #16]
 8008ffe:	6022      	str	r2, [r4, #0]
 8009000:	d504      	bpl.n	800900c <__sflush_r+0x7c>
 8009002:	1c42      	adds	r2, r0, #1
 8009004:	d101      	bne.n	800900a <__sflush_r+0x7a>
 8009006:	682b      	ldr	r3, [r5, #0]
 8009008:	b903      	cbnz	r3, 800900c <__sflush_r+0x7c>
 800900a:	6560      	str	r0, [r4, #84]	; 0x54
 800900c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800900e:	602f      	str	r7, [r5, #0]
 8009010:	2900      	cmp	r1, #0
 8009012:	d0ca      	beq.n	8008faa <__sflush_r+0x1a>
 8009014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009018:	4299      	cmp	r1, r3
 800901a:	d002      	beq.n	8009022 <__sflush_r+0x92>
 800901c:	4628      	mov	r0, r5
 800901e:	f7ff f997 	bl	8008350 <_free_r>
 8009022:	2000      	movs	r0, #0
 8009024:	6360      	str	r0, [r4, #52]	; 0x34
 8009026:	e7c1      	b.n	8008fac <__sflush_r+0x1c>
 8009028:	6a21      	ldr	r1, [r4, #32]
 800902a:	2301      	movs	r3, #1
 800902c:	4628      	mov	r0, r5
 800902e:	47b0      	blx	r6
 8009030:	1c41      	adds	r1, r0, #1
 8009032:	d1c7      	bne.n	8008fc4 <__sflush_r+0x34>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0c4      	beq.n	8008fc4 <__sflush_r+0x34>
 800903a:	2b1d      	cmp	r3, #29
 800903c:	d001      	beq.n	8009042 <__sflush_r+0xb2>
 800903e:	2b16      	cmp	r3, #22
 8009040:	d101      	bne.n	8009046 <__sflush_r+0xb6>
 8009042:	602f      	str	r7, [r5, #0]
 8009044:	e7b1      	b.n	8008faa <__sflush_r+0x1a>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	e7ad      	b.n	8008fac <__sflush_r+0x1c>
 8009050:	690f      	ldr	r7, [r1, #16]
 8009052:	2f00      	cmp	r7, #0
 8009054:	d0a9      	beq.n	8008faa <__sflush_r+0x1a>
 8009056:	0793      	lsls	r3, r2, #30
 8009058:	680e      	ldr	r6, [r1, #0]
 800905a:	bf08      	it	eq
 800905c:	694b      	ldreq	r3, [r1, #20]
 800905e:	600f      	str	r7, [r1, #0]
 8009060:	bf18      	it	ne
 8009062:	2300      	movne	r3, #0
 8009064:	eba6 0807 	sub.w	r8, r6, r7
 8009068:	608b      	str	r3, [r1, #8]
 800906a:	f1b8 0f00 	cmp.w	r8, #0
 800906e:	dd9c      	ble.n	8008faa <__sflush_r+0x1a>
 8009070:	6a21      	ldr	r1, [r4, #32]
 8009072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009074:	4643      	mov	r3, r8
 8009076:	463a      	mov	r2, r7
 8009078:	4628      	mov	r0, r5
 800907a:	47b0      	blx	r6
 800907c:	2800      	cmp	r0, #0
 800907e:	dc06      	bgt.n	800908e <__sflush_r+0xfe>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e78e      	b.n	8008fac <__sflush_r+0x1c>
 800908e:	4407      	add	r7, r0
 8009090:	eba8 0800 	sub.w	r8, r8, r0
 8009094:	e7e9      	b.n	800906a <__sflush_r+0xda>
 8009096:	bf00      	nop
 8009098:	20400001 	.word	0x20400001

0800909c <_fflush_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	690b      	ldr	r3, [r1, #16]
 80090a0:	4605      	mov	r5, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	b913      	cbnz	r3, 80090ac <_fflush_r+0x10>
 80090a6:	2500      	movs	r5, #0
 80090a8:	4628      	mov	r0, r5
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	b118      	cbz	r0, 80090b6 <_fflush_r+0x1a>
 80090ae:	6983      	ldr	r3, [r0, #24]
 80090b0:	b90b      	cbnz	r3, 80090b6 <_fflush_r+0x1a>
 80090b2:	f7ff faad 	bl	8008610 <__sinit>
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <_fflush_r+0x6c>)
 80090b8:	429c      	cmp	r4, r3
 80090ba:	d11b      	bne.n	80090f4 <_fflush_r+0x58>
 80090bc:	686c      	ldr	r4, [r5, #4]
 80090be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0ef      	beq.n	80090a6 <_fflush_r+0xa>
 80090c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090c8:	07d0      	lsls	r0, r2, #31
 80090ca:	d404      	bmi.n	80090d6 <_fflush_r+0x3a>
 80090cc:	0599      	lsls	r1, r3, #22
 80090ce:	d402      	bmi.n	80090d6 <_fflush_r+0x3a>
 80090d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d2:	f7ff fb3b 	bl	800874c <__retarget_lock_acquire_recursive>
 80090d6:	4628      	mov	r0, r5
 80090d8:	4621      	mov	r1, r4
 80090da:	f7ff ff59 	bl	8008f90 <__sflush_r>
 80090de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090e0:	07da      	lsls	r2, r3, #31
 80090e2:	4605      	mov	r5, r0
 80090e4:	d4e0      	bmi.n	80090a8 <_fflush_r+0xc>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	059b      	lsls	r3, r3, #22
 80090ea:	d4dd      	bmi.n	80090a8 <_fflush_r+0xc>
 80090ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ee:	f7ff fb2e 	bl	800874e <__retarget_lock_release_recursive>
 80090f2:	e7d9      	b.n	80090a8 <_fflush_r+0xc>
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <_fflush_r+0x70>)
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d101      	bne.n	80090fe <_fflush_r+0x62>
 80090fa:	68ac      	ldr	r4, [r5, #8]
 80090fc:	e7df      	b.n	80090be <_fflush_r+0x22>
 80090fe:	4b04      	ldr	r3, [pc, #16]	; (8009110 <_fflush_r+0x74>)
 8009100:	429c      	cmp	r4, r3
 8009102:	bf08      	it	eq
 8009104:	68ec      	ldreq	r4, [r5, #12]
 8009106:	e7da      	b.n	80090be <_fflush_r+0x22>
 8009108:	0800982c 	.word	0x0800982c
 800910c:	0800984c 	.word	0x0800984c
 8009110:	0800980c 	.word	0x0800980c

08009114 <_lseek_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_lseek_r+0x20>)
 8009118:	4604      	mov	r4, r0
 800911a:	4608      	mov	r0, r1
 800911c:	4611      	mov	r1, r2
 800911e:	2200      	movs	r2, #0
 8009120:	602a      	str	r2, [r5, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	f7f7 ff6e 	bl	8001004 <_lseek>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_lseek_r+0x1e>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_lseek_r+0x1e>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20009aec 	.word	0x20009aec

08009138 <__swhatbuf_r>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	460e      	mov	r6, r1
 800913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009140:	2900      	cmp	r1, #0
 8009142:	b096      	sub	sp, #88	; 0x58
 8009144:	4614      	mov	r4, r2
 8009146:	461d      	mov	r5, r3
 8009148:	da08      	bge.n	800915c <__swhatbuf_r+0x24>
 800914a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	061a      	lsls	r2, r3, #24
 8009154:	d410      	bmi.n	8009178 <__swhatbuf_r+0x40>
 8009156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800915a:	e00e      	b.n	800917a <__swhatbuf_r+0x42>
 800915c:	466a      	mov	r2, sp
 800915e:	f000 f863 	bl	8009228 <_fstat_r>
 8009162:	2800      	cmp	r0, #0
 8009164:	dbf1      	blt.n	800914a <__swhatbuf_r+0x12>
 8009166:	9a01      	ldr	r2, [sp, #4]
 8009168:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800916c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009170:	425a      	negs	r2, r3
 8009172:	415a      	adcs	r2, r3
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	e7ee      	b.n	8009156 <__swhatbuf_r+0x1e>
 8009178:	2340      	movs	r3, #64	; 0x40
 800917a:	2000      	movs	r0, #0
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	b016      	add	sp, #88	; 0x58
 8009180:	bd70      	pop	{r4, r5, r6, pc}
	...

08009184 <__smakebuf_r>:
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009188:	079d      	lsls	r5, r3, #30
 800918a:	4606      	mov	r6, r0
 800918c:	460c      	mov	r4, r1
 800918e:	d507      	bpl.n	80091a0 <__smakebuf_r+0x1c>
 8009190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	6123      	str	r3, [r4, #16]
 8009198:	2301      	movs	r3, #1
 800919a:	6163      	str	r3, [r4, #20]
 800919c:	b002      	add	sp, #8
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	ab01      	add	r3, sp, #4
 80091a2:	466a      	mov	r2, sp
 80091a4:	f7ff ffc8 	bl	8009138 <__swhatbuf_r>
 80091a8:	9900      	ldr	r1, [sp, #0]
 80091aa:	4605      	mov	r5, r0
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff f93b 	bl	8008428 <_malloc_r>
 80091b2:	b948      	cbnz	r0, 80091c8 <__smakebuf_r+0x44>
 80091b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b8:	059a      	lsls	r2, r3, #22
 80091ba:	d4ef      	bmi.n	800919c <__smakebuf_r+0x18>
 80091bc:	f023 0303 	bic.w	r3, r3, #3
 80091c0:	f043 0302 	orr.w	r3, r3, #2
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	e7e3      	b.n	8009190 <__smakebuf_r+0xc>
 80091c8:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <__smakebuf_r+0x7c>)
 80091ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	6020      	str	r0, [r4, #0]
 80091d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	6163      	str	r3, [r4, #20]
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	6120      	str	r0, [r4, #16]
 80091de:	b15b      	cbz	r3, 80091f8 <__smakebuf_r+0x74>
 80091e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e4:	4630      	mov	r0, r6
 80091e6:	f000 f831 	bl	800924c <_isatty_r>
 80091ea:	b128      	cbz	r0, 80091f8 <__smakebuf_r+0x74>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	f043 0301 	orr.w	r3, r3, #1
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	89a0      	ldrh	r0, [r4, #12]
 80091fa:	4305      	orrs	r5, r0
 80091fc:	81a5      	strh	r5, [r4, #12]
 80091fe:	e7cd      	b.n	800919c <__smakebuf_r+0x18>
 8009200:	080085a9 	.word	0x080085a9

08009204 <_read_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	; (8009224 <_read_r+0x20>)
 8009208:	4604      	mov	r4, r0
 800920a:	4608      	mov	r0, r1
 800920c:	4611      	mov	r1, r2
 800920e:	2200      	movs	r2, #0
 8009210:	602a      	str	r2, [r5, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f7f7 fe96 	bl	8000f44 <_read>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_read_r+0x1e>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_read_r+0x1e>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20009aec 	.word	0x20009aec

08009228 <_fstat_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_fstat_r+0x20>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f7f7 feca 	bl	8000fce <_fstat>
 800923a:	1c43      	adds	r3, r0, #1
 800923c:	d102      	bne.n	8009244 <_fstat_r+0x1c>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b103      	cbz	r3, 8009244 <_fstat_r+0x1c>
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	bf00      	nop
 8009248:	20009aec 	.word	0x20009aec

0800924c <_isatty_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d06      	ldr	r5, [pc, #24]	; (8009268 <_isatty_r+0x1c>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7f7 fec9 	bl	8000fee <_isatty>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_isatty_r+0x1a>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_isatty_r+0x1a>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20009aec 	.word	0x20009aec

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr
